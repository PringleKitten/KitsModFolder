<!-- This file can be parsed by haxe.rtti.XmlParser -->
<haxe>
	<class path="Array" params="T" file="D:\Projects\haxe\std/Array.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` Array.</haxe_doc>
		</length>
		<concat public="1" set="method">
			<f a="a">
				<c path="Array"><c path="Array.T"/></c>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Returns a new Array by appending the elements of `a` to the elements of
		`this` Array.

		This operation does not modify `this` Array.

		If `a` is the empty Array `[]`, a copy of `this` Array is returned.

		The length of the returned Array is equal to the sum of `this.length`
		and `a.length`.

		If `a` is `null`, the result is unspecified.</haxe_doc>
		</concat>
		<join public="1" set="method">
			<f a="sep">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representation of `this` Array, with `sep` separating
		each element.

		The result of this operation is equal to `Std.string(this[0]) + sep +
		Std.string(this[1]) + sep + ... + sep + Std.string(this[this.length-1])`

		If `this` is the empty Array `[]`, the result is the empty String `""`.
		If `this` has exactly one element, the result is equal to a call to
		`Std.string(this[0])`.

		If `sep` is null, the result is unspecified.</haxe_doc>
		</join>
		<pop public="1" set="method">
			<f a=""><x path="Null"><c path="Array.T"/></x></f>
			<haxe_doc>Removes the last element of `this` Array and returns it.

		This operation modifies `this` Array in place.

		If `this` has at least one element, `this.length` will decrease by 1.

		If `this` is the empty Array `[]`, null is returned and the length
		remains 0.</haxe_doc>
		</pop>
		<push public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Adds the element `x` at the end of `this` Array and returns the new
		length of `this` Array.

		This operation modifies `this` Array in place.

		`this.length` increases by 1.</haxe_doc>
		</push>
		<reverse public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc><![CDATA[Reverse the order of elements of `this` Array.

		This operation modifies `this` Array in place.

		If `this.length < 2`, `this` remains unchanged.]]></haxe_doc>
		</reverse>
		<shift public="1" set="method">
			<f a=""><x path="Null"><c path="Array.T"/></x></f>
			<haxe_doc>Removes the first element of `this` Array and returns it.

		This operation modifies `this` Array in place.

		If `this` has at least one element, `this`.length and the index of each
		remaining element is decreased by 1.

		If `this` is the empty Array `[]`, `null` is returned and the length
		remains 0.</haxe_doc>
		</shift>
		<slice public="1" set="method">
			<f a="pos:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Creates a shallow copy of the range of `this` Array, starting at and
		including `pos`, up to but not including `end`.

		This operation does not modify `this` Array.

		The elements are not copied and retain their identity.

		If `end` is omitted or exceeds `this.length`, it defaults to the end of
		`this` Array.

		If `pos` or `end` are negative, their offsets are calculated from the
		end of `this` Array by `this.length + pos` and `this.length + end`
		respectively. If this yields a negative value, 0 is used instead.

		If `pos` exceeds `this.length` or if `end` is less than or equals
		`pos`, the result is `[]`.</haxe_doc>
		</slice>
		<sort public="1" set="method">
			<f a="f">
				<f a=":">
					<c path="Array.T"/>
					<c path="Array.T"/>
					<x path="Int"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[Sorts `this` Array according to the comparison function `f`, where
		`f(x,y)` returns 0 if x == y, a positive Int if x > y and a
		negative Int if x < y.

		This operation modifies `this` Array in place.

		The sort operation is not guaranteed to be stable, which means that the
		order of equal elements may not be retained. For a stable Array sorting
		algorithm, `haxe.ds.ArraySort.sort()` can be used instead.

		If `f` is null, the result is unspecified.]]></haxe_doc>
		</sort>
		<splice public="1" set="method">
			<f a="pos:len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc><![CDATA[Removes `len` elements from `this` Array, starting at and including
		`pos`, an returns them.

		This operation modifies `this` Array in place.

		If `len` is < 0 or `pos` exceeds `this`.length, an empty Array [] is
		returned and `this` Array is unchanged.

		If `pos` is negative, its value is calculated from the end	of `this`
		Array by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the sum of the resulting values for `len` and `pos` exceed
		`this.length`, this operation will affect the elements from `pos` to the
		end of `this` Array.

		The length of the returned Array is equal to the new length of `this`
		Array subtracted from the original length of `this` Array. In other
		words, each element of the original `this` Array either remains in
		`this` Array or becomes an element of the returned Array.]]></haxe_doc>
		</splice>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representation of `this` Array.

		The result will include the individual elements' String representations
		separated by comma. The enclosing [ ] may be missing on some platforms,
		use `Std.string()` to get a String representation that is consistent
		across platforms.</haxe_doc>
		</toString>
		<unshift public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds the element `x` at the start of `this` Array.

		This operation modifies `this` Array in place.

		`this.length` and the index of each Array element increases by 1.</haxe_doc>
		</unshift>
		<insert public="1" set="method">
			<f a="pos:x">
				<x path="Int"/>
				<c path="Array.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Inserts the element `x` at the position `pos`.

		This operation modifies `this` Array in place.

		The offset is calculated like so:

		- If `pos` exceeds `this.length`, the offset is `this.length`.
		- If `pos` is negative, the offset is calculated from the end of `this`
		  Array, i.e. `this.length + pos`. If this yields a negative value, the
		  offset is 0.
		- Otherwise, the offset is `pos`.

		If the resulting offset does not exceed `this.length`, all elements from
		and including that offset to the end of `this` Array are moved one index
		ahead.</haxe_doc>
		</insert>
		<remove public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the first occurrence of `x` in `this` Array.

		This operation modifies `this` Array in place.

		If `x` is found by checking standard equality, it is removed from `this`
		Array and all following elements are reindexed accordingly. The function
		then returns true.

		If `x` is not found, `this` Array is not changed and the function
		returns false.</haxe_doc>
		</remove>
		<indexOf public="1" set="method">
			<f a="x:?fromIndex">
				<c path="Array.T"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns position of the first occurrence of `x` in `this` Array, searching front to back.

		If `x` is found by checking standard equality, the function returns its index.

		If `x` is not found, the function returns -1.

		If `fromIndex` is specified, it will be used as the starting index to search from,
		otherwise search starts with zero index. If it is negative, it will be taken as the
		offset from the end of `this` Array to compute the starting index. If given or computed
		starting index is less than 0, the whole array will be searched, if it is greater than
		or equal to the length of `this` Array, the function returns -1.</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" set="method">
			<f a="x:?fromIndex">
				<c path="Array.T"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns position of the last occurrence of `x` in `this` Array, searching back to front.

		If `x` is found by checking standard equality, the function returns its index.

		If `x` is not found, the function returns -1.

		If `fromIndex` is specified, it will be used as the starting index to search from,
		otherwise search starts with the last element index. If it is negative, it will be
		taken as the offset from the end of `this` Array to compute the starting index. If
		given or computed starting index is greater than or equal to the length of `this` Array,
		the whole array will be searched, if it is less than 0, the function returns -1.</haxe_doc>
		</lastIndexOf>
		<copy public="1" set="method">
			<f a=""><c path="Array"><c path="Array.T"/></c></f>
			<haxe_doc>Returns a shallow copy of `this` Array.

		The elements are not copied and retain their identity, so
		`a[i] == a.copy()[i]` is true for any valid `i`. However,
		`a == a.copy()` is always false.</haxe_doc>
		</copy>
		<iterator public="1" set="method">
			<f a=""><t path="Iterator"><c path="Array.T"/></t></f>
			<haxe_doc>Returns an iterator of the Array values.</haxe_doc>
		</iterator>
		<map public="1" params="S" get="inline" set="null" line="277">
			<f a="f">
				<f a="">
					<c path="Array.T"/>
					<c path="map.S"/>
				</f>
				<c path="Array"><c path="map.S"/></c>
			</f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>Creates a new Array by applying function `f` to all elements of `this`.

		The order of elements is preserved.

		If `f` is null, the result is unspecified.</haxe_doc>
		</map>
		<filter public="1" get="inline" set="null" line="295">
			<f a="f">
				<f a="">
					<c path="Array.T"/>
					<x path="Bool"/>
				</f>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>Returns an Array containing those elements of `this` for which `f`
		returned true.

		The individual elements are not duplicated and retain their identity.

		If `f` is null, the result is unspecified.</haxe_doc>
		</filter>
		<resize public="1" set="method">
			<f a="len">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set the length of the Array.

		If `len` is shorter than the array's current size, the last
		`length - len` elements will be removed. If `len` is longer, the Array
		will be extended, with new elements set to a target-specific default
		value:

		- always null on dynamic targets
		- 0, 0.0 or false for Int, Float and Bool respectively on static targets
		- null for other types on static targets</haxe_doc>
		</resize>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new Array.</haxe_doc>
		</new>
		<haxe_doc>An Array is a storage for values. You can access it using indexes or
	with its API.

	@see https://haxe.org/manual/std-Array.html
	@see https://haxe.org/manual/lf-array-comprehension.html</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="Class" params="T" file="D:\Projects\haxe\std/Class.hx">
		<this><x path="Class"><c path="Class.T"/></x></this>
		<haxe_doc>An abstract type that represents a Class.

	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-class-instance.html</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<class path="Date" params="" file="D:\Projects\haxe\std/Date.hx" extern="1">
		<now public="1" set="method" static="1">
			<f a=""><c path="Date"/></f>
			<haxe_doc>Returns a Date representing the current local time.</haxe_doc>
		</now>
		<fromTime public="1" set="method" static="1">
			<f a="t">
				<x path="Float"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Creates a Date from the timestamp (in milliseconds) `t`.</haxe_doc>
		</fromTime>
		<fromString public="1" set="method" static="1">
			<f a="s">
				<c path="String"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Creates a Date from the formatted string `s`. The following formats are
		accepted by the function:

		- `"YYYY-MM-DD hh:mm:ss"`
		- `"YYYY-MM-DD"`
		- `"hh:mm:ss"`

		The first two formats expressed a date in local time. The third is a time
		relative to the UTC epoch.</haxe_doc>
		</fromString>
		<getTime public="1" set="method">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns the timestamp (in milliseconds) of `this` date.
		On cpp and neko, this function only has a second resolution, so the
		result will always be a multiple of `1000.0`, e.g. `1454698271000.0`.
		To obtain the current timestamp with better precision on cpp and neko,
		see the `Sys.time` API.

		For measuring time differences with millisecond accuracy on
		all platforms, see `haxe.Timer.stamp`.</haxe_doc>
		</getTime>
		<getHours public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the hours of `this` Date (0-23 range) in the local timezone.</haxe_doc>
		</getHours>
		<getMinutes public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the minutes of `this` Date (0-59 range) in the local timezone.</haxe_doc>
		</getMinutes>
		<getSeconds public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the seconds of `this` Date (0-59 range) in the local timezone.</haxe_doc>
		</getSeconds>
		<getFullYear public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the full year of `this` Date (4 digits) in the local timezone.</haxe_doc>
		</getFullYear>
		<getMonth public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the month of `this` Date (0-11 range) in the local timezone.
		Note that the month number is zero-based.</haxe_doc>
		</getMonth>
		<getDate public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of `this` Date (1-31 range) in the local timezone.</haxe_doc>
		</getDate>
		<getDay public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of the week of `this` Date (0-6 range, where `0` is Sunday)
		in the local timezone.</haxe_doc>
		</getDay>
		<getUTCHours public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the hours of `this` Date (0-23 range) in UTC.</haxe_doc>
		</getUTCHours>
		<getUTCMinutes public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the minutes of `this` Date (0-59 range) in UTC.</haxe_doc>
		</getUTCMinutes>
		<getUTCSeconds public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the seconds of `this` Date (0-59 range) in UTC.</haxe_doc>
		</getUTCSeconds>
		<getUTCFullYear public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the full year of `this` Date (4 digits) in UTC.</haxe_doc>
		</getUTCFullYear>
		<getUTCMonth public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the month of `this` Date (0-11 range) in UTC.
		Note that the month number is zero-based.</haxe_doc>
		</getUTCMonth>
		<getUTCDate public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of `this` Date (1-31 range) in UTC.</haxe_doc>
		</getUTCDate>
		<getUTCDay public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of the week of `this` Date (0-6 range, where `0` is Sunday)
		in UTC.</haxe_doc>
		</getUTCDay>
		<getTimezoneOffset public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the time zone difference of `this` Date in the current locale
		to UTC, in minutes.

		Assuming the function is executed on a machine in a UTC+2 timezone,
		`Date.now().getTimezoneOffset()` will return `-120`.</haxe_doc>
		</getTimezoneOffset>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representation of `this` Date in the local timezone
		using the standard format `YYYY-MM-DD HH:MM:SS`. See `DateTools.format` for
		other formatting rules.</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="year:month:day:hour:min:sec">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new date object from the given arguments.

		The behaviour of a Date instance is only consistent across platforms if
		the the arguments describe a valid date.

		- month: 0 to 11 (note that this is zero-based)
		- day: 1 to 31
		- hour: 0 to 23
		- min: 0 to 59
		- sec: 0 to 59</haxe_doc>
		</new>
		<haxe_doc>The Date class provides a basic structure for date and time related
	information. Date instances can be created by

	- `new Date()` for a specific date,
	- `Date.now()` to obtain information about the current time,
	- `Date.fromTime()` with a given timestamp or
	- `Date.fromString()` by parsing from a String.

	There are some extra functions available in the `DateTools` class.

	In the context of Haxe dates, a timestamp is defined as the number of
	milliseconds elapsed since 1st January 1970 UTC.

	## Supported range

	Due to platform limitations, only dates in the range 1970 through 2038 are
	supported consistently. Some targets may support dates outside this range,
	depending on the OS at runtime. The `Date.fromTime` method will not work with
	timestamps outside the range on any target.</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="EReg" params="" file="D:\Projects\haxe\std/EReg.hx">
		<match public="1" set="method" line="58">
			<f a="s">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `this` regular expression matches String `s`.

		This method modifies the internal state.

		If `s` is `null`, the result is unspecified.</haxe_doc>
		</match>
		<matched public="1" set="method" line="73">
			<f a="n">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the matched sub-group `n` of `this` EReg.

		This method should only be called after `this.match` or
		`this.matchSub`, and then operates on the String of that operation.

		The index `n` corresponds to the n-th set of parentheses in the pattern
		of `this` EReg. If no such sub-group exists, the result is unspecified.

		If `n` equals 0, the whole matched substring is returned.</haxe_doc>
		</matched>
		<replace public="1" set="method" line="173">
			<f a="s:by">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Replaces the first substring of `s` which `this` EReg matches with `by`.

		If `this` EReg does not match any substring, the result is `s`.

		By default, this method replaces only the first matched substring. If
		the global g modifier is in place, all matched substrings are replaced.

		If `by` contains `$1` to `$9`, the digit corresponds to number of a
		matched sub-group and its value is used instead. If no such sub-group
		exists, the replacement is unspecified. The string `$$` becomes `$`.

		If `s` or `by` are null, the result is unspecified.</haxe_doc>
		</replace>
		<map public="1" set="method" line="191">
			<f a="s:f">
				<c path="String"/>
				<f a="">
					<c path="EReg"/>
					<c path="String"/>
				</f>
				<c path="String"/>
			</f>
			<haxe_doc>Calls the function `f` for the substring of `s` which `this` EReg matches
		and replaces that substring with the result of `f` call.

		The `f` function takes `this` EReg object as its first argument and should
		return a replacement string for the substring matched.

		If `this` EReg does not match any substring, the result is `s`.

		By default, this method replaces only the first matched substring. If
		the global g modifier is in place, all matched substrings are replaced.

		If `s` or `f` are null, the result is unspecified.</haxe_doc>
		</map>
		<new public="1" set="method" line="47">
			<f a="r:opt">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new regular expression with pattern `r` and modifiers `opt`.

		This is equivalent to the shorthand syntax `~/r/opt`

		If `r` or `opt` are null, the result is unspecified.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The EReg class represents regular expressions.

	While basic usage and patterns consistently work across platforms, some more
	complex operations may yield different results. This is a necessary trade-
	off to retain a certain level of performance.

	EReg instances can be created by calling the constructor, or with the
	special syntax `~/pattern/modifier`

	EReg instances maintain an internal state, which is affected by several of
	its methods.

	A detailed explanation of the supported operations is available at
	<https://haxe.org/manual/std-regex.html>]]></haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<abstract path="Enum" params="T" file="D:\Projects\haxe\std/Enum.hx">
		<this><x path="Enum"><c path="Enum.T"/></x></this>
		<haxe_doc>An abstract type that represents an Enum type.

	The corresponding enum instance type is `EnumValue`.

	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-enum-instance.html</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="EnumValue" params="" file="D:\Projects\haxe\std/EnumValue.hx">
		<this><x path="EnumValue"/></this>
		<haxe_doc>An abstract type that represents any enum value.
	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-enum-instance.html</haxe_doc>
		<meta><m n=":coreType"/></meta>
		<impl><class path="_EnumValue.EnumValue_Impl_" params="" file="D:\Projects\haxe\std/EnumValue.hx" private="1" module="EnumValue"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="Lambda" params="" file="D:\Projects\haxe\std/Lambda.hx">
		<count public="1" params="A" set="method" line="195" static="1">
			<f a="it:?pred">
				<t path="Iterable"><c path="count.A"/></t>
				<f a="item">
					<c path="count.A"/>
					<x path="Bool"/>
				</f>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the number of elements in `it` for which `pred` is true, or the
		total number of elements in `it` if `pred` is null.

		This function traverses all elements.</haxe_doc>
		</count>
		<haxe_doc>The `Lambda` class is a collection of methods to support functional
	programming. It is ideally used with `using Lambda` and then acts as an
	extension to Iterable types.

	On static platforms, working with the Iterable structure might be slower
	than performing the operations directly on known types, such as Array and
	List.

	If the first argument to any of the methods is null, the result is
	unspecified.

	@see https://haxe.org/manual/std-Lambda.html</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<typedef path="List" params="T" file="D:\Projects\haxe\std/List.hx"><c path="haxe.ds.List"><c path="List.T"/></c></typedef>
	<typedef path="Map" params="K:V" file="D:\Projects\haxe\std/Map.hx"><x path="haxe.ds.Map">
	<c path="Map.K"/>
	<c path="Map.V"/>
</x></typedef>
	<typedef path="IMap" params="K:V" file="D:\Projects\haxe\std/Map.hx" module="Map">
		<c path="haxe.IMap">
			<c path="IMap.K"/>
			<c path="IMap.V"/>
		</c>
		<meta>
			<m n=":dox"><e>hide</e></m>
			<m n=":deprecated"/>
		</meta>
	</typedef>
	<class path="Math" params="" file="D:\Projects\haxe\std/Math.hx" extern="1">
		<PI public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>Represents the ratio of the circumference of a circle to its diameter,
		specified by the constant, π. `PI` is approximately 3.141592653589793.</haxe_doc>
		</PI>
		<NEGATIVE_INFINITY public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special `Float` constant which denotes negative infinity.

		For example, this is the result of -1.0 / 0.0.

		Operations with `NEGATIVE_INFINITY` as an operand may result in
		`NEGATIVE_INFINITY`, `POSITIVE_INFINITY` or `NaN`.

		If this constant is converted to an `Int`, e.g. through `Std.int()`, the
		result is unspecified.</haxe_doc>
		</NEGATIVE_INFINITY>
		<POSITIVE_INFINITY public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special `Float` constant which denotes positive infinity.

		For example, this is the result of 1.0 / 0.0.

		Operations with `POSITIVE_INFINITY` as an operand may result in
		`NEGATIVE_INFINITY`, `POSITIVE_INFINITY` or `NaN`.

		If this constant is converted to an `Int`, e.g. through `Std.int()`, the
		result is unspecified.</haxe_doc>
		</POSITIVE_INFINITY>
		<NaN public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special `Float` constant which denotes an invalid number.

		NaN stands for "Not a Number". It occurs when a mathematically incorrect
		operation is executed, such as taking the square root of a negative
		number: Math.sqrt(-1).

		All further operations with `NaN` as an operand will result in `NaN`.

		If this constant is converted to an `Int`, e.g. through `Std.int()`, the
		result is unspecified.

		In order to test if a value is `NaN`, you should use `Math.isNaN()` function.</haxe_doc>
		</NaN>
		<abs public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the absolute value of `v`.

		If `v` is positive or 0, the result is unchanged. Otherwise the result
		is -`v`.

		If `v` is `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`, the result is
		`POSITIVE_INFINITY`.

		If `v` is `NaN`, the result is `NaN`.</haxe_doc>
		</abs>
		<min public="1" set="method" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the smaller of values `a` and `b`.

		If `a` or `b` are `NaN`, the result is `NaN`.
		If `a` or `b` are `NEGATIVE_INFINITY`, the result is `NEGATIVE_INFINITY`.
		If `a` and `b` are `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.</haxe_doc>
		</min>
		<max public="1" set="method" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the greater of values `a` and `b`.

		If `a` or `b` are `NaN`, the result is `NaN`.
		If `a` or `b` are `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		If `a` and `b` are `NEGATIVE_INFINITY`, the result is `NEGATIVE_INFINITY`.</haxe_doc>
		</max>
		<sin public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric sine of the specified angle `v`, in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</sin>
		<cos public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric cosine of the specified angle `v`, in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</cos>
		<tan public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric tangent of the specified angle `v`, in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</tan>
		<asin public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc of the specified angle `v`, in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</asin>
		<acos public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc cosine of the specified angle `v`,
		in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</acos>
		<atan public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc tangent of the specified angle `v`,
		in radians.

		If `v` is `NaN` or infinite, the result is `NaN`.</haxe_doc>
		</atan>
		<atan2 public="1" set="method" static="1">
			<f a="y:x">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc tangent whose tangent is the quotient of
		two specified numbers, in radians.

		If parameter `x` or `y`  is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`,
		the result is `NaN`.</haxe_doc>
		</atan2>
		<exp public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns Euler's number, raised to the power of `v`.

		exp(1.0) is approximately 2.718281828459.

		If `v` is `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		If `v` is `NEGATIVE_INFINITY`, the result is `0.0`.
		If `v` is `NaN`, the result is `NaN`.</haxe_doc>
		</exp>
		<log public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the natural logarithm of `v`.

		This is the mathematical inverse operation of exp,
		i.e. `log(exp(v)) == v` always holds.

		If `v` is negative (including `NEGATIVE_INFINITY`) or `NaN`, the result
		is `NaN`.
		If `v` is `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		If `v` is `0.0`, the result is `NEGATIVE_INFINITY`.</haxe_doc>
		</log>
		<pow public="1" set="method" static="1">
			<f a="v:exp">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns a specified base `v` raised to the specified power `exp`.</haxe_doc>
		</pow>
		<sqrt public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the square root of `v`.

		If `v` is negative (including `NEGATIVE_INFINITY`) or `NaN`, the result
		is `NaN`.
		If `v` is `POSITIVE_INFINITY`, the result is `POSITIVE_INFINITY`.
		If `v` is `0.0`, the result is `0.0`.</haxe_doc>
		</sqrt>
		<round public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Rounds `v` to the nearest integer value.

		Ties are rounded up, so that `0.5` becomes `1` and `-0.5` becomes `0`.

		If `v` is outside of the signed `Int32` range, or is `NaN`, `NEGATIVE_INFINITY`
		or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</round>
		<floor public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the largest integer value that is not greater than `v`.

		If `v` is outside of the signed `Int32` range, or is `NaN`, `NEGATIVE_INFINITY`
		or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</floor>
		<ceil public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the smallest integer value that is not less than `v`.

		If `v` is outside of the signed `Int32` range, or is `NaN`, `NEGATIVE_INFINITY`
		or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</ceil>
		<random public="1" set="method" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns a pseudo-random number which is greater than or equal to 0.0,
		and less than 1.0.</haxe_doc>
		</random>
		<ffloor public="1" get="inline" set="null" line="263" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></ffloor>
		<fceil public="1" get="inline" set="null" line="267" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></fceil>
		<fround public="1" get="inline" set="null" line="271" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></fround>
		<isFinite public="1" set="method" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `f` is a finite number.

		If `f` is `POSITIVE_INFINITY`, `NEGATIVE_INFINITY` or `NaN`, the result
		is `false`, otherwise the result is `true`.</haxe_doc>
		</isFinite>
		<isNaN public="1" set="method" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `f` is not a valid number.

		If `f` is `NaN`, the result is `true`, otherwise the result is `false`.
		In particular, both `POSITIVE_INFINITY` and `NEGATIVE_INFINITY` are
		not considered `NaN`.</haxe_doc>
		</isNaN>
		<haxe_doc>This class defines mathematical functions and constants.

	@see https://haxe.org/manual/std-math.html</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="Reflect" params="" file="D:\Projects\haxe\std/Reflect.hx" extern="1">
		<hasField public="1" set="method" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if structure `o` has a field named `field`.

		This is only guaranteed to work for anonymous structures. Refer to
		`Type.getInstanceFields` for a function supporting class instances.

		If `o` or `field` are null, the result is unspecified.</haxe_doc>
		</hasField>
		<field public="1" set="method" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>Returns the value of the field named `field` on object `o`.

		If `o` is not an object or has no field named `field`, the result is
		null.

		If the field is defined as a property, its accessors are ignored. Refer
		to `Reflect.getProperty` for a function supporting property accessors.

		If `field` is null, the result is unspecified.</haxe_doc>
		</field>
		<setField public="1" set="method" static="1">
			<f a="o:field:value">
				<d/>
				<c path="String"/>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the field named `field` of object `o` to value `value`.

		If `o` has no field named `field`, this function is only guaranteed to
		work for anonymous structures.

		If `o` or `field` are null, the result is unspecified.</haxe_doc>
		</setField>
		<getProperty public="1" set="method" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>Returns the value of the field named `field` on object `o`, taking
		property getter functions into account.

		If the field is not a property, this function behaves like
		`Reflect.field`, but might be slower.

		If `o` or `field` are null, the result is unspecified.</haxe_doc>
		</getProperty>
		<setProperty public="1" set="method" static="1">
			<f a="o:field:value">
				<d/>
				<c path="String"/>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the field named `field` of object `o` to value `value`, taking
		property setter functions into account.

		If the field is not a property, this function behaves like
		`Reflect.setField`, but might be slower.

		If `field` is null, the result is unspecified.</haxe_doc>
		</setProperty>
		<callMethod public="1" set="method" static="1">
			<f a="o:func:args">
				<d/>
				<x path="haxe.Function"/>
				<c path="Array"><d/></c>
				<d/>
			</f>
			<haxe_doc>Call a method `func` with the given arguments `args`.

		The object `o` is ignored in most cases. It serves as the `this`-context in the following
		situations:

		* (neko) Allows switching the context to `o` in all cases.
		* (macro) Same as neko for Haxe 3. No context switching in Haxe 4.
		* (js, lua) Require the `o` argument if `func` does not, but should have a context.
			This can occur by accessing a function field natively, e.g. through `Reflect.field`
			or by using `(object : Dynamic).field`. However, if `func` has a context, `o` is
			ignored like on other targets.</haxe_doc>
		</callMethod>
		<fields public="1" set="method" static="1">
			<f a="o">
				<d/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns the fields of structure `o`.

		This method is only guaranteed to work on anonymous structures. Refer to
		`Type.getInstanceFields` for a function supporting class instances.

		If `o` is null, the result is unspecified.</haxe_doc>
		</fields>
		<isFunction public="1" set="method" static="1">
			<f a="f">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if `f` is a function, false otherwise.

		If `f` is null, the result is false.</haxe_doc>
		</isFunction>
		<compare public="1" params="T" set="method" static="1">
			<f a="a:b">
				<c path="compare.T"/>
				<c path="compare.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Compares `a` and `b`.

		If `a` is less than `b`, the result is negative. If `b` is less than
		`a`, the result is positive. If `a` and `b` are equal, the result is 0.

		This function is only defined if `a` and `b` are of the same type.

		If that type is a function, the result is unspecified and
		`Reflect.compareMethods` should be used instead.

		For all other types, the result is 0 if `a` and `b` are equal. If they
		are not equal, the result depends on the type and is negative if:

		- Numeric types: a is less than b
		- String: a is lexicographically less than b
		- Other: unspecified

		If `a` and `b` are null, the result is 0. If only one of them is null,
		the result is unspecified.</haxe_doc>
		</compare>
		<compareMethods public="1" set="method" static="1">
			<f a="f1:f2">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Compares the functions `f1` and `f2`.

		If `f1` or `f2` are null, the result is false.
		If `f1` or `f2` are not functions, the result is unspecified.

		Otherwise the result is true if `f1` and the `f2` are physically equal,
		false otherwise.

		If `f1` or `f2` are member method closures, the result is true if they
		are closures of the same method on the same object value, false otherwise.</haxe_doc>
		</compareMethods>
		<isObject public="1" set="method" static="1">
			<f a="v">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc><![CDATA[Tells if `v` is an object.

		The result is true if `v` is one of the following:

		- class instance
		- structure
		- `Class<T>`
		- `Enum<T>`

		Otherwise, including if `v` is null, the result is false.]]></haxe_doc>
		</isObject>
		<isEnumValue public="1" set="method" static="1">
			<f a="v">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `v` is an enum value.

		The result is true if `v` is of type EnumValue, i.e. an enum
		constructor.

		Otherwise, including if `v` is null, the result is false.</haxe_doc>
		</isEnumValue>
		<deleteField public="1" set="method" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the field named `field` from structure `o`.

		This method is only guaranteed to work on anonymous structures.

		If `o` or `field` are null, the result is unspecified.</haxe_doc>
		</deleteField>
		<copy public="1" params="T" set="method" static="1">
			<f a="o">
				<x path="Null"><c path="copy.T"/></x>
				<x path="Null"><c path="copy.T"/></x>
			</f>
			<haxe_doc>Copies the fields of structure `o`.

		This is only guaranteed to work on anonymous structures.

		If `o` is null, the result is `null`.</haxe_doc>
		</copy>
		<makeVarArgs public="1" set="method" static="1">
			<f a="f">
				<f a="">
					<c path="Array"><d/></c>
					<d/>
				</f>
				<d/>
			</f>
			<haxe_doc>Transform a function taking an array of arguments into a function that can
		be called with any number of arguments.</haxe_doc>
			<overloads><makeVarArgs public="1" set="method">
	<f a="f">
		<f a="">
			<c path="Array"><d/></c>
			<x path="Void"/>
		</f>
		<d/>
	</f>
	<haxe_doc>Transform a function taking an array of arguments into a function that can
		be called with any number of arguments.</haxe_doc>
</makeVarArgs></overloads>
		</makeVarArgs>
		<haxe_doc>The Reflect API is a way to manipulate values dynamically through an
	abstract interface in an untyped manner. Use with care.

	@see https://haxe.org/manual/std-reflection.html</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="Std" params="" file="D:\Projects\haxe\std/Std.hx" extern="1">
		<is public="1" set="method" static="1">
			<f a="v:t">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if a value `v` is of the type `t`. Returns `false` if `v` or `t` are null.

		If `t` is a class or interface with `@:generic` meta, the result is `false`.</haxe_doc>
		</is>
		<downcast public="1" params="T:S" set="method" static="1">
			<f a="value:c">
				<c path="downcast.T"/>
				<x path="Class"><c path="downcast.S"/></x>
				<c path="downcast.S"/>
			</f>
			<haxe_doc>Checks if object `value` is an instance of class or interface `c`.

		Compiles only if the type specified by `c` can be assigned to the type
		of `value`.

		This method checks if a downcast is possible. That is, if the runtime
		type of `value` is assignable to the type specified by `c`, `value` is
		returned. Otherwise null is returned.

		This method is not guaranteed to work with core types such as `String`,
		`Array` and `Date`.

		If `value` is null, the result is null. If `c` is null, the result is
		unspecified.</haxe_doc>
		</downcast>
		<instance public="1" params="T:S" set="method" static="1">
			<f a="value:c">
				<c path="instance.T"/>
				<x path="Class"><c path="instance.S"/></x>
				<c path="instance.S"/>
			</f>
			<meta><m n=":deprecated"><e>"Std.instance() is deprecated. Use Std.downcast() instead."</e></m></meta>
		</instance>
		<string public="1" set="method" static="1">
			<f a="s">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>Converts any value to a String.

		If `s` is of `String`, `Int`, `Float` or `Bool`, its value is returned.

		If `s` is an instance of a class and that class or one of its parent classes has
		a `toString` method, that method is called. If no such method is present, the result
		is unspecified.

		If `s` is an enum constructor without argument, the constructor's name is returned. If
		arguments exists, the constructor's name followed by the String representations of
		the arguments is returned.

		If `s` is a structure, the field names along with their values are returned. The field order
		and the operator separating field names and values are unspecified.

		If s is null, "null" is returned.</haxe_doc>
		</string>
		<int public="1" set="method" static="1">
			<f a="x">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Converts a `Float` to an `Int`, rounded towards 0.

		If `x` is outside of the signed Int32 range, or is `NaN`, `NEGATIVE_INFINITY` or `POSITIVE_INFINITY`, the result is unspecified.</haxe_doc>
		</int>
		<parseInt public="1" set="method" static="1">
			<f a="x">
				<c path="String"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Converts a `String` to an `Int`.

		Leading whitespaces are ignored.

		If `x` starts with 0x or 0X, hexadecimal notation is recognized where the following digits may
		contain 0-9 and A-F.

		Otherwise `x` is read as decimal number with 0-9 being allowed characters. `x` may also start with
		a - to denote a negative value.

		In decimal mode, parsing continues until an invalid character is detected, in which case the
		result up to that point is returned. For hexadecimal notation, the effect of invalid characters
		is unspecified.

		Leading 0s that are not part of the 0x/0X hexadecimal notation are ignored, which means octal
		notation is not supported.

		If `x` is null, the result is unspecified.
		If `x` cannot be parsed as integer, the result is `null`.</haxe_doc>
		</parseInt>
		<parseFloat public="1" set="method" static="1">
			<f a="x">
				<c path="String"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Converts a `String` to a `Float`.

		The parsing rules for `parseInt` apply here as well, with the exception of invalid input
		resulting in a `NaN` value instead of null.

		Additionally, decimal notation may contain a single `.` to denote the start of the fractions.</haxe_doc>
		</parseFloat>
		<random public="1" set="method" static="1">
			<f a="x">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc><![CDATA[Return a random integer between 0 included and `x` excluded.

		If `x <= 1`, the result is always 0.]]></haxe_doc>
		</random>
		<haxe_doc>The Std class provides standard methods for manipulating basic types.</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="Void" params="" file="D:\Projects\haxe\std/StdTypes.hx" module="StdTypes">
		<this><x path="Void"/></this>
		<haxe_doc>The standard `Void` type. Only `null` values can be of the type `Void`.

	@see https://haxe.org/manual/types-void.html</haxe_doc>
		<meta><m n=":coreType"/></meta>
	</abstract>
	<abstract path="Float" params="" file="D:\Projects\haxe\std/StdTypes.hx" module="StdTypes">
		<this><x path="Float"/></this>
		<haxe_doc><![CDATA[The standard `Float` type, this is a double-precision IEEE 64bit float.

	On static targets, `null` cannot be assigned to Float. If this is necessary,
	`Null<Float>` can be used instead.

	`Std.int` converts a `Float` to an `Int`, rounded towards 0.
	`Std.parseFloat` converts a `String` to a `Float`.

	@see https://haxe.org/manual/types-basic-types.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Int" params="" file="D:\Projects\haxe\std/StdTypes.hx" module="StdTypes">
		<this><x path="Int"/></this>
		<to><icast><x path="Float"/></icast></to>
		<haxe_doc><![CDATA[The standard `Int` type. Its precision depends on the platform.

	On static targets, `null` cannot be assigned to `Int`. If this is necessary,
	`Null<Int>` can be used instead.

	`Std.int` converts a `Float` to an `Int`, rounded towards 0.
	`Std.parseInt` converts a `String` to an `Int`.

	@see https://haxe.org/manual/types-basic-types.html
	@see https://haxe.org/manual/std-math-integer-math.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":valueUsed"/>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Null" params="T" file="D:\Projects\haxe\std/StdTypes.hx" module="StdTypes">
		<from><icast><c path="Null.T"/></icast></from>
		<this><x path="Null"><c path="Null.T"/></x></this>
		<to><icast><c path="Null.T"/></icast></to>
		<haxe_doc><![CDATA[`Null<T>` is a wrapper that can be used to make the basic types `Int`,
	`Float` and `Bool` nullable on static targets.

	If null safety is enabled, only types wrapped in `Null<T>` are nullable.

	Otherwise, it has no effect on non-basic-types, but it can be useful as a way to document
	that `null` is an acceptable value for a method argument, return value or variable.

	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":forward"/>
			<m n=":coreType"/>
		</meta>
	</abstract>
	<abstract path="Bool" params="" file="D:\Projects\haxe\std/StdTypes.hx" module="StdTypes">
		<this><x path="Bool"/></this>
		<haxe_doc><![CDATA[The standard Boolean type, which can either be `true` or `false`.

	On static targets, `null` cannot be assigned to `Bool`. If this is necessary,
	`Null<Bool>` can be used instead.

	@see https://haxe.org/manual/types-bool.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Dynamic" params="T" file="D:\Projects\haxe\std/StdTypes.hx" module="StdTypes">
		<this><x path="Dynamic"><c path="Dynamic.T"/></x></this>
		<haxe_doc>`Dynamic` is a special type which is compatible with all other types.

	Use of `Dynamic` should be minimized as it prevents several compiler
	checks and optimizations. See `Any` type for a safer alternative for
	representing values of any type.

	@see https://haxe.org/manual/types-dynamic.html</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<typedef path="Iterator" params="T" file="D:\Projects\haxe\std/StdTypes.hx" module="StdTypes">
		<a>
			<next set="method">
				<f a=""><c path="Iterator.T"/></f>
				<haxe_doc>Returns the current item of the `Iterator` and advances to the next one.

		This method is not required to check `hasNext()` first. A call to this
		method while `hasNext()` is `false` yields unspecified behavior.

		On the other hand, iterators should not require a call to `hasNext()`
		before the first call to `next()` if an element is available.</haxe_doc>
			</next>
			<hasNext set="method">
				<f a=""><x path="Bool"/></f>
				<haxe_doc>Returns `false` if the iteration is complete, `true` otherwise.

		Usually iteration is considered to be complete if all elements of the
		underlying data structure were handled through calls to `next()`. However,
		in custom iterators any logic may be used to determine the completion
		state.</haxe_doc>
			</hasNext>
		</a>
		<haxe_doc>An `Iterator` is a structure that permits iteration over elements of type `T`.

	Any class with matching `hasNext()` and `next()` fields is considered an `Iterator`
	and can then be used e.g. in `for`-loops. This makes it easy to implement
	custom iterators.

	@see https://haxe.org/manual/lf-iterators.html</haxe_doc>
	</typedef>
	<typedef path="Iterable" params="T" file="D:\Projects\haxe\std/StdTypes.hx" module="StdTypes">
		<a><iterator set="method"><f a=""><t path="Iterator"><c path="Iterable.T"/></t></f></iterator></a>
		<haxe_doc>An `Iterable` is a data structure which has an `iterator()` method.
	See `Lambda` for generic functions on iterable structures.

	@see https://haxe.org/manual/lf-iterators.html</haxe_doc>
	</typedef>
	<typedef path="KeyValueIterator" params="K:V" file="D:\Projects\haxe\std/StdTypes.hx" module="StdTypes">
		<t path="Iterator"><a>
	<value><c path="KeyValueIterator.V"/></value>
	<key><c path="KeyValueIterator.K"/></key>
</a></t>
		<haxe_doc>A `KeyValueIterator` is an `Iterator` that has a key and a value.</haxe_doc>
	</typedef>
	<typedef path="KeyValueIterable" params="K:V" file="D:\Projects\haxe\std/StdTypes.hx" module="StdTypes">
		<a><keyValueIterator set="method"><f a=""><t path="KeyValueIterator">
	<c path="KeyValueIterable.K"/>
	<c path="KeyValueIterable.V"/>
</t></f></keyValueIterator></a>
		<haxe_doc>A `KeyValueIterable` is a data structure which has a `keyValueIterator()`
	method to iterate over key-value-pairs.</haxe_doc>
	</typedef>
	<class path="ArrayAccess" params="T" file="D:\Projects\haxe\std/StdTypes.hx" module="StdTypes" extern="1" interface="1"><haxe_doc>`ArrayAccess` is used to indicate a class that can be accessed using brackets.
	The type parameter represents the type of the elements stored.

	This interface should be used for externs only. Haxe does not support custom
	array access on classes. However, array access can be implemented for
	abstract types.

	@see https://haxe.org/manual/types-abstract-array-access.html</haxe_doc></class>
	<class path="String" params="" file="D:\Projects\haxe\std/String.hx" extern="1">
		<fromCharCode public="1" set="method" static="1">
			<f a="code">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the String corresponding to the character code `code`.

		If `code` is negative or has another invalid value, the result is
		unspecified.</haxe_doc>
		</fromCharCode>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The number of characters in `this` String.</haxe_doc>
		</length>
		<toUpperCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of `this` String are upper case.</haxe_doc>
		</toUpperCase>
		<toLowerCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of `this` String are lower case.</haxe_doc>
		</toLowerCase>
		<charAt public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the character at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, the empty String `""`
		is returned.</haxe_doc>
		</charAt>
		<charCodeAt public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the character code at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, `null` is returned.

		To obtain the character code of a single character, `"x".code` can be
		used instead to inline the character code at compile time. Note that
		this only works on String literals of length 1.</haxe_doc>
		</charCodeAt>
		<indexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the leftmost occurrence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String starting from `startIndex` (if `startIndex` is posivite
		or 0) or `max(this.length + startIndex, 0)` (if `startIndex` is negative).

		If `startIndex` exceeds `this.length`, -1 is returned.

		Otherwise the search is performed within `this` String. In either case,
		the returned position is relative to the beginning of `this` String.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the rightmost occurrence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String from 0 to `startIndex + str.length`. Otherwise the search
		is performed within `this` String. In either case, the returned position
		is relative to the beginning of `this` String.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</lastIndexOf>
		<split public="1" set="method">
			<f a="delimiter">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Splits `this` String at each occurrence of `delimiter`.

		If `this` String is the empty String `""`, the result is not consistent
		across targets and may either be `[]` (on Js, Cpp) or `[""]`.

		If `delimiter` is the empty String `""`, `this` String is split into an
		Array of `this.length` elements, where the elements correspond to the
		characters of `this` String.

		If `delimiter` is not found within `this` String, the result is an Array
		with one element, which equals `this` String.

		If `delimiter` is null, the result is unspecified.

		Otherwise, `this` String is split into parts at each occurrence of
		`delimiter`. If `this` String starts (or ends) with `delimiter`, the
		result `Array` contains a leading (or trailing) empty String `""` element.
		Two subsequent delimiters also result in an empty String `""` element.</haxe_doc>
		</split>
		<substr public="1" set="method">
			<f a="pos:?len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns `len` characters of `this` String, starting at position `pos`.

		If `len` is omitted, all characters from position `pos` to the end of
		`this` String are included.

		If `pos` is negative, its value is calculated from the end of `this`
		String by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the calculated position + `len` exceeds `this.length`, the characters
		from that position to the end of `this` String are returned.

		If `len` is negative, the result is unspecified.</haxe_doc>
		</substr>
		<substring public="1" set="method">
			<f a="startIndex:?endIndex">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the part of `this` String from `startIndex` to but not including `endIndex`.

		If `startIndex` or `endIndex` are negative, 0 is used instead.

		If `startIndex` exceeds `endIndex`, they are swapped.

		If the (possibly swapped) `endIndex` is omitted or exceeds
		`this.length`, `this.length` is used instead.

		If the (possibly swapped) `startIndex` exceeds `this.length`, the empty
		String `""` is returned.</haxe_doc>
		</substring>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the String itself.</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="string">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a copy from a given String.</haxe_doc>
		</new>
		<haxe_doc>The basic String class.

	A Haxe String is immutable, it is not possible to modify individual
	characters. No method of this class changes the state of `this` String.

	Strings can be constructed using the String literal syntax `"string value"`.

	String can be concatenated by using the `+` operator. If an operand is not a
	String, it is passed through `Std.string()` first.

	@see https://haxe.org/manual/std-String.html</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="StringBuf" params="" file="D:\Projects\haxe\std/StringBuf.hx">
		<b><c path="String"/></b>
		<length public="1" get="null" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` StringBuf in characters.</haxe_doc>
		</length>
		<new public="1" get="inline" set="null" line="47">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new StringBuf instance.

		This may involve initialization of the internal buffer.</haxe_doc>
		</new>
		<haxe_doc>A String buffer is an efficient way to build a big string by appending small
	elements together.

	Its cross-platform implementation uses String concatenation internally, but
	StringBuf may be optimized for different targets.

	Unlike String, an instance of StringBuf is not immutable in the sense that
	it can be passed as argument to functions which modify it by appending more
	values. However, the internal buffer cannot be modified.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="StringTools" params="" file="D:\Projects\haxe\std/StringTools.hx">
		<htmlEscape public="1" set="method" line="158" static="1">
			<f a="s:?quotes">
				<c path="String"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<haxe_doc><![CDATA[Escapes HTML special characters of the string `s`.

		The following replacements are made:

		- `&` becomes `&amp`;
		- `<` becomes `&lt`;
		- `>` becomes `&gt`;

		If `quotes` is true, the following characters are also replaced:

		- `"` becomes `&quot`;
		- `'` becomes `&#039`;]]></haxe_doc>
		</htmlEscape>
		<isSpace public="1" set="method" line="288" static="1">
			<f a="s:pos">
				<c path="String"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the character in the string `s` at position `pos` is a space.

		A character is considered to be a space character if its character code
		is 9,10,11,12,13 or 32.

		If `s` is the empty String `""`, or if pos is not a valid position within
		`s`, the result is false.</haxe_doc>
		</isSpace>
		<ltrim public="1" set="method" line="306" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Removes leading space characters of `s`.

		This function internally calls `isSpace()` to decide which characters to
		remove.

		If `s` is the empty String `""` or consists only of space characters, the
		result is the empty String `""`.</haxe_doc>
		</ltrim>
		<rtrim public="1" set="method" line="331" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Removes trailing space characters of `s`.

		This function internally calls `isSpace()` to decide which characters to
		remove.

		If `s` is the empty String `""` or consists only of space characters, the
		result is the empty String `""`.</haxe_doc>
		</rtrim>
		<trim public="1" set="method" line="353" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Removes leading and trailing space characters of `s`.

		This is a convenience function for `ltrim(rtrim(s))`.</haxe_doc>
		</trim>
		<hex public="1" set="method" line="444" static="1">
			<f a="n:?digits">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Encodes `n` into a hexadecimal representation.

		If `digits` is specified, the resulting String is padded with "0" until
		its `length` equals `digits`.</haxe_doc>
		</hex>
		<haxe_doc>This class provides advanced methods on Strings. It is ideally used with
	`using StringTools` and then acts as an [extension](https://haxe.org/manual/lf-static-extension.html)
	to the `String` class.

	If the first argument to any of the methods is null, the result is
	unspecified.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="Sys" params="" file="D:\Projects\haxe\std/Sys.hx" extern="1">
		<print public="1" set="method" static="1">
			<f a="v">
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Prints any value to the standard output.</haxe_doc>
		</print>
		<println public="1" set="method" static="1">
			<f a="v">
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Prints any value to the standard output, followed by a newline.
		On Windows, this function outputs a CRLF newline.
		LF newlines are printed on all other platforms.</haxe_doc>
		</println>
		<args public="1" set="method" static="1">
			<f a=""><c path="Array"><c path="String"/></c></f>
			<haxe_doc>Returns all the arguments that were passed in the command line.
		This does not include the interpreter or the name of the program file.

		(java)(eval) On Windows, non-ASCII Unicode arguments will not work correctly.

		(cs) Non-ASCII Unicode arguments will not work correctly.</haxe_doc>
		</args>
		<getEnv public="1" set="method" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the value of the given environment variable, or `null` if it
		doesn't exist.</haxe_doc>
		</getEnv>
		<putEnv public="1" set="method" static="1">
			<f a="s:v">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the value of the given environment variable.

		(java) This functionality is not available on Java; calling this function will throw.</haxe_doc>
		</putEnv>
		<environment public="1" set="method" static="1">
			<f a=""><t path="Map">
	<c path="String"/>
	<c path="String"/>
</t></f>
			<haxe_doc>Returns all environment variables.</haxe_doc>
		</environment>
		<sleep public="1" set="method" static="1">
			<f a="seconds">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Suspends execution for the given length of time (in seconds).</haxe_doc>
		</sleep>
		<setTimeLocale public="1" set="method" static="1">
			<f a="loc">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Changes the current time locale, which will affect `DateTools.format` date formating.
		Returns `true` if the locale was successfully changed.</haxe_doc>
		</setTimeLocale>
		<getCwd public="1" set="method" static="1">
			<f a=""><c path="String"/></f>
			<haxe_doc>Gets the current working directory (usually the one in which the program was started).</haxe_doc>
		</getCwd>
		<setCwd public="1" set="method" static="1">
			<f a="s">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Changes the current working directory.

		(java) This functionality is not available on Java; calling this function will throw.</haxe_doc>
		</setCwd>
		<systemName public="1" set="method" static="1">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the type of the current system. Possible values are:
		 - `"Windows"`
		 - `"Linux"`
		 - `"BSD"`
		 - `"Mac"`</haxe_doc>
		</systemName>
		<command public="1" set="method" static="1">
			<f a="cmd:?args">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
				<x path="Int"/>
			</f>
			<haxe_doc>Runs the given command. The command output will be printed to the same output as the current process.
		The current process will block until the command terminates.
		The return value is the exit code of the command (usually `0` indicates no error).

		Command arguments can be passed in two ways:

		 1. Using `args` to pass command arguments. Each argument will be automatically quoted and shell meta-characters will be escaped if needed.
		`cmd` should be an executable name that can be located in the `PATH` environment variable, or a full path to an executable.

		 2. When `args` is not given or is `null`, command arguments can be appended to `cmd`. No automatic quoting/escaping will be performed. `cmd` should be formatted exactly as it would be when typed at the command line.
		It can run executables, as well as shell commands that are not executables (e.g. on Windows: `dir`, `cd`, `echo` etc).

		Use the `sys.io.Process` API for more complex tasks, such as background processes, or providing input to the command.</haxe_doc>
		</command>
		<exit public="1" set="method" static="1">
			<f a="code">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Exits the current process with the given exit code.

		(macro)(eval) Being invoked in a macro or eval context (e.g. with `-x` or `--run`) immediately terminates
		the compilation process, which also prevents the execution of any `--next` sections of compilation arguments.</haxe_doc>
		</exit>
		<time public="1" set="method" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Gives the most precise timestamp value available (in seconds).</haxe_doc>
		</time>
		<cpuTime public="1" set="method" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Gives the most precise timestamp value available (in seconds),
		but only accounts for the actual time spent running on the CPU for the current thread/process.</haxe_doc>
		</cpuTime>
		<executablePath public="1" set="method" static="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":deprecated"><e>"Use programPath instead"</e></m></meta>
			<haxe_doc>Returns the path to the current executable that we are running.</haxe_doc>
		</executablePath>
		<programPath public="1" set="method" static="1">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the absolute path to the current program file that we are running.
		Concretely, for an executable binary, it returns the path to the binary.
		For a script (e.g. a PHP file), it returns the path to the script.</haxe_doc>
		</programPath>
		<getChar public="1" set="method" static="1">
			<f a="echo">
				<x path="Bool"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Reads a single input character from the standard input and returns it.
		Setting `echo` to `true` will also display the character on the output.</haxe_doc>
		</getChar>
		<stdin public="1" set="method" static="1">
			<f a=""><c path="haxe.io.Input"/></f>
			<haxe_doc>Returns the standard input of the process, from which user input can be read.
		Usually it will block until the user sends a full input line.
		See `getChar` for an alternative.</haxe_doc>
		</stdin>
		<stdout public="1" set="method" static="1">
			<f a=""><c path="haxe.io.Output"/></f>
			<haxe_doc>Returns the standard output of the process, to which program output can be written.</haxe_doc>
		</stdout>
		<stderr public="1" set="method" static="1">
			<f a=""><c path="haxe.io.Output"/></f>
			<haxe_doc>Returns the standard error of the process, to which program errors can be written.</haxe_doc>
		</stderr>
		<haxe_doc>This class provides access to various base functions of system platforms.
	Look in the `sys` package for more system APIs.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":require"><e>sys</e></m>
		</meta>
	</class>
	<class path="Type" params="" file="D:\Projects\haxe\std/Type.hx" extern="1">
		<getClass public="1" params="T" set="method" static="1">
			<f a="o">
				<c path="getClass.T"/>
				<x path="Class"><c path="getClass.T"/></x>
			</f>
			<haxe_doc>Returns the class of `o`, if `o` is a class instance.

		If `o` is null or of a different type, null is returned.

		In general, type parameter information cannot be obtained at runtime.</haxe_doc>
		</getClass>
		<getEnum public="1" set="method" static="1">
			<f a="o">
				<x path="EnumValue"/>
				<x path="Enum"><d/></x>
			</f>
			<haxe_doc><![CDATA[Returns the enum of enum instance `o`.

		An enum instance is the result of using an enum constructor. Given an
		`enum Color { Red; }`, `getEnum(Red)` returns `Enum<Color>`.

		If `o` is null, null is returned.

		In general, type parameter information cannot be obtained at runtime.]]></haxe_doc>
		</getEnum>
		<getSuperClass public="1" set="method" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<x path="Class"><d/></x>
			</f>
			<haxe_doc>Returns the super-class of class `c`.

		If `c` has no super class, null is returned.

		If `c` is null, the result is unspecified.

		In general, type parameter information cannot be obtained at runtime.</haxe_doc>
		</getSuperClass>
		<getClassName public="1" set="method" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of class `c`, including its path.

		If `c` is inside a package, the package structure is returned dot-
		separated, with another dot separating the class name:
		`pack1.pack2.(...).packN.ClassName`
		If `c` is a sub-type of a Haxe module, that module is not part of the
		package structure.

		If `c` has no package, the class name is returned.

		If `c` is null, the result is unspecified.

		The class name does not include any type parameters.</haxe_doc>
		</getClassName>
		<getEnumName public="1" set="method" static="1">
			<f a="e">
				<x path="Enum"><d/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of enum `e`, including its path.

		If `e` is inside a package, the package structure is returned dot-
		separated, with another dot separating the enum name:
		`pack1.pack2.(...).packN.EnumName`
		If `e` is a sub-type of a Haxe module, that module is not part of the
		package structure.

		If `e` has no package, the enum name is returned.

		If `e` is null, the result is unspecified.

		The enum name does not include any type parameters.</haxe_doc>
		</getEnumName>
		<resolveClass public="1" set="method" static="1">
			<f a="name">
				<c path="String"/>
				<x path="Class"><d/></x>
			</f>
			<haxe_doc>Resolves a class by name.

		If `name` is the path of an existing class, that class is returned.

		Otherwise null is returned.

		If `name` is null or the path to a different type, the result is
		unspecified.

		The class name must not include any type parameters.</haxe_doc>
		</resolveClass>
		<resolveEnum public="1" set="method" static="1">
			<f a="name">
				<c path="String"/>
				<x path="Enum"><d/></x>
			</f>
			<haxe_doc>Resolves an enum by name.

		If `name` is the path of an existing enum, that enum is returned.

		Otherwise null is returned.

		If `name` is null the result is unspecified.

		If `name` is the path to a different type, null is returned.

		The enum name must not include any type parameters.</haxe_doc>
		</resolveEnum>
		<createInstance public="1" params="T" set="method" static="1">
			<f a="cl:args">
				<x path="Class"><c path="createInstance.T"/></x>
				<c path="Array"><d/></c>
				<c path="createInstance.T"/>
			</f>
			<haxe_doc>Creates an instance of class `cl`, using `args` as arguments to the
		class constructor.

		This function guarantees that the class constructor is called.

		Default values of constructors arguments are not guaranteed to be
		taken into account.

		If `cl` or `args` are null, or if the number of elements in `args` does
		not match the expected number of constructor arguments, or if any
		argument has an invalid type,  or if `cl` has no own constructor, the
		result is unspecified.

		In particular, default values of constructor arguments are not
		guaranteed to be taken into account.</haxe_doc>
		</createInstance>
		<createEmptyInstance public="1" params="T" set="method" static="1">
			<f a="cl">
				<x path="Class"><c path="createEmptyInstance.T"/></x>
				<c path="createEmptyInstance.T"/>
			</f>
			<haxe_doc>Creates an instance of class `cl`.

		This function guarantees that the class constructor is not called.

		If `cl` is null, the result is unspecified.</haxe_doc>
		</createEmptyInstance>
		<createEnum public="1" params="T" set="method" static="1">
			<f a="e:constr:?params">
				<x path="Enum"><c path="createEnum.T"/></x>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createEnum.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor `constr` with
		arguments `params`.

		If `e` or `constr` is null, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createEnum>
		<createEnumIndex public="1" params="T" set="method" static="1">
			<f a="e:index:?params">
				<x path="Enum"><c path="createEnumIndex.T"/></x>
				<x path="Int"/>
				<c path="Array"><d/></c>
				<c path="createEnumIndex.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor number
		`index` with arguments `params`.

		The constructor indices are preserved from Haxe syntax, so the first
		declared is index 0, the next index 1 etc.

		If `e` or `constr` is null, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createEnumIndex>
		<getInstanceFields public="1" set="method" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the instance fields of class `c`, including
		inherited fields.

		This only includes fields which are known at compile-time. In
		particular, using `getInstanceFields(getClass(obj))` will not include
		any fields which were added to `obj` at runtime.

		The order of the fields in the returned Array is unspecified.

		If `c` is null, the result is unspecified.</haxe_doc>
		</getInstanceFields>
		<getClassFields public="1" set="method" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of static fields of class `c`.

		This does not include static fields of parent classes.

		The order of the fields in the returned Array is unspecified.

		If `c` is null, the result is unspecified.</haxe_doc>
		</getClassFields>
		<getEnumConstructs public="1" set="method" static="1">
			<f a="e">
				<x path="Enum"><d/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the names of all constructors of enum `e`.

		The order of the constructor names in the returned Array is preserved
		from the original syntax.

		If `e` is null, the result is unspecified.</haxe_doc>
		</getEnumConstructs>
		<typeof public="1" set="method" static="1">
			<f a="v">
				<d/>
				<e path="ValueType"/>
			</f>
			<haxe_doc>Returns the runtime type of value `v`.

		The result corresponds to the type `v` has at runtime, which may vary
		per platform. Assumptions regarding this should be minimized to avoid
		surprises.</haxe_doc>
		</typeof>
		<enumEq public="1" params="T" set="method" static="1">
			<f a="a:b">
				<c path="enumEq.T"/>
				<c path="enumEq.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Recursively compares two enum instances `a` and `b` by value.

		Unlike `a == b`, this function performs a deep equality check on the
		arguments of the constructors, if exists.

		If `a` or `b` are null, the result is unspecified.</haxe_doc>
		</enumEq>
		<enumConstructor public="1" set="method" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the constructor name of enum instance `e`.

		The result String does not contain any constructor arguments.

		If `e` is null, the result is unspecified.</haxe_doc>
		</enumConstructor>
		<enumParameters public="1" set="method" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>Returns a list of the constructor arguments of enum instance `e`.

		If `e` has no arguments, the result is [].

		Otherwise the result are the values that were used as arguments to `e`,
		in the order of their declaration.

		If `e` is null, the result is unspecified.</haxe_doc>
		</enumParameters>
		<enumIndex public="1" set="method" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index of enum instance `e`.

		This corresponds to the original syntactic position of `e`. The index of
		the first declared constructor is 0, the next one is 1 etc.

		If `e` is null, the result is unspecified.</haxe_doc>
		</enumIndex>
		<allEnums public="1" params="T" set="method" static="1">
			<f a="e">
				<x path="Enum"><c path="allEnums.T"/></x>
				<c path="Array"><c path="allEnums.T"/></c>
			</f>
			<haxe_doc>Returns a list of all constructors of enum `e` that require no
		arguments.

		This may return the empty Array `[]` if all constructors of `e` require
		arguments.

		Otherwise an instance of `e` constructed through each of its non-
		argument constructors is returned, in the order of the constructor
		declaration.

		If `e` is null, the result is unspecified.</haxe_doc>
		</allEnums>
		<haxe_doc>The Haxe Reflection API allows retrieval of type information at runtime.

	This class complements the more lightweight Reflect class, with a focus on
	class and enum instances.

	@see https://haxe.org/manual/types.html
	@see https://haxe.org/manual/std-reflection.html</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<enum path="ValueType" params="" file="D:\Projects\haxe\std/Type.hx" module="Type">
		<TNull/>
		<TInt/>
		<TFloat/>
		<TBool/>
		<TObject/>
		<TFunction/>
		<TClass a="c"><x path="Class"><d/></x></TClass>
		<TEnum a="e"><x path="Enum"><d/></x></TEnum>
		<TUnknown/>
		<haxe_doc>The different possible runtime types of a value.</haxe_doc>
	</enum>
	<abstract path="UInt" params="" file="D:\Projects\haxe\std/UInt.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to>
			<icast><x path="Int"/></icast>
			<icast field="toFloat"><x path="Float"/></icast>
		</to>
		<haxe_doc>The unsigned `Int` type is only defined for Flash and C#.
	Simulate it for other platforms.

	@see https://haxe.org/manual/types-basic-types.html</haxe_doc>
		<impl><class path="_UInt.UInt_Impl_" params="" file="D:\Projects\haxe\std/UInt.hx" private="1" module="UInt"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="UnicodeString" params="" file="D:\Projects\haxe\std/UnicodeString.hx">
		<from><icast><c path="String"/></icast></from>
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<haxe_doc>This abstract provides consistent cross-target unicode support.

	@see https://haxe.org/manual/std-UnicodeString.html</haxe_doc>
		<meta>
			<m n=":forward"/>
			<m n=":access"><e>StringTools</e></m>
		</meta>
		<impl><class path="_UnicodeString.UnicodeString_Impl_" params="" file="D:\Projects\haxe\std/UnicodeString.hx" private="1" module="UnicodeString">
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
		<haxe_doc>The number of characters in `this` String.</haxe_doc>
	</length>
	<meta>
		<m n=":keep"/>
		<m n=":access"><e>StringTools</e></m>
	</meta>
</class></impl>
	</abstract>
	<abstract path="XmlType" params="" file="D:\Projects\haxe\std/Xml.hx" module="Xml">
		<this><x path="Int"/></this>
		<haxe_doc>Xml node types.

	@see https://haxe.org/manual/std-Xml.html</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="_Xml.XmlType_Impl_" params="" file="D:\Projects\haxe\std/Xml.hx" private="1" module="Xml">
	<toString public="1" set="method" line="64" static="1">
		<f a="this">
			<x path="Int"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</toString>
	<meta>
		<m n=":keep"/>
		<m n=":directlyUsed"/>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="_Xml.XmlType_Impl_" params="" file="D:\Projects\haxe\std/Xml.hx" private="1" module="Xml">
		<toString public="1" set="method" line="64" static="1">
			<f a="this">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</toString>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="Xml" params="" file="D:\Projects\haxe\std/Xml.hx">
		<Element public="1" set="null" expr="XmlType.Element" line="86" static="1">
			<x path="XmlType"/>
			<meta><m n=":value"><e>XmlType.Element</e></m></meta>
			<haxe_doc>XML element type.</haxe_doc>
		</Element>
		<PCData public="1" set="null" expr="XmlType.PCData" line="91" static="1">
			<x path="XmlType"/>
			<meta><m n=":value"><e>XmlType.PCData</e></m></meta>
			<haxe_doc>XML parsed character data type.</haxe_doc>
		</PCData>
		<CData public="1" set="null" expr="XmlType.CData" line="96" static="1">
			<x path="XmlType"/>
			<meta><m n=":value"><e>XmlType.CData</e></m></meta>
			<haxe_doc>XML character data type.</haxe_doc>
		</CData>
		<Comment public="1" set="null" expr="XmlType.Comment" line="101" static="1">
			<x path="XmlType"/>
			<meta><m n=":value"><e>XmlType.Comment</e></m></meta>
			<haxe_doc>XML comment type.</haxe_doc>
		</Comment>
		<DocType public="1" set="null" expr="XmlType.DocType" line="106" static="1">
			<x path="XmlType"/>
			<meta><m n=":value"><e>XmlType.DocType</e></m></meta>
			<haxe_doc>XML doctype element type.</haxe_doc>
		</DocType>
		<ProcessingInstruction public="1" set="null" expr="XmlType.ProcessingInstruction" line="111" static="1">
			<x path="XmlType"/>
			<meta><m n=":value"><e>XmlType.ProcessingInstruction</e></m></meta>
			<haxe_doc>XML processing instruction type.</haxe_doc>
		</ProcessingInstruction>
		<Document public="1" set="null" expr="XmlType.Document" line="116" static="1">
			<x path="XmlType"/>
			<meta><m n=":value"><e>XmlType.Document</e></m></meta>
			<haxe_doc>XML document type.</haxe_doc>
		</Document>
		<parse public="1" set="method" line="121" static="1">
			<f a="str">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Parses the String into an Xml document.</haxe_doc>
		</parse>
		<createElement public="1" set="method" line="182" static="1">
			<f a="name">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createElement>
		<createPCData public="1" set="method" line="191" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createPCData>
		<createCData public="1" set="method" line="200" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createCData>
		<createComment public="1" set="method" line="209" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createComment>
		<createDocType public="1" set="method" line="218" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createDocType>
		<createProcessingInstruction public="1" set="method" line="227" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createProcessingInstruction>
		<createDocument public="1" set="method" line="236" static="1">
			<f a=""><c path="Xml"/></f>
			<haxe_doc>Creates a node of the given type.</haxe_doc>
		</createDocument>
		<nodeType public="1" set="null">
			<x path="XmlType"/>
			<haxe_doc>Returns the type of the Xml Node. This should be used before
		accessing other functions since some might raise an exception
		if the node type is not correct.</haxe_doc>
		</nodeType>
		<nodeName public="1" get="null" set="null">
			<c path="String"/>
			<meta><m n=":isVar"/></meta>
			<haxe_doc>Returns the node name of an Element.</haxe_doc>
		</nodeName>
		<nodeValue public="1" get="null" set="null">
			<c path="String"/>
			<meta><m n=":isVar"/></meta>
			<haxe_doc>Returns the node value. Only works if the Xml node is not an Element or a Document.</haxe_doc>
		</nodeValue>
		<parent public="1" set="null">
			<c path="Xml"/>
			<haxe_doc>Returns the parent object in the Xml hierarchy.
		The parent can be `null`, an Element or a Document.</haxe_doc>
		</parent>
		<children><c path="Array"><c path="Xml"/></c></children>
		<attributeMap><t path="Map">
	<c path="String"/>
	<c path="String"/>
</t></attributeMap>
		<get public="1" set="method" line="244">
			<f a="att">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Get the given attribute of an Element node. Returns `null` if not found.
		Attributes are case-sensitive.</haxe_doc>
		</get>
		<set public="1" set="method" line="255">
			<f a="att:value">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set the given attribute value for an Element node.
		Attributes are case-sensitive.</haxe_doc>
		</set>
		<exists public="1" set="method" line="277">
			<f a="att">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the Element node has a given attribute.
		Attributes are case-sensitive.</haxe_doc>
		</exists>
		<attributes public="1" set="method" line="287">
			<f a=""><t path="Iterator"><c path="String"/></t></f>
			<haxe_doc>Returns an `Iterator` on all the attribute names.</haxe_doc>
		</attributes>
		<elementsNamed public="1" set="method" line="317">
			<f a="name">
				<c path="String"/>
				<t path="Iterator"><c path="Xml"/></t>
			</f>
			<haxe_doc>Returns an iterator of all child nodes which are Elements with the given nodeName.
		Only works if the current node is an Element or a Document.</haxe_doc>
		</elementsNamed>
		<firstElement public="1" set="method" line="337">
			<f a=""><c path="Xml"/></f>
			<haxe_doc>Returns the first child node which is an Element.</haxe_doc>
		</firstElement>
		<addChild public="1" set="method" line="353">
			<f a="x">
				<c path="Xml"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds a child node to the Document or Element.
		A child node can only be inside one given parent node, which is indicated by the `parent` property.
		If the child is already inside this Document or Element, it will be moved to the last position among the Document or Element's children.
		If the child node was previously inside a different node, it will be moved to this Document or Element.</haxe_doc>
		</addChild>
		<removeChild public="1" set="method" line="366">
			<f a="x">
				<c path="Xml"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes a child from the Document or Element.
		Returns true if the child was successfuly removed.</haxe_doc>
		</removeChild>
		<toString public="1" get="inline" set="null" line="393">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String representation of the Xml node.</haxe_doc>
		</toString>
		<new set="method" line="397"><f a="nodeType">
	<x path="XmlType"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Cross-platform Xml API.

	@see https://haxe.org/manual/std-Xml.html</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="haxe.io.Output" params="" file="D:\Projects\haxe\std/haxe/io/Output.hx">
		<bigEndian public="1" set="accessor">
			<x path="Bool"/>
			<haxe_doc>Endianness (word byte order) used when writing numbers.

		If `true`, big-endian is used, otherwise `little-endian` is used.</haxe_doc>
		</bigEndian>
		<writeByte public="1" set="method" line="46">
			<f a="c">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write one byte.</haxe_doc>
		</writeByte>
		<writeBytes public="1" set="method" line="57">
			<f a="s:pos:len">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Write `len` bytes from `s` starting by position specified by `pos`.

		Returns the actual length of written data that can differ from `len`.

		See `writeFullBytes` that tries to write the exact amount of specified bytes.</haxe_doc>
		</writeBytes>
		<flush public="1" set="method" line="85">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Flush any buffered data.</haxe_doc>
		</flush>
		<close public="1" set="method" line="92">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Close the output.

		Behaviour while writing after calling this method is unspecified.</haxe_doc>
		</close>
		<set_bigEndian set="method" line="94"><f a="b">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_bigEndian>
		<write public="1" set="method" line="103">
			<f a="s">
				<c path="haxe.io.Bytes"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write all bytes stored in `s`.</haxe_doc>
		</write>
		<writeFullBytes public="1" set="method" line="120">
			<f a="s:pos:len">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `len` bytes from `s` starting by position specified by `pos`.

		Unlike `writeBytes`, this method tries to write the exact `len` amount of bytes.</haxe_doc>
		</writeFullBytes>
		<writeFloat public="1" set="method" line="133">
			<f a="x">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 32-bit floating point number.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeFloat>
		<writeDouble public="1" set="method" line="142">
			<f a="x">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 64-bit double-precision floating point number.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeDouble>
		<writeInt8 public="1" set="method" line="156">
			<f a="x">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 8-bit signed integer.</haxe_doc>
		</writeInt8>
		<writeInt16 public="1" set="method" line="167">
			<f a="x">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 16-bit signed integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeInt16>
		<writeUInt16 public="1" set="method" line="178">
			<f a="x">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 16-bit unsigned integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeUInt16>
		<writeInt24 public="1" set="method" line="195">
			<f a="x">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 24-bit signed integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeInt24>
		<writeUInt24 public="1" set="method" line="206">
			<f a="x">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 24-bit unsigned integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeUInt24>
		<writeInt32 public="1" set="method" line="225">
			<f a="x">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `x` as 32-bit signed integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</writeInt32>
		<writeString public="1" set="method" line="278">
			<f a="s:?encoding">
				<c path="String"/>
				<e path="haxe.io.Encoding"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `s` string.</haxe_doc>
		</writeString>
		<haxe_doc>An Output is an abstract write. A specific output implementation will only
	have to override the `writeByte` and maybe the `write`, `flush` and `close`
	methods. See `File.write` and `String.write` for two ways of creating an
	Output.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="format.abc._Context.NullOutput" params="" file="format/abc/Context.hx" private="1" module="format.abc.Context">
		<extends path="haxe.io.Output"/>
		<n public="1"><x path="Int"/></n>
		<writeByte public="1" set="method" line="39" override="1"><f a="c">
	<x path="Int"/>
	<x path="Void"/>
</f></writeByte>
		<writeBytes public="1" set="method" line="43" override="1"><f a="b:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></writeBytes>
		<new public="1" set="method" line="35"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="format.abc.Context" params="" file="format/abc/Context.hx">
		<data><c path="format.abc.ABCData"/></data>
		<hstrings><t path="Map">
	<c path="String"/>
	<x path="Int"/>
</t></hstrings>
		<curClass><t path="format.abc.ClassDef"/></curClass>
		<curFunction><a>
	<ops><c path="Array"><e path="format.abc.OpCode"/></c></ops>
	<f><t path="format.abc.Function"/></f>
</a></curFunction>
		<classes><c path="Array"><t path="format.abc.Field"/></c></classes>
		<init><a>
	<ops><c path="Array"><e path="format.abc.OpCode"/></c></ops>
	<f><t path="format.abc.Function"/></f>
</a></init>
		<fieldSlot><x path="Int"/></fieldSlot>
		<registers><c path="Array"><x path="Bool"/></c></registers>
		<bytepos><c path="format.abc._Context.NullOutput"/></bytepos>
		<opw><c path="format.abc.OpWriter"/></opw>
		<emptyString public="1" set="null"><x path="format.abc.Index"><c path="String"/></x></emptyString>
		<nsPublic public="1" set="null"><x path="format.abc.Index"><e path="format.abc.Namespace"/></x></nsPublic>
		<arrayProp public="1" set="null"><x path="format.abc.Index"><e path="format.abc.Name"/></x></arrayProp>
		<int public="1" set="method" line="95"><f a="i">
	<x path="Int"/>
	<x path="format.abc.Index"><x path="Int"/></x>
</f></int>
		<uint public="1" set="method" line="99"><f a="i">
	<x path="Int"/>
	<x path="format.abc.Index"><x path="Int"/></x>
</f></uint>
		<float public="1" set="method" line="103"><f a="f">
	<x path="Float"/>
	<x path="format.abc.Index"><x path="Float"/></x>
</f></float>
		<string public="1" set="method" line="107"><f a="s">
	<c path="String"/>
	<x path="format.abc.Index"><c path="String"/></x>
</f></string>
		<namespace public="1" set="method" line="117"><f a="n">
	<e path="format.abc.Namespace"/>
	<x path="format.abc.Index"><e path="format.abc.Namespace"/></x>
</f></namespace>
		<nsset public="1" set="method" line="121"><f a="ns">
	<t path="format.abc.NamespaceSet"/>
	<x path="format.abc.Index"><t path="format.abc.NamespaceSet"/></x>
</f></nsset>
		<name public="1" set="method" line="139"><f a="n">
	<e path="format.abc.Name"/>
	<x path="format.abc.Index"><e path="format.abc.Name"/></x>
</f></name>
		<type public="1" set="method" line="143"><f a="path">
	<c path="String"/>
	<x path="Null"><x path="format.abc.Index"><e path="format.abc.Name"/></x></x>
</f></type>
		<property public="1" set="method" line="155"><f a="pname:?ns">
	<c path="String"/>
	<x path="format.abc.Index"><e path="format.abc.Namespace"/></x>
	<x path="format.abc.Index"><e path="format.abc.Name"/></x>
</f></property>
		<methodType public="1" set="method" line="163"><f a="m">
	<t path="format.abc.MethodType"/>
	<x path="format.abc.Index"><t path="format.abc.MethodType"/></x>
</f></methodType>
		<lookup params="T" set="method" line="168"><f a="arr:n">
	<c path="Array"><c path="lookup.T"/></c>
	<c path="lookup.T"/>
	<x path="format.abc.Index"><c path="lookup.T"/></x>
</f></lookup>
		<elookup params="T" set="method" line="176"><f a="arr:n">
	<c path="Array"><c path="elookup.T"/></c>
	<c path="elookup.T"/>
	<x path="format.abc.Index"><c path="elookup.T"/></x>
</f></elookup>
		<getData public="1" set="method" line="184"><f a=""><c path="format.abc.ABCData"/></f></getData>
		<beginFunction set="method" line="188"><f a="args:ret:?extra">
	<c path="Array"><x path="Null"><t path="format.abc.IName"/></x></c>
	<x path="Null"><t path="format.abc.IName"/></x>
	<t path="format.abc.MethodTypeExtra"/>
	<x path="format.abc.Index"><t path="format.abc.Function"/></x>
</f></beginFunction>
		<endFunction set="method" line="208"><f a=""><x path="Void"/></f></endFunction>
		<allocRegister public="1" set="method" line="221"><f a=""><x path="Int"/></f></allocRegister>
		<freeRegister public="1" set="method" line="232"><f a="i">
	<x path="Int"/>
	<x path="Void"/>
</f></freeRegister>
		<beginClass public="1" set="method" line="236"><f a="path">
	<c path="String"/>
	<t path="format.abc.ClassDef"/>
</f></beginClass>
		<endClass public="1" set="method" line="275"><f a=""><x path="Void"/></f></endClass>
		<beginMethod public="1" set="method" line="293"><f a="mname:targs:tret:?isStatic:?isOverride:?isFinal">
	<c path="String"/>
	<c path="Array"><x path="Null"><t path="format.abc.IName"/></x></c>
	<x path="Null"><t path="format.abc.IName"/></x>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<t path="format.abc.Function"/>
</f></beginMethod>
		<beginConstructor public="1" set="method" line="305"><f a="args">
	<c path="Array"><x path="Null"><t path="format.abc.IName"/></x></c>
	<t path="format.abc.Function"/>
</f></beginConstructor>
		<endMethod public="1" set="method" line="311"><f a=""><x path="Void"/></f></endMethod>
		<defineField public="1" set="method" line="315"><f a="fname:t:?isStatic">
	<c path="String"/>
	<x path="Null"><t path="format.abc.IName"/></x>
	<x path="Bool"/>
	<t path="format.abc.Slot"/>
</f></defineField>
		<op public="1" set="method" line="327"><f a="o">
	<e path="format.abc.OpCode"/>
	<x path="Void"/>
</f></op>
		<ops public="1" set="method" line="332"><f a="ops">
	<c path="Array"><e path="format.abc.OpCode"/></c>
	<x path="Void"/>
</f></ops>
		<backwardJump public="1" set="method" line="337"><f a=""><f a="jcond">
	<e path="format.abc.JumpStyle"/>
	<x path="Void"/>
</f></f></backwardJump>
		<jump public="1" set="method" line="346"><f a="jcond">
	<e path="format.abc.JumpStyle"/>
	<f a=""><x path="Void"/></f>
</f></jump>
		<finalize public="1" set="method" line="357"><f a=""><x path="Void"/></f></finalize>
		<new public="1" set="method" line="67"><f a=""><x path="Void"/></f></new>
	</class>
	<abstract path="format.abc.Index" params="T" file="format/abc/Data.hx" module="format.abc.Data">
		<this><x path="Int"/></this>
		<impl><class path="format.abc._Data.Index_Impl_" params="" file="format/abc/Data.hx" private="1" module="format.abc.Data">
	<_new public="1" get="inline" set="null" line="31" static="1">
		<f a="i">
			<x path="Int"/>
			<x path="format.abc.Index"><c path="format.abc.Index.T"/></x>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<asInt public="1" get="inline" set="null" line="32" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</asInt>
</class></impl>
	</abstract>
	<class path="format.abc._Data.Index_Impl_" params="" file="format/abc/Data.hx" private="1" module="format.abc.Data">
		<_new public="1" get="inline" set="null" line="31" static="1">
			<f a="i">
				<x path="Int"/>
				<x path="format.abc.Index"><c path="format.abc.Index.T"/></x>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<asInt public="1" get="inline" set="null" line="32" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</asInt>
	</class>
	<enum path="format.abc.Namespace" params="" file="format/abc/Data.hx" module="format.abc.Data">
		<NPrivate a="ns"><x path="format.abc.Index"><c path="String"/></x></NPrivate>
		<NNamespace a="ns"><x path="format.abc.Index"><c path="String"/></x></NNamespace>
		<NPublic a="ns"><x path="format.abc.Index"><c path="String"/></x></NPublic>
		<NInternal a="ns"><x path="format.abc.Index"><c path="String"/></x></NInternal>
		<NProtected a="ns"><x path="format.abc.Index"><c path="String"/></x></NProtected>
		<NExplicit a="ns"><x path="format.abc.Index"><c path="String"/></x></NExplicit>
		<NStaticProtected a="ns"><x path="format.abc.Index"><c path="String"/></x></NStaticProtected>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<typedef path="format.abc.NamespaceSet" params="" file="format/abc/Data.hx" module="format.abc.Data"><c path="Array"><x path="format.abc.Index"><e path="format.abc.Namespace"/></x></c></typedef>
	<enum path="format.abc.Name" params="" file="format/abc/Data.hx" module="format.abc.Data">
		<NName a="name:ns">
			<x path="format.abc.Index"><c path="String"/></x>
			<x path="format.abc.Index"><e path="format.abc.Namespace"/></x>
		</NName>
		<NMulti a="name:ns">
			<x path="format.abc.Index"><c path="String"/></x>
			<x path="format.abc.Index"><t path="format.abc.NamespaceSet"/></x>
		</NMulti>
		<NRuntime a="name"><x path="format.abc.Index"><c path="String"/></x></NRuntime>
		<NRuntimeLate/>
		<NMultiLate a="nset"><x path="format.abc.Index"><t path="format.abc.NamespaceSet"/></x></NMultiLate>
		<NAttrib a="n"><e path="format.abc.Name"/></NAttrib>
		<NParams a="n:params">
			<t path="format.abc.IName"/>
			<c path="Array"><t path="format.abc.IName"/></c>
		</NParams>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<typedef path="format.abc.MethodType" params="" file="format/abc/Data.hx" module="format.abc.Data"><a>
	<ret><x path="Null"><t path="format.abc.IName"/></x></ret>
	<extra><x path="Null"><t path="format.abc.MethodTypeExtra"/></x></extra>
	<args><c path="Array"><x path="Null"><t path="format.abc.IName"/></x></c></args>
</a></typedef>
	<typedef path="format.abc.MethodTypeExtra" params="" file="format/abc/Data.hx" module="format.abc.Data"><a>
	<variableArgs><x path="Bool"/></variableArgs>
	<usesDXNS><x path="Bool"/></usesDXNS>
	<unused><x path="Bool"/></unused>
	<paramNames><x path="Null"><c path="Array"><x path="Null"><x path="format.abc.Index"><c path="String"/></x></x></c></x></paramNames>
	<newBlock><x path="Bool"/></newBlock>
	<native><x path="Bool"/></native>
	<defaultParameters><x path="Null"><c path="Array"><e path="format.abc.Value"/></c></x></defaultParameters>
	<debugName><x path="Null"><x path="format.abc.Index"><c path="String"/></x></x></debugName>
	<argumentsDefined><x path="Bool"/></argumentsDefined>
</a></typedef>
	<enum path="format.abc.Value" params="" file="format/abc/Data.hx" module="format.abc.Data">
		<VNull/>
		<VBool a="b"><x path="Bool"/></VBool>
		<VString a="i"><x path="format.abc.Index"><c path="String"/></x></VString>
		<VInt a="i"><x path="format.abc.Index"><x path="Int"/></x></VInt>
		<VUInt a="i"><x path="format.abc.Index"><x path="Int"/></x></VUInt>
		<VFloat a="f"><x path="format.abc.Index"><x path="Float"/></x></VFloat>
		<VNamespace a="kind:ns">
			<x path="Int"/>
			<x path="format.abc.Index"><e path="format.abc.Namespace"/></x>
		</VNamespace>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<typedef path="format.abc.TryCatch" params="" file="format/abc/Data.hx" module="format.abc.Data"><a>
	<variable><x path="Null"><t path="format.abc.IName"/></x></variable>
	<type><x path="Null"><t path="format.abc.IName"/></x></type>
	<start><x path="Int"/></start>
	<handle><x path="Int"/></handle>
	<end><x path="Int"/></end>
</a></typedef>
	<typedef path="format.abc.Function" params="" file="format/abc/Data.hx" module="format.abc.Data"><a>
	<type><x path="format.abc.Index"><t path="format.abc.MethodType"/></x></type>
	<trys><c path="Array"><t path="format.abc.TryCatch"/></c></trys>
	<nRegs><x path="Int"/></nRegs>
	<maxStack><x path="Int"/></maxStack>
	<maxScope><x path="Int"/></maxScope>
	<locals><c path="Array"><t path="format.abc.Field"/></c></locals>
	<initScope><x path="Int"/></initScope>
	<code><c path="haxe.io.Bytes"/></code>
</a></typedef>
	<typedef path="format.abc.Field" params="" file="format/abc/Data.hx" module="format.abc.Data"><a>
	<slot><t path="format.abc.Slot"/></slot>
	<name><t path="format.abc.IName"/></name>
	<metadatas><x path="Null"><c path="Array"><x path="format.abc.Index"><t path="format.abc.Metadata"/></x></c></x></metadatas>
	<kind><e path="format.abc.FieldKind"/></kind>
</a></typedef>
	<enum path="format.abc.MethodKind" params="" file="format/abc/Data.hx" module="format.abc.Data">
		<KNormal/>
		<KGetter/>
		<KSetter/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<enum path="format.abc.FieldKind" params="" file="format/abc/Data.hx" module="format.abc.Data">
		<FVar a="?type:?value:?const">
			<t path="format.abc.IName"/>
			<e path="format.abc.Value"/>
			<x path="Bool"/>
		</FVar>
		<FMethod a="type:k:?isFinal:?isOverride">
			<x path="format.abc.Index"><t path="format.abc.MethodType"/></x>
			<e path="format.abc.MethodKind"/>
			<x path="Bool"/>
			<x path="Bool"/>
		</FMethod>
		<FClass a="c"><x path="format.abc.Index"><t path="format.abc.ClassDef"/></x></FClass>
		<FFunction a="f"><x path="format.abc.Index"><t path="format.abc.MethodType"/></x></FFunction>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<typedef path="format.abc.ClassDef" params="" file="format/abc/Data.hx" module="format.abc.Data"><a>
	<superclass><x path="Null"><t path="format.abc.IName"/></x></superclass>
	<statics><x path="format.abc.Index"><t path="format.abc.MethodType"/></x></statics>
	<staticFields><c path="Array"><t path="format.abc.Field"/></c></staticFields>
	<namespace><x path="Null"><x path="format.abc.Index"><e path="format.abc.Namespace"/></x></x></namespace>
	<name><t path="format.abc.IName"/></name>
	<isSealed><x path="Bool"/></isSealed>
	<isInterface><x path="Bool"/></isInterface>
	<isFinal><x path="Bool"/></isFinal>
	<interfaces><c path="Array"><t path="format.abc.IName"/></c></interfaces>
	<fields><c path="Array"><t path="format.abc.Field"/></c></fields>
	<constructor><x path="format.abc.Index"><t path="format.abc.MethodType"/></x></constructor>
</a></typedef>
	<typedef path="format.abc.Metadata" params="" file="format/abc/Data.hx" module="format.abc.Data"><a>
	<name><x path="format.abc.Index"><c path="String"/></x></name>
	<data><c path="Array"><a>
	<v><x path="format.abc.Index"><c path="String"/></x></v>
	<n><x path="Null"><x path="format.abc.Index"><c path="String"/></x></x></n>
</a></c></data>
</a></typedef>
	<typedef path="format.abc.Init" params="" file="format/abc/Data.hx" module="format.abc.Data"><a>
	<method><x path="format.abc.Index"><t path="format.abc.MethodType"/></x></method>
	<fields><c path="Array"><t path="format.abc.Field"/></c></fields>
</a></typedef>
	<class path="format.abc.ABCData" params="" file="format/abc/Data.hx" module="format.abc.Data">
		<ints public="1"><c path="Array"><x path="Int"/></c></ints>
		<uints public="1"><c path="Array"><x path="Int"/></c></uints>
		<floats public="1"><c path="Array"><x path="Float"/></c></floats>
		<strings public="1"><c path="Array"><c path="String"/></c></strings>
		<namespaces public="1"><c path="Array"><e path="format.abc.Namespace"/></c></namespaces>
		<nssets public="1"><c path="Array"><t path="format.abc.NamespaceSet"/></c></nssets>
		<names public="1"><c path="Array"><e path="format.abc.Name"/></c></names>
		<methodTypes public="1"><c path="Array"><t path="format.abc.MethodType"/></c></methodTypes>
		<metadatas public="1"><c path="Array"><t path="format.abc.Metadata"/></c></metadatas>
		<classes public="1"><c path="Array"><t path="format.abc.ClassDef"/></c></classes>
		<inits public="1"><c path="Array"><t path="format.abc.Init"/></c></inits>
		<functions public="1"><c path="Array"><t path="format.abc.Function"/></c></functions>
		<get public="1" params="T" get="inline" set="null" line="162"><f a="t:i">
	<c path="Array"><c path="get.T"/></c>
	<x path="format.abc.Index"><c path="get.T"/></x>
	<c path="get.T"/>
</f></get>
		<new public="1" set="method" line="166"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<typedef path="format.abc.IName" params="" file="format/abc/Data.hx" module="format.abc.Data"><x path="format.abc.Index"><e path="format.abc.Name"/></x></typedef>
	<typedef path="format.abc.Slot" params="" file="format/abc/Data.hx" module="format.abc.Data"><x path="Int"/></typedef>
	<typedef path="format.abc.Register" params="" file="format/abc/Data.hx" module="format.abc.Data"><x path="Int"/></typedef>
	<enum path="format.abc.OpCode" params="" file="format/abc/Data.hx" module="format.abc.Data">
		<OBreakPoint/>
		<ONop/>
		<OThrow/>
		<OGetSuper a="v"><t path="format.abc.IName"/></OGetSuper>
		<OSetSuper a="v"><t path="format.abc.IName"/></OSetSuper>
		<ODxNs a="v"><x path="format.abc.Index"><c path="String"/></x></ODxNs>
		<ODxNsLate/>
		<ORegKill a="r"><t path="format.abc.Register"/></ORegKill>
		<OLabel/>
		<OJump a="j:delta">
			<e path="format.abc.JumpStyle"/>
			<x path="Int"/>
		</OJump>
		<OSwitch a="def:deltas">
			<x path="Int"/>
			<c path="Array"><x path="Int"/></c>
		</OSwitch>
		<OPushWith/>
		<OPopScope/>
		<OForIn/>
		<OHasNext/>
		<ONull/>
		<OUndefined/>
		<OForEach/>
		<OSmallInt a="v"><x path="Int"/></OSmallInt>
		<OInt a="v"><x path="Int"/></OInt>
		<OTrue/>
		<OFalse/>
		<ONaN/>
		<OPop/>
		<ODup/>
		<OSwap/>
		<OString a="v"><x path="format.abc.Index"><c path="String"/></x></OString>
		<OIntRef a="v"><x path="format.abc.Index"><x path="Int"/></x></OIntRef>
		<OUIntRef a="v"><x path="format.abc.Index"><x path="Int"/></x></OUIntRef>
		<OFloat a="v"><x path="format.abc.Index"><x path="Float"/></x></OFloat>
		<OScope/>
		<ONamespace a="v"><x path="format.abc.Index"><e path="format.abc.Namespace"/></x></ONamespace>
		<ONext a="r1:r2">
			<t path="format.abc.Register"/>
			<t path="format.abc.Register"/>
		</ONext>
		<OFunction a="f"><x path="format.abc.Index"><t path="format.abc.MethodType"/></x></OFunction>
		<OCallStack a="nargs"><x path="Int"/></OCallStack>
		<OConstruct a="nargs"><x path="Int"/></OConstruct>
		<OCallMethod a="slot:nargs">
			<t path="format.abc.Slot"/>
			<x path="Int"/>
		</OCallMethod>
		<OCallStatic a="meth:nargs">
			<x path="format.abc.Index"><t path="format.abc.MethodType"/></x>
			<x path="Int"/>
		</OCallStatic>
		<OCallSuper a="name:nargs">
			<t path="format.abc.IName"/>
			<x path="Int"/>
		</OCallSuper>
		<OCallProperty a="name:nargs">
			<t path="format.abc.IName"/>
			<x path="Int"/>
		</OCallProperty>
		<ORetVoid/>
		<ORet/>
		<OConstructSuper a="nargs"><x path="Int"/></OConstructSuper>
		<OConstructProperty a="name:nargs">
			<t path="format.abc.IName"/>
			<x path="Int"/>
		</OConstructProperty>
		<OCallPropLex a="name:nargs">
			<t path="format.abc.IName"/>
			<x path="Int"/>
		</OCallPropLex>
		<OCallSuperVoid a="name:nargs">
			<t path="format.abc.IName"/>
			<x path="Int"/>
		</OCallSuperVoid>
		<OCallPropVoid a="name:nargs">
			<t path="format.abc.IName"/>
			<x path="Int"/>
		</OCallPropVoid>
		<OApplyType a="nargs"><x path="Int"/></OApplyType>
		<OObject a="nfields"><x path="Int"/></OObject>
		<OArray a="nvalues"><x path="Int"/></OArray>
		<ONewBlock/>
		<OClassDef a="c"><x path="format.abc.Index"><t path="format.abc.ClassDef"/></x></OClassDef>
		<OGetDescendants a="c"><t path="format.abc.IName"/></OGetDescendants>
		<OCatch a="c"><x path="Int"/></OCatch>
		<OFindPropStrict a="p"><t path="format.abc.IName"/></OFindPropStrict>
		<OFindProp a="p"><t path="format.abc.IName"/></OFindProp>
		<OFindDefinition a="d"><t path="format.abc.IName"/></OFindDefinition>
		<OGetLex a="p"><t path="format.abc.IName"/></OGetLex>
		<OSetProp a="p"><t path="format.abc.IName"/></OSetProp>
		<OReg a="r"><t path="format.abc.Register"/></OReg>
		<OSetReg a="r"><t path="format.abc.Register"/></OSetReg>
		<OGetGlobalScope/>
		<OGetScope a="n"><x path="Int"/></OGetScope>
		<OGetProp a="p"><t path="format.abc.IName"/></OGetProp>
		<OInitProp a="p"><t path="format.abc.IName"/></OInitProp>
		<ODeleteProp a="p"><t path="format.abc.IName"/></ODeleteProp>
		<OGetSlot a="s"><t path="format.abc.Slot"/></OGetSlot>
		<OSetSlot a="s"><t path="format.abc.Slot"/></OSetSlot>
		<OToString/>
		<OToXml/>
		<OToXmlAttr/>
		<OToInt/>
		<OToUInt/>
		<OToNumber/>
		<OToBool/>
		<OToObject/>
		<OCheckIsXml/>
		<OCast a="t"><t path="format.abc.IName"/></OCast>
		<OAsAny/>
		<OAsString/>
		<OAsType a="t"><t path="format.abc.IName"/></OAsType>
		<OAsObject/>
		<OIncrReg a="r"><t path="format.abc.Register"/></OIncrReg>
		<ODecrReg a="r"><t path="format.abc.Register"/></ODecrReg>
		<OTypeof/>
		<OInstanceOf/>
		<OIsType a="t"><t path="format.abc.IName"/></OIsType>
		<OIncrIReg a="r"><t path="format.abc.Register"/></OIncrIReg>
		<ODecrIReg a="r"><t path="format.abc.Register"/></ODecrIReg>
		<OThis/>
		<OSetThis/>
		<ODebugReg a="name:r:line">
			<x path="format.abc.Index"><c path="String"/></x>
			<t path="format.abc.Register"/>
			<x path="Int"/>
		</ODebugReg>
		<ODebugLine a="line"><x path="Int"/></ODebugLine>
		<ODebugFile a="file"><x path="format.abc.Index"><c path="String"/></x></ODebugFile>
		<OBreakPointLine a="n"><x path="Int"/></OBreakPointLine>
		<OTimestamp/>
		<OOp a="op"><e path="format.abc.Operation"/></OOp>
		<OUnknown a="byte"><x path="Int"/></OUnknown>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<enum path="format.abc.JumpStyle" params="" file="format/abc/Data.hx" module="format.abc.Data">
		<JNotLt/>
		<JNotLte/>
		<JNotGt/>
		<JNotGte/>
		<JAlways/>
		<JTrue/>
		<JFalse/>
		<JEq/>
		<JNeq/>
		<JLt/>
		<JLte/>
		<JGt/>
		<JGte/>
		<JPhysEq/>
		<JPhysNeq/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<enum path="format.abc.Operation" params="" file="format/abc/Data.hx" module="format.abc.Data">
		<OpAs/>
		<OpNeg/>
		<OpIncr/>
		<OpDecr/>
		<OpNot/>
		<OpBitNot/>
		<OpAdd/>
		<OpSub/>
		<OpMul/>
		<OpDiv/>
		<OpMod/>
		<OpShl/>
		<OpShr/>
		<OpUShr/>
		<OpAnd/>
		<OpOr/>
		<OpXor/>
		<OpEq/>
		<OpPhysEq/>
		<OpLt/>
		<OpLte/>
		<OpGt/>
		<OpGte/>
		<OpIs/>
		<OpIn/>
		<OpIIncr/>
		<OpIDecr/>
		<OpINeg/>
		<OpIAdd/>
		<OpISub/>
		<OpIMul/>
		<OpMemGet8/>
		<OpMemGet16/>
		<OpMemGet32/>
		<OpMemGetFloat/>
		<OpMemGetDouble/>
		<OpMemSet8/>
		<OpMemSet16/>
		<OpMemSet32/>
		<OpMemSetFloat/>
		<OpMemSetDouble/>
		<OpSign1/>
		<OpSign8/>
		<OpSign16/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<class path="format.abc.OpReader" params="" file="format/abc/OpReader.hx">
		<decode public="1" set="method" line="478" static="1"><f a="i">
	<c path="haxe.io.Input"/>
	<c path="Array"><e path="format.abc.OpCode"/></c>
</f></decode>
		<i public="1"><c path="haxe.io.Input"/></i>
		<readInt public="1" set="method" line="42"><f a=""><x path="Int"/></f></readInt>
		<readIndex params="T" get="inline" set="null" line="65"><f a=""><x path="format.abc.Index"><c path="readIndex.T"/></x></f></readIndex>
		<readInt32 public="1" set="method" line="70"><f a=""><x path="Int"/></f></readInt32>
		<reg get="inline" set="null" line="117"><f a=""><x path="Int"/></f></reg>
		<jmp get="inline" set="null" line="121"><f a="j">
	<e path="format.abc.JumpStyle"/>
	<e path="format.abc.OpCode"/>
</f></jmp>
		<readOp public="1" set="method" line="125"><f a="op">
	<x path="Int"/>
	<e path="format.abc.OpCode"/>
</f></readOp>
		<new public="1" set="method" line="38"><f a="i">
	<c path="haxe.io.Input"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="format.abc.OpWriter" params="" file="format/abc/OpWriter.hx">
		<o public="1"><c path="haxe.io.Output"/></o>
		<writeInt public="1" set="method" line="39"><f a="n">
	<x path="Int"/>
	<x path="Void"/>
</f></writeInt>
		<writeInt32 public="1" set="method" line="65"><f a="n">
	<x path="Int"/>
	<x path="Void"/>
</f></writeInt32>
		<int set="method" line="117"><f a="i">
	<x path="Int"/>
	<x path="Void"/>
</f></int>
		<b get="inline" set="null" line="121"><f a="v">
	<x path="Int"/>
	<x path="Void"/>
</f></b>
		<reg set="method" line="125"><f a="v">
	<x path="Int"/>
	<x path="Void"/>
</f></reg>
		<idx set="method" line="129"><f a="i">
	<x path="format.abc.Index"><d/></x>
	<x path="Void"/>
</f></idx>
		<jumpCode set="method" line="133"><f a="j">
	<e path="format.abc.JumpStyle"/>
	<x path="Int"/>
</f></jumpCode>
		<operationCode set="method" line="153"><f a="o">
	<e path="format.abc.Operation"/>
	<x path="Int"/>
</f></operationCode>
		<write public="1" set="method" line="202"><f a="op">
	<e path="format.abc.OpCode"/>
	<x path="Void"/>
</f></write>
		<new public="1" set="method" line="35"><f a="o">
	<c path="haxe.io.Output"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="format.abc.Reader" params="" file="format/abc/Reader.hx">
		<i><c path="haxe.io.Input"/></i>
		<opr><c path="format.abc.OpReader"/></opr>
		<readInt get="inline" set="null" line="41"><f a=""><x path="Int"/></f></readInt>
		<readIndex params="T" get="inline" set="null" line="45"><f a=""><x path="format.abc.Index"><c path="readIndex.T"/></x></f></readIndex>
		<readIndexOpt params="T" set="method" line="49"><f a=""><x path="Null"><x path="format.abc.Index"><c path="readIndexOpt.T"/></x></x></f></readIndexOpt>
		<readList params="T" set="method" line="54"><f a="f">
	<f a=""><c path="readList.T"/></f>
	<c path="Array"><c path="readList.T"/></c>
</f></readList>
		<readList2 params="T" set="method" line="64"><f a="f">
	<f a=""><c path="readList2.T"/></f>
	<c path="Array"><c path="readList2.T"/></c>
</f></readList2>
		<readString set="method" line="72"><f a=""><c path="String"/></f></readString>
		<readNamespace set="method" line="76"><f a=""><e path="format.abc.Namespace"/></f></readNamespace>
		<readNsSet set="method" line="91"><f a=""><t path="format.abc.NamespaceSet"/></f></readNsSet>
		<readName set="method" line="98">
			<f a="?k" v="-1">
				<x path="Int"/>
				<e path="format.abc.Name"/>
			</f>
			<meta><m n=":value"><e>{ k : -1 }</e></m></meta>
		</readName>
		<readValue set="method" line="134"><f a="extra">
	<x path="Bool"/>
	<e path="format.abc.Value"/>
</f></readValue>
		<readMethodType set="method" line="154"><f a=""><t path="format.abc.MethodType"/></f></readMethodType>
		<readMetadata set="method" line="193"><f a=""><a>
	<name><x path="format.abc.Index"><c path="String"/></x></name>
	<data><c path="Array"><a>
	<v><x path="format.abc.Index"><c path="String"/></x></v>
	<n><x path="Null"><x path="format.abc.Index"><c path="String"/></x></x></n>
</a></c></data>
</a></f></readMetadata>
		<readField set="method" line="205"><f a=""><t path="format.abc.Field"/></f></readField>
		<readClass set="method" line="245"><f a=""><t path="format.abc.ClassDef"/></f></readClass>
		<readInit set="method" line="269"><f a=""><t path="format.abc.Init"/></f></readInit>
		<readTryCatch set="method" line="276"><f a=""><t path="format.abc.TryCatch"/></f></readTryCatch>
		<readFunction set="method" line="286"><f a=""><t path="format.abc.Function"/></f></readFunction>
		<read public="1" set="method" line="308"><f a=""><c path="format.abc.ABCData"/></f></read>
		<new public="1" set="method" line="36"><f a="i">
	<c path="haxe.io.Input"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="format.abc.Writer" params="" file="format/abc/Writer.hx">
		<o><c path="haxe.io.Output"/></o>
		<opw><c path="format.abc.OpWriter"/></opw>
		<beginTag set="method" line="41"><f a="id:len">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></beginTag>
		<writeInt get="inline" set="null" line="53"><f a="n">
	<x path="Int"/>
	<x path="Void"/>
</f></writeInt>
		<writeUInt get="inline" set="null" line="57"><f a="n">
	<x path="Int"/>
	<x path="Void"/>
</f></writeUInt>
		<writeList params="T" set="method" line="61"><f a="a:write">
	<c path="Array"><c path="writeList.T"/></c>
	<f a="">
		<c path="writeList.T"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></writeList>
		<writeList2 params="T" set="method" line="71"><f a="a:write">
	<c path="Array"><c path="writeList2.T"/></c>
	<f a="">
		<c path="writeList2.T"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></writeList2>
		<writeString set="method" line="77"><f a="s">
	<c path="String"/>
	<x path="Void"/>
</f></writeString>
		<writeIndex set="method" line="82"><f a="i">
	<x path="Null"><x path="format.abc.Index"><d/></x></x>
	<x path="Void"/>
</f></writeIndex>
		<writeIndexOpt set="method" line="90"><f a="i">
	<x path="Null"><x path="format.abc.Index"><d/></x></x>
	<x path="Void"/>
</f></writeIndexOpt>
		<writeNamespace set="method" line="98"><f a="n">
	<e path="format.abc.Namespace"/>
	<x path="Void"/>
</f></writeNamespace>
		<writeNsSet set="method" line="124"><f a="n">
	<t path="format.abc.NamespaceSet"/>
	<x path="Void"/>
</f></writeNsSet>
		<writeNameByte get="inline" set="null" line="130"><f a="k:n">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></writeNameByte>
		<writeName set="method" line="134">
			<f a="?k:n" v="-1:">
				<x path="Int"/>
				<e path="format.abc.Name"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ k : -1 }</e></m></meta>
		</writeName>
		<writeValue set="method" line="170"><f a="extra:v">
	<x path="Bool"/>
	<e path="format.abc.Value"/>
	<x path="Void"/>
</f></writeValue>
		<writeField set="method" line="202"><f a="f">
	<t path="format.abc.Field"/>
	<x path="Void"/>
</f></writeField>
		<writeMethodType set="method" line="236"><f a="m">
	<t path="format.abc.MethodType"/>
	<x path="Void"/>
</f></writeMethodType>
		<writeMetadata set="method" line="270"><f a="m">
	<t path="format.abc.Metadata"/>
	<x path="Void"/>
</f></writeMetadata>
		<writeClass set="method" line="279"><f a="c">
	<t path="format.abc.ClassDef"/>
	<x path="Void"/>
</f></writeClass>
		<writeInit set="method" line="295"><f a="i">
	<t path="format.abc.Init"/>
	<x path="Void"/>
</f></writeInit>
		<writeTryCatch set="method" line="300"><f a="t">
	<t path="format.abc.TryCatch"/>
	<x path="Void"/>
</f></writeTryCatch>
		<writeFunction set="method" line="308"><f a="f">
	<t path="format.abc.Function"/>
	<x path="Void"/>
</f></writeFunction>
		<write public="1" set="method" line="320"><f a="d">
	<c path="format.abc.ABCData"/>
	<x path="Void"/>
</f></write>
		<new public="1" set="method" line="36"><f a="o">
	<c path="haxe.io.Output"/>
	<x path="Void"/>
</f></new>
	</class>
	<enum path="format.agal.Opcode" params="" file="format/agal/Data.hx" module="format.agal.Data">
		<OMov a="dst:v">
			<c path="format.agal.Reg"/>
			<c path="format.agal.Reg"/>
		</OMov>
		<OAdd a="dst:a:b">
			<c path="format.agal.Reg"/>
			<c path="format.agal.Reg"/>
			<c path="format.agal.Reg"/>
		</OAdd>
		<OSub a="dst:a:b">
			<c path="format.agal.Reg"/>
			<c path="format.agal.Reg"/>
			<c path="format.agal.Reg"/>
		</OSub>
		<OMul a="dst:a:b">
			<c path="format.agal.Reg"/>
			<c path="format.agal.Reg"/>
			<c path="format.agal.Reg"/>
		</OMul>
		<ODiv a="dst:a:b">
			<c path="format.agal.Reg"/>
			<c path="format.agal.Reg"/>
			<c path="format.agal.Reg"/>
		</ODiv>
		<ORcp a="dst:v">
			<c path="format.agal.Reg"/>
			<c path="format.agal.Reg"/>
		</ORcp>
		<OMin a="dst:a:b">
			<c path="format.agal.Reg"/>
			<c path="format.agal.Reg"/>
			<c path="format.agal.Reg"/>
		</OMin>
		<OMax a="dst:a:b">
			<c path="format.agal.Reg"/>
			<c path="format.agal.Reg"/>
			<c path="format.agal.Reg"/>
		</OMax>
		<OFrc a="dst:v">
			<c path="format.agal.Reg"/>
			<c path="format.agal.Reg"/>
		</OFrc>
		<OSqt a="dst:v">
			<c path="format.agal.Reg"/>
			<c path="format.agal.Reg"/>
		</OSqt>
		<ORsq a="dst:v">
			<c path="format.agal.Reg"/>
			<c path="format.agal.Reg"/>
		</ORsq>
		<OPow a="dst:a:b">
			<c path="format.agal.Reg"/>
			<c path="format.agal.Reg"/>
			<c path="format.agal.Reg"/>
		</OPow>
		<OLog a="dst:v">
			<c path="format.agal.Reg"/>
			<c path="format.agal.Reg"/>
		</OLog>
		<OExp a="dst:v">
			<c path="format.agal.Reg"/>
			<c path="format.agal.Reg"/>
		</OExp>
		<ONrm a="dst:v">
			<c path="format.agal.Reg"/>
			<c path="format.agal.Reg"/>
		</ONrm>
		<OSin a="dst:v">
			<c path="format.agal.Reg"/>
			<c path="format.agal.Reg"/>
		</OSin>
		<OCos a="dst:v">
			<c path="format.agal.Reg"/>
			<c path="format.agal.Reg"/>
		</OCos>
		<OCrs a="dst:a:b">
			<c path="format.agal.Reg"/>
			<c path="format.agal.Reg"/>
			<c path="format.agal.Reg"/>
		</OCrs>
		<ODp3 a="dst:a:b">
			<c path="format.agal.Reg"/>
			<c path="format.agal.Reg"/>
			<c path="format.agal.Reg"/>
		</ODp3>
		<ODp4 a="dst:a:b">
			<c path="format.agal.Reg"/>
			<c path="format.agal.Reg"/>
			<c path="format.agal.Reg"/>
		</ODp4>
		<OAbs a="dst:v">
			<c path="format.agal.Reg"/>
			<c path="format.agal.Reg"/>
		</OAbs>
		<ONeg a="dst:v">
			<c path="format.agal.Reg"/>
			<c path="format.agal.Reg"/>
		</ONeg>
		<OSat a="dst:v">
			<c path="format.agal.Reg"/>
			<c path="format.agal.Reg"/>
		</OSat>
		<OM33 a="dst:a:b">
			<c path="format.agal.Reg"/>
			<c path="format.agal.Reg"/>
			<c path="format.agal.Reg"/>
		</OM33>
		<OM44 a="dst:a:b">
			<c path="format.agal.Reg"/>
			<c path="format.agal.Reg"/>
			<c path="format.agal.Reg"/>
		</OM44>
		<OM34 a="dst:a:b">
			<c path="format.agal.Reg"/>
			<c path="format.agal.Reg"/>
			<c path="format.agal.Reg"/>
		</OM34>
		<ODdx a="dst:v">
			<c path="format.agal.Reg"/>
			<c path="format.agal.Reg"/>
		</ODdx>
		<ODdy a="dst:v">
			<c path="format.agal.Reg"/>
			<c path="format.agal.Reg"/>
		</ODdy>
		<OIfe a="a:b">
			<c path="format.agal.Reg"/>
			<c path="format.agal.Reg"/>
		</OIfe>
		<OIne a="a:b">
			<c path="format.agal.Reg"/>
			<c path="format.agal.Reg"/>
		</OIne>
		<OIfg a="a:b">
			<c path="format.agal.Reg"/>
			<c path="format.agal.Reg"/>
		</OIfg>
		<OIfl a="a:b">
			<c path="format.agal.Reg"/>
			<c path="format.agal.Reg"/>
		</OIfl>
		<OEls/>
		<OEif/>
		<OUnused/>
		<OKil a="v"><c path="format.agal.Reg"/></OKil>
		<OTex a="dst:pt:tex">
			<c path="format.agal.Reg"/>
			<c path="format.agal.Reg"/>
			<t path="format.agal.Tex"/>
		</OTex>
		<OSge a="dst:a:b">
			<c path="format.agal.Reg"/>
			<c path="format.agal.Reg"/>
			<c path="format.agal.Reg"/>
		</OSge>
		<OSlt a="dst:a:b">
			<c path="format.agal.Reg"/>
			<c path="format.agal.Reg"/>
			<c path="format.agal.Reg"/>
		</OSlt>
		<OSgn a="dst:v">
			<c path="format.agal.Reg"/>
			<c path="format.agal.Reg"/>
		</OSgn>
		<OSeq a="dst:a:b">
			<c path="format.agal.Reg"/>
			<c path="format.agal.Reg"/>
			<c path="format.agal.Reg"/>
		</OSeq>
		<OSne a="dst:a:b">
			<c path="format.agal.Reg"/>
			<c path="format.agal.Reg"/>
			<c path="format.agal.Reg"/>
		</OSne>
	</enum>
	<class path="format.agal.RegAccess" params="" file="format/agal/Data.hx" module="format.agal.Data">
		<t public="1"><e path="format.agal.RegType"/></t>
		<comp public="1"><x path="format.agal.C"/></comp>
		<offset public="1"><x path="Int"/></offset>
		<clone public="1" get="inline" set="null" line="87"><f a=""><c path="format.agal.RegAccess"/></f></clone>
		<toString public="1" set="method" line="91"><f a=""><c path="String"/></f></toString>
		<new public="1" get="inline" set="null" line="81"><f a="t:c:o">
	<e path="format.agal.RegType"/>
	<x path="format.agal.C"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="format.agal.Reg" params="" file="format/agal/Data.hx" module="format.agal.Data">
		<t public="1"><e path="format.agal.RegType"/></t>
		<index public="1"><x path="Int"/></index>
		<swiz public="1"><t path="format.agal.Swizzle"/></swiz>
		<access public="1"><x path="Null"><c path="format.agal.RegAccess"/></x></access>
		<clone public="1" get="inline" set="null" line="109"><f a=""><c path="format.agal.Reg"/></f></clone>
		<toString public="1" set="method" line="113"><f a=""><c path="String"/></f></toString>
		<new public="1" get="inline" set="null" line="102"><f a="t:i:s:?a">
	<e path="format.agal.RegType"/>
	<x path="Int"/>
	<t path="format.agal.Swizzle"/>
	<c path="format.agal.RegAccess"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<typedef path="format.agal.Swizzle" params="" file="format/agal/Data.hx" module="format.agal.Data"><x path="Null"><c path="Array"><x path="format.agal.C"/></c></x></typedef>
	<abstract path="format.agal.C" params="" file="format/agal/Data.hx" module="format.agal.Data">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="format.agal._Data.C_Impl_" params="" file="format/agal/Data.hx" private="1" module="format.agal.Data">
	<X public="1" get="inline" set="null" expr="cast 0" line="123" static="1">
		<x path="format.agal.C"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</X>
	<Y public="1" get="inline" set="null" expr="cast 1" line="124" static="1">
		<x path="format.agal.C"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Y>
	<Z public="1" get="inline" set="null" expr="cast 2" line="125" static="1">
		<x path="format.agal.C"/>
		<meta>
			<m n=":value"><e>cast 2</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Z>
	<W public="1" get="inline" set="null" expr="cast 3" line="126" static="1">
		<x path="format.agal.C"/>
		<meta>
			<m n=":value"><e>cast 3</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</W>
	<ofInt public="1" get="inline" set="null" line="127" static="1"><f a="i">
	<x path="Int"/>
	<x path="format.agal.C"/>
</f></ofInt>
	<getIndex public="1" get="inline" set="null" line="128" static="1">
		<f a="this">
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getIndex>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="format.agal._Data.C_Impl_" params="" file="format/agal/Data.hx" private="1" module="format.agal.Data">
		<X public="1" get="inline" set="null" expr="cast 0" line="123" static="1">
			<x path="format.agal.C"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</X>
		<Y public="1" get="inline" set="null" expr="cast 1" line="124" static="1">
			<x path="format.agal.C"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Y>
		<Z public="1" get="inline" set="null" expr="cast 2" line="125" static="1">
			<x path="format.agal.C"/>
			<meta>
				<m n=":value"><e>cast 2</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Z>
		<W public="1" get="inline" set="null" expr="cast 3" line="126" static="1">
			<x path="format.agal.C"/>
			<meta>
				<m n=":value"><e>cast 3</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</W>
		<ofInt public="1" get="inline" set="null" line="127" static="1"><f a="i">
	<x path="Int"/>
	<x path="format.agal.C"/>
</f></ofInt>
		<getIndex public="1" get="inline" set="null" line="128" static="1">
			<f a="this">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getIndex>
		<meta><m n=":enum"/></meta>
	</class>
	<enum path="format.agal.RegType" params="" file="format/agal/Data.hx" module="format.agal.Data">
		<RAttr/>
		<RConst/>
		<RTemp/>
		<ROut/>
		<RVar/>
		<RTexture/>
		<RDepth/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<typedef path="format.agal.Tex" params="" file="format/agal/Data.hx" module="format.agal.Data"><a>
	<index><x path="Int"/></index>
	<flags><x path="Null"><c path="Array"><e path="format.agal.TexFlag"/></c></x></flags>
</a></typedef>
	<enum path="format.agal.TexFlag" params="" file="format/agal/Data.hx" module="format.agal.Data">
		<T2D/>
		<TCube/>
		<T3D/>
		<TMipMapDisable/>
		<TMipMapNearest/>
		<TMipMapLinear/>
		<TWrap/>
		<TClamp/>
		<TClampURepeatV/>
		<TRepeatUClampV/>
		<TFilterNearest/>
		<TFilterLinear/>
		<TFilterAnisotropic2x/>
		<TFilterAnisotropic4x/>
		<TFilterAnisotropic8x/>
		<TFilterAnisotropic16x/>
		<TRgba/>
		<TDxt1/>
		<TDxt5/>
		<TVideo/>
		<TCentroid/>
		<TSingle/>
		<TIgnoreSampler/>
		<TLodBias a="v"><x path="Float"/></TLodBias>
	</enum>
	<typedef path="format.agal.Data" params="" file="format/agal/Data.hx"><a>
	<version>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
	</version>
	<fragmentShader><x path="Bool"/></fragmentShader>
	<code><c path="Array"><e path="format.agal.Opcode"/></c></code>
</a></typedef>
	<class path="format.agal.Tools" params="" file="format/agal/Tools.hx">
		<NB_MAX_TEMP public="1" expr="8" line="31" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>8</e></m></meta>
		</NB_MAX_TEMP>
		<getMaxTextures public="1" set="method" line="33" static="1"><f a=""><x path="Int"/></f></getMaxTextures>
		<getMaxOps public="1" set="method" line="37" static="1">
			<f a="fragment:?version" v=":1">
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ version : 1 }</e></m></meta>
		</getMaxOps>
		<getProps public="1" set="method" line="41" static="1">
			<f a="r:fragment:?version" v="::1">
				<e path="format.agal.RegType"/>
				<x path="Bool"/>
				<x path="Int"/>
				<a>
					<write><x path="Bool"/></write>
					<read><x path="Bool"/></read>
					<count><x path="Int"/></count>
				</a>
			</f>
			<meta><m n=":value"><e>{ version : 1 }</e></m></meta>
		</getProps>
		<ofString public="1" set="method" line="53" static="1"><f a="str">
	<c path="String"/>
	<c path="haxe.io.Bytes"/>
</f></ofString>
		<regStr public="1" set="method" line="62" static="1"><f a="r">
	<c path="format.agal.Reg"/>
	<c path="String"/>
</f></regStr>
		<opStr public="1" set="method" line="83" static="1"><f a="op">
	<e path="format.agal.Opcode"/>
	<c path="String"/>
</f></opStr>
		<toString public="1" set="method" line="99" static="1"><f a="d">
	<t path="format.agal.Data"/>
	<c path="String"/>
</f></toString>
	</class>
	<class path="format.agal.Writer" params="" file="format/agal/Writer.hx">
		<o><c path="haxe.io.Output"/></o>
		<writeInt get="inline" set="null" line="39"><f a="v">
	<x path="Int"/>
	<x path="Void"/>
</f></writeInt>
		<write public="1" set="method" line="47"><f a="data">
	<t path="format.agal.Data"/>
	<x path="Void"/>
</f></write>
		<regType get="inline" set="null" line="82"><f a="r">
	<e path="format.agal.RegType"/>
	<x path="Int"/>
</f></regType>
		<maskBits set="method" line="86"><f a="m">
	<t path="format.agal.Swizzle"/>
	<x path="Int"/>
</f></maskBits>
		<swizzleBits set="method" line="94"><f a="s">
	<t path="format.agal.Swizzle"/>
	<x path="Int"/>
</f></swizzleBits>
		<texFlagsBits set="method" line="112"><f a="a">
	<c path="Array"><e path="format.agal.TexFlag"/></c>
	<a>
		<flags><x path="Int"/></flags>
		<bias><x path="Int"/></bias>
	</a>
</f></texFlagsBits>
		<writeSrc set="method" line="149"><f a="s">
	<c path="format.agal.Reg"/>
	<x path="Void"/>
</f></writeSrc>
		<writeTex set="method" line="172"><f a="t">
	<t path="format.agal.Tex"/>
	<x path="Void"/>
</f></writeTex>
		<new public="1" set="method" line="34"><f a="o">
	<c path="haxe.io.Output"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="format.amf.Reader" params="" file="format/amf/Reader.hx">
		<i><c path="haxe.io.Input"/></i>
		<readObject set="method" line="39"><f a=""><t path="Map">
	<c path="String"/>
	<e path="format.amf.Value"/>
</t></f></readObject>
		<readArray set="method" line="53"><f a="n">
	<x path="Int"/>
	<c path="Array"><e path="format.amf.Value"/></c>
</f></readArray>
		<readInt get="inline" set="null" line="60"><f a=""><x path="Int"/></f></readInt>
		<readWithCode public="1" set="method" line="68"><f a="id">
	<x path="Int"/>
	<e path="format.amf.Value"/>
</f></readWithCode>
		<read public="1" set="method" line="106"><f a=""><e path="format.amf.Value"/></f></read>
		<new public="1" set="method" line="34"><f a="i">
	<c path="haxe.io.Input"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="format.amf.Tools" params="" file="format/amf/Tools.hx">
		<encode public="1" set="method" line="32" static="1"><f a="o">
	<d/>
	<e path="format.amf.Value"/>
</f></encode>
		<number public="1" set="method" line="67" static="1"><f a="a">
	<e path="format.amf.Value"/>
	<x path="Null"><x path="Float"/></x>
</f></number>
		<string public="1" set="method" line="75" static="1"><f a="a">
	<e path="format.amf.Value"/>
	<x path="Null"><c path="String"/></x>
</f></string>
		<object public="1" set="method" line="83" static="1"><f a="a">
	<e path="format.amf.Value"/>
	<x path="Null"><t path="Map">
	<c path="String"/>
	<e path="format.amf.Value"/>
</t></x>
</f></object>
		<abool public="1" set="method" line="91" static="1"><f a="a">
	<e path="format.amf.Value"/>
	<x path="Null"><x path="Bool"/></x>
</f></abool>
		<array public="1" set="method" line="99" static="1"><f a="a">
	<e path="format.amf.Value"/>
	<x path="Null"><c path="Array"><e path="format.amf.Value"/></c></x>
</f></array>
	</class>
	<enum path="format.amf.Value" params="" file="format/amf/Value.hx">
		<ANumber a="f"><x path="Float"/></ANumber>
		<ABool a="b"><x path="Bool"/></ABool>
		<AString a="s"><c path="String"/></AString>
		<AObject a="fields:?size">
			<t path="Map">
				<c path="String"/>
				<e path="format.amf.Value"/>
			</t>
			<x path="Int"/>
		</AObject>
		<ADate a="d"><c path="Date"/></ADate>
		<AUndefined/>
		<ANull/>
		<AArray a="values"><c path="Array"><e path="format.amf.Value"/></c></AArray>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<class path="format.amf.Writer" params="" file="format/amf/Writer.hx">
		<o><c path="haxe.io.Output"/></o>
		<write public="1" set="method" line="38"><f a="v">
	<e path="format.amf.Value"/>
	<x path="Void"/>
</f></write>
		<new public="1" set="method" line="33"><f a="o">
	<c path="haxe.io.Output"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="format.amf3.Amf3Array" params="" file="format/amf3/Amf3Array.hx">
		<a public="1"><c path="Array"><d/></c></a>
		<extra public="1">
			<t path="Map">
				<c path="String"/>
				<d/>
			</t>
			<meta><m n="optional"/></meta>
		</extra>
		<new public="1" set="method" line="34"><f a="initA:?initExtra">
	<c path="Array"><d/></c>
	<t path="Map">
		<c path="String"/>
		<d/>
	</t>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<typedef path="format.amf3.Traits" params="" file="format/amf3/Reader.hx" module="format.amf3.Reader"><a>
	<sealedMemberNames><c path="Array"><c path="String"/></c></sealedMemberNames>
	<isExternalizable><x path="Bool"/></isExternalizable>
	<isDynamic><x path="Bool"/></isDynamic>
	<className><e path="format.amf3.Value"/></className>
</a></typedef>
	<class path="format.amf3.Reader" params="" file="format/amf3/Reader.hx">
		<complexObjectsTable><c path="Array"><e path="format.amf3.Value"/></c></complexObjectsTable>
		<objectTraitsTable><c path="Array"><t path="format.amf3.Traits"/></c></objectTraitsTable>
		<stringTable><c path="Array"><e path="format.amf3.Value"/></c></stringTable>
		<i><c path="haxe.io.Input"/></i>
		<readObject set="method" line="58"><f a=""><e path="format.amf3.Value"/></f></readObject>
		<readMap set="method" line="146"><f a=""><e path="format.amf3.Value"/></f></readMap>
		<readArray set="method" line="166"><f a=""><e path="format.amf3.Value"/></f></readArray>
		<readIntVector set="method" line="192"><f a=""><e path="format.amf3.Value"/></f></readIntVector>
		<readDoubleVector set="method" line="220"><f a=""><e path="format.amf3.Value"/></f></readDoubleVector>
		<readObjectVector set="method" line="248"><f a=""><e path="format.amf3.Value"/></f></readObjectVector>
		<readBytes set="method" line="285"><f a=""><e path="format.amf3.Value"/></f></readBytes>
		<readInt set="method" line="301">
			<f a="?signExtend:?preShift" v="false:0">
				<x path="Bool"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ preShift : 0, signExtend : false }</e></m></meta>
		</readInt>
		<readString set="method" line="328"><f a=""><e path="format.amf3.Value"/></f></readString>
		<readStringNoHeader set="method" line="341"><f a="len">
	<x path="Int"/>
	<e path="format.amf3.Value"/>
</f></readStringNoHeader>
		<readDate set="method" line="390"><f a=""><e path="format.amf3.Value"/></f></readDate>
		<readXml set="method" line="404"><f a=""><e path="format.amf3.Value"/></f></readXml>
		<readWithCode public="1" set="method" line="419"><f a="id">
	<x path="Int"/>
	<e path="format.amf3.Value"/>
</f></readWithCode>
		<read public="1" set="method" line="461"><f a=""><e path="format.amf3.Value"/></f></read>
		<new public="1" set="method" line="50"><f a="i">
	<c path="haxe.io.Input"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="format.amf3.Tools" params="" file="format/amf3/Tools.hx">
		<encode public="1" set="method" line="34" static="1"><f a="o">
	<d/>
	<e path="format.amf3.Value"/>
</f></encode>
		<decode public="1" set="method" line="100" static="1"><f a="a">
	<e path="format.amf3.Value"/>
	<d/>
</f></decode>
		<undefined public="1" set="method" line="118" static="1"><f a="a">
	<e path="format.amf3.Value"/>
	<unknown/>
</f></undefined>
		<anull public="1" set="method" line="122" static="1"><f a="a">
	<e path="format.amf3.Value"/>
	<unknown/>
</f></anull>
		<bool public="1" set="method" line="126" static="1"><f a="a">
	<e path="format.amf3.Value"/>
	<x path="Null"><x path="Bool"/></x>
</f></bool>
		<int public="1" set="method" line="134" static="1"><f a="a">
	<e path="format.amf3.Value"/>
	<x path="Null"><x path="Int"/></x>
</f></int>
		<number public="1" set="method" line="142" static="1"><f a="a">
	<e path="format.amf3.Value"/>
	<x path="Null"><x path="Float"/></x>
</f></number>
		<string public="1" set="method" line="150" static="1"><f a="a">
	<e path="format.amf3.Value"/>
	<x path="Null"><c path="String"/></x>
</f></string>
		<date public="1" set="method" line="158" static="1"><f a="a">
	<e path="format.amf3.Value"/>
	<x path="Null"><c path="Date"/></x>
</f></date>
		<array public="1" set="method" line="166" static="1"><f a="a">
	<e path="format.amf3.Value"/>
	<c path="format.amf3.Amf3Array"/>
</f></array>
		<vector public="1" set="method" line="181" static="1"><f a="a">
	<e path="format.amf3.Value"/>
	<x path="Null"><x path="haxe.ds.Vector"><d/></x></x>
</f></vector>
		<object public="1" set="method" line="193" static="1"><f a="a">
	<e path="format.amf3.Value"/>
	<x path="Null"><x path="haxe.ds.Map">
	<c path="String"/>
	<unknown/>
</x></x>
</f></object>
		<xml public="1" set="method" line="205" static="1"><f a="a">
	<e path="format.amf3.Value"/>
	<x path="Null"><c path="Xml"/></x>
</f></xml>
		<bytes public="1" set="method" line="213" static="1"><f a="a">
	<e path="format.amf3.Value"/>
	<x path="Null"><c path="haxe.io.Bytes"/></x>
</f></bytes>
		<map public="1" set="method" line="221" static="1"><f a="a">
	<e path="format.amf3.Value"/>
	<x path="Null"><x path="haxe.ds.Map">
	<e path="format.amf3.Value"/>
	<e path="format.amf3.Value"/>
</x></x>
</f></map>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<enum path="format.amf3.Value" params="" file="format/amf3/Value.hx">
		<AUndefined/>
		<ANull/>
		<ABool a="b"><x path="Bool"/></ABool>
		<AInt a="i"><x path="Int"/></AInt>
		<ANumber a="f"><x path="Float"/></ANumber>
		<AString a="s"><c path="String"/></AString>
		<ADate a="d"><c path="Date"/></ADate>
		<AObject a="fields:?size">
			<t path="Map">
				<c path="String"/>
				<e path="format.amf3.Value"/>
			</t>
			<x path="Int"/>
		</AObject>
		<AArray a="values:?extra">
			<c path="Array"><e path="format.amf3.Value"/></c>
			<t path="Map">
				<c path="String"/>
				<e path="format.amf3.Value"/>
			</t>
		</AArray>
		<AVector a="values"><x path="haxe.ds.Vector"><e path="format.amf3.Value"/></x></AVector>
		<AXml a="x"><c path="Xml"/></AXml>
		<ABytes a="b"><c path="haxe.io.Bytes"/></ABytes>
		<AMap a="m"><t path="Map">
	<e path="format.amf3.Value"/>
	<e path="format.amf3.Value"/>
</t></AMap>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<class path="format.amf3.Writer" params="" file="format/amf3/Writer.hx">
		<o><c path="haxe.io.Output"/></o>
		<writeInt set="method" line="39"><f a="i">
	<x path="Int"/>
	<x path="Void"/>
</f></writeInt>
		<writeUInt set="method" line="50">
			<f a="u:?shiftLeft" v=":false">
				<x path="UInt"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ shiftLeft : false }</e></m></meta>
		</writeUInt>
		<writeString set="method" line="79"><f a="s">
	<c path="String"/>
	<x path="Void"/>
</f></writeString>
		<writeObject set="method" line="108"><f a="h:?size">
	<t path="Map">
		<c path="String"/>
		<e path="format.amf3.Value"/>
	</t>
	<x path="Int"/>
	<x path="Void"/>
</f></writeObject>
		<write public="1" set="method" line="130"><f a="v">
	<e path="format.amf3.Value"/>
	<x path="Void"/>
</f></write>
		<new public="1" set="method" line="34"><f a="o">
	<c path="haxe.io.Output"/>
	<x path="Void"/>
</f></new>
	</class>
	<abstract path="format.as1.ActionCode" params="" file="format/as1/Constants.hx" module="format.as1.Constants">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<haxe_doc>* Action code constants.
 * Not for public usage.</haxe_doc>
		<meta><m n=":enum"/></meta>
		<impl><class path="format.as1._Constants.ActionCode_Impl_" params="" file="format/as1/Constants.hx" private="1" module="format.as1.Constants" extern="1">
	<ActionEnd public="1" get="inline" set="null" expr="cast 0x00" line="38" static="1">
		<x path="format.as1.ActionCode"/>
		<meta>
			<m n=":value"><e>cast 0x00</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ActionEnd>
	<ActionNextFrame public="1" get="inline" set="null" expr="cast 0x04" line="39" static="1">
		<x path="format.as1.ActionCode"/>
		<meta>
			<m n=":value"><e>cast 0x04</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ActionNextFrame>
	<ActionPrevFrame public="1" get="inline" set="null" expr="cast 0x05" line="40" static="1">
		<x path="format.as1.ActionCode"/>
		<meta>
			<m n=":value"><e>cast 0x05</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ActionPrevFrame>
	<ActionPlay public="1" get="inline" set="null" expr="cast 0x06" line="41" static="1">
		<x path="format.as1.ActionCode"/>
		<meta>
			<m n=":value"><e>cast 0x06</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ActionPlay>
	<ActionStop public="1" get="inline" set="null" expr="cast 0x07" line="42" static="1">
		<x path="format.as1.ActionCode"/>
		<meta>
			<m n=":value"><e>cast 0x07</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ActionStop>
	<ActionToggleQuality public="1" get="inline" set="null" expr="cast 0x08" line="43" static="1">
		<x path="format.as1.ActionCode"/>
		<meta>
			<m n=":value"><e>cast 0x08</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ActionToggleQuality>
	<ActionStopSounds public="1" get="inline" set="null" expr="cast 0x09" line="44" static="1">
		<x path="format.as1.ActionCode"/>
		<meta>
			<m n=":value"><e>cast 0x09</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ActionStopSounds>
	<ActionAdd public="1" get="inline" set="null" expr="cast 0x0A" line="45" static="1">
		<x path="format.as1.ActionCode"/>
		<meta>
			<m n=":value"><e>cast 0x0A</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ActionAdd>
	<ActionSubtract public="1" get="inline" set="null" expr="cast 0x0B" line="46" static="1">
		<x path="format.as1.ActionCode"/>
		<meta>
			<m n=":value"><e>cast 0x0B</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ActionSubtract>
	<ActionMultiply public="1" get="inline" set="null" expr="cast 0x0C" line="47" static="1">
		<x path="format.as1.ActionCode"/>
		<meta>
			<m n=":value"><e>cast 0x0C</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ActionMultiply>
	<ActionDivide public="1" get="inline" set="null" expr="cast 0x0D" line="48" static="1">
		<x path="format.as1.ActionCode"/>
		<meta>
			<m n=":value"><e>cast 0x0D</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ActionDivide>
	<ActionEquals public="1" get="inline" set="null" expr="cast 0x0E" line="49" static="1">
		<x path="format.as1.ActionCode"/>
		<meta>
			<m n=":value"><e>cast 0x0E</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ActionEquals>
	<ActionLess public="1" get="inline" set="null" expr="cast 0x0F" line="50" static="1">
		<x path="format.as1.ActionCode"/>
		<meta>
			<m n=":value"><e>cast 0x0F</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ActionLess>
	<ActionAnd public="1" get="inline" set="null" expr="cast 0x10" line="51" static="1">
		<x path="format.as1.ActionCode"/>
		<meta>
			<m n=":value"><e>cast 0x10</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ActionAnd>
	<ActionOr public="1" get="inline" set="null" expr="cast 0x11" line="52" static="1">
		<x path="format.as1.ActionCode"/>
		<meta>
			<m n=":value"><e>cast 0x11</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ActionOr>
	<ActionNot public="1" get="inline" set="null" expr="cast 0x12" line="53" static="1">
		<x path="format.as1.ActionCode"/>
		<meta>
			<m n=":value"><e>cast 0x12</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ActionNot>
	<ActionStringEquals public="1" get="inline" set="null" expr="cast 0x13" line="54" static="1">
		<x path="format.as1.ActionCode"/>
		<meta>
			<m n=":value"><e>cast 0x13</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ActionStringEquals>
	<ActionStringLength public="1" get="inline" set="null" expr="cast 0x14" line="55" static="1">
		<x path="format.as1.ActionCode"/>
		<meta>
			<m n=":value"><e>cast 0x14</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ActionStringLength>
	<ActionStringExtract public="1" get="inline" set="null" expr="cast 0x15" line="56" static="1">
		<x path="format.as1.ActionCode"/>
		<meta>
			<m n=":value"><e>cast 0x15</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ActionStringExtract>
	<ActionPop public="1" get="inline" set="null" expr="cast 0x17" line="57" static="1">
		<x path="format.as1.ActionCode"/>
		<meta>
			<m n=":value"><e>cast 0x17</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ActionPop>
	<ActionToInteger public="1" get="inline" set="null" expr="cast 0x18" line="58" static="1">
		<x path="format.as1.ActionCode"/>
		<meta>
			<m n=":value"><e>cast 0x18</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ActionToInteger>
	<ActionGetVariable public="1" get="inline" set="null" expr="cast 0x1C" line="59" static="1">
		<x path="format.as1.ActionCode"/>
		<meta>
			<m n=":value"><e>cast 0x1C</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ActionGetVariable>
	<ActionSetVariable public="1" get="inline" set="null" expr="cast 0x1D" line="60" static="1">
		<x path="format.as1.ActionCode"/>
		<meta>
			<m n=":value"><e>cast 0x1D</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ActionSetVariable>
	<ActionSetTarget2 public="1" get="inline" set="null" expr="cast 0x20" line="61" static="1">
		<x path="format.as1.ActionCode"/>
		<meta>
			<m n=":value"><e>cast 0x20</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ActionSetTarget2>
	<ActionStringAdd public="1" get="inline" set="null" expr="cast 0x21" line="62" static="1">
		<x path="format.as1.ActionCode"/>
		<meta>
			<m n=":value"><e>cast 0x21</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ActionStringAdd>
	<ActionGetProperty public="1" get="inline" set="null" expr="cast 0x22" line="63" static="1">
		<x path="format.as1.ActionCode"/>
		<meta>
			<m n=":value"><e>cast 0x22</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ActionGetProperty>
	<ActionSetProperty public="1" get="inline" set="null" expr="cast 0x23" line="64" static="1">
		<x path="format.as1.ActionCode"/>
		<meta>
			<m n=":value"><e>cast 0x23</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ActionSetProperty>
	<ActionCloneSprite public="1" get="inline" set="null" expr="cast 0x24" line="65" static="1">
		<x path="format.as1.ActionCode"/>
		<meta>
			<m n=":value"><e>cast 0x24</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ActionCloneSprite>
	<ActionRemoveSprite public="1" get="inline" set="null" expr="cast 0x25" line="66" static="1">
		<x path="format.as1.ActionCode"/>
		<meta>
			<m n=":value"><e>cast 0x25</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ActionRemoveSprite>
	<ActionTrace public="1" get="inline" set="null" expr="cast 0x26" line="67" static="1">
		<x path="format.as1.ActionCode"/>
		<meta>
			<m n=":value"><e>cast 0x26</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ActionTrace>
	<ActionStartDrag public="1" get="inline" set="null" expr="cast 0x27" line="68" static="1">
		<x path="format.as1.ActionCode"/>
		<meta>
			<m n=":value"><e>cast 0x27</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ActionStartDrag>
	<ActionEndDrag public="1" get="inline" set="null" expr="cast 0x28" line="69" static="1">
		<x path="format.as1.ActionCode"/>
		<meta>
			<m n=":value"><e>cast 0x28</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ActionEndDrag>
	<ActionStringLess public="1" get="inline" set="null" expr="cast 0x29" line="70" static="1">
		<x path="format.as1.ActionCode"/>
		<meta>
			<m n=":value"><e>cast 0x29</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ActionStringLess>
	<ActionThrow public="1" get="inline" set="null" expr="cast 0x2A" line="71" static="1">
		<x path="format.as1.ActionCode"/>
		<meta>
			<m n=":value"><e>cast 0x2A</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ActionThrow>
	<ActionCastOp public="1" get="inline" set="null" expr="cast 0x2B" line="72" static="1">
		<x path="format.as1.ActionCode"/>
		<meta>
			<m n=":value"><e>cast 0x2B</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ActionCastOp>
	<ActionImplementsOp public="1" get="inline" set="null" expr="cast 0x2C" line="73" static="1">
		<x path="format.as1.ActionCode"/>
		<meta>
			<m n=":value"><e>cast 0x2C</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ActionImplementsOp>
	<ActionFSCommand2 public="1" get="inline" set="null" expr="cast 0x2D" line="74" static="1">
		<x path="format.as1.ActionCode"/>
		<meta>
			<m n=":value"><e>cast 0x2D</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ActionFSCommand2>
	<ActionRandomNumber public="1" get="inline" set="null" expr="cast 0x30" line="75" static="1">
		<x path="format.as1.ActionCode"/>
		<meta>
			<m n=":value"><e>cast 0x30</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ActionRandomNumber>
	<ActionMBStringLength public="1" get="inline" set="null" expr="cast 0x31" line="76" static="1">
		<x path="format.as1.ActionCode"/>
		<meta>
			<m n=":value"><e>cast 0x31</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ActionMBStringLength>
	<ActionCharToAscii public="1" get="inline" set="null" expr="cast 0x32" line="77" static="1">
		<x path="format.as1.ActionCode"/>
		<meta>
			<m n=":value"><e>cast 0x32</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ActionCharToAscii>
	<ActionAsciiToChar public="1" get="inline" set="null" expr="cast 0x33" line="78" static="1">
		<x path="format.as1.ActionCode"/>
		<meta>
			<m n=":value"><e>cast 0x33</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ActionAsciiToChar>
	<ActionGetTime public="1" get="inline" set="null" expr="cast 0x34" line="79" static="1">
		<x path="format.as1.ActionCode"/>
		<meta>
			<m n=":value"><e>cast 0x34</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ActionGetTime>
	<ActionMBStringExtract public="1" get="inline" set="null" expr="cast 0x35" line="80" static="1">
		<x path="format.as1.ActionCode"/>
		<meta>
			<m n=":value"><e>cast 0x35</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ActionMBStringExtract>
	<ActionMBCharToAscii public="1" get="inline" set="null" expr="cast 0x36" line="81" static="1">
		<x path="format.as1.ActionCode"/>
		<meta>
			<m n=":value"><e>cast 0x36</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ActionMBCharToAscii>
	<ActionMBAsciiToChar public="1" get="inline" set="null" expr="cast 0x37" line="82" static="1">
		<x path="format.as1.ActionCode"/>
		<meta>
			<m n=":value"><e>cast 0x37</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ActionMBAsciiToChar>
	<ActionDelete public="1" get="inline" set="null" expr="cast 0x3A" line="83" static="1">
		<x path="format.as1.ActionCode"/>
		<meta>
			<m n=":value"><e>cast 0x3A</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ActionDelete>
	<ActionDelete2 public="1" get="inline" set="null" expr="cast 0x3B" line="84" static="1">
		<x path="format.as1.ActionCode"/>
		<meta>
			<m n=":value"><e>cast 0x3B</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ActionDelete2>
	<ActionDefineLocal public="1" get="inline" set="null" expr="cast 0x3C" line="85" static="1">
		<x path="format.as1.ActionCode"/>
		<meta>
			<m n=":value"><e>cast 0x3C</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ActionDefineLocal>
	<ActionCallFunction public="1" get="inline" set="null" expr="cast 0x3D" line="86" static="1">
		<x path="format.as1.ActionCode"/>
		<meta>
			<m n=":value"><e>cast 0x3D</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ActionCallFunction>
	<ActionReturn public="1" get="inline" set="null" expr="cast 0x3E" line="87" static="1">
		<x path="format.as1.ActionCode"/>
		<meta>
			<m n=":value"><e>cast 0x3E</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ActionReturn>
	<ActionModulo public="1" get="inline" set="null" expr="cast 0x3F" line="88" static="1">
		<x path="format.as1.ActionCode"/>
		<meta>
			<m n=":value"><e>cast 0x3F</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ActionModulo>
	<ActionNewObject public="1" get="inline" set="null" expr="cast 0x40" line="89" static="1">
		<x path="format.as1.ActionCode"/>
		<meta>
			<m n=":value"><e>cast 0x40</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ActionNewObject>
	<ActionDefineLocal2 public="1" get="inline" set="null" expr="cast 0x41" line="90" static="1">
		<x path="format.as1.ActionCode"/>
		<meta>
			<m n=":value"><e>cast 0x41</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ActionDefineLocal2>
	<ActionInitArray public="1" get="inline" set="null" expr="cast 0x42" line="91" static="1">
		<x path="format.as1.ActionCode"/>
		<meta>
			<m n=":value"><e>cast 0x42</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ActionInitArray>
	<ActionInitObject public="1" get="inline" set="null" expr="cast 0x43" line="92" static="1">
		<x path="format.as1.ActionCode"/>
		<meta>
			<m n=":value"><e>cast 0x43</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ActionInitObject>
	<ActionTypeOf public="1" get="inline" set="null" expr="cast 0x44" line="93" static="1">
		<x path="format.as1.ActionCode"/>
		<meta>
			<m n=":value"><e>cast 0x44</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ActionTypeOf>
	<ActionTargetPath public="1" get="inline" set="null" expr="cast 0x45" line="94" static="1">
		<x path="format.as1.ActionCode"/>
		<meta>
			<m n=":value"><e>cast 0x45</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ActionTargetPath>
	<ActionEnumerate public="1" get="inline" set="null" expr="cast 0x46" line="95" static="1">
		<x path="format.as1.ActionCode"/>
		<meta>
			<m n=":value"><e>cast 0x46</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ActionEnumerate>
	<ActionAdd2 public="1" get="inline" set="null" expr="cast 0x47" line="96" static="1">
		<x path="format.as1.ActionCode"/>
		<meta>
			<m n=":value"><e>cast 0x47</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ActionAdd2>
	<ActionLess2 public="1" get="inline" set="null" expr="cast 0x48" line="97" static="1">
		<x path="format.as1.ActionCode"/>
		<meta>
			<m n=":value"><e>cast 0x48</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ActionLess2>
	<ActionEquals2 public="1" get="inline" set="null" expr="cast 0x49" line="98" static="1">
		<x path="format.as1.ActionCode"/>
		<meta>
			<m n=":value"><e>cast 0x49</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ActionEquals2>
	<ActionToNumber public="1" get="inline" set="null" expr="cast 0x4A" line="99" static="1">
		<x path="format.as1.ActionCode"/>
		<meta>
			<m n=":value"><e>cast 0x4A</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ActionToNumber>
	<ActionToString public="1" get="inline" set="null" expr="cast 0x4B" line="100" static="1">
		<x path="format.as1.ActionCode"/>
		<meta>
			<m n=":value"><e>cast 0x4B</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ActionToString>
	<ActionPushDuplicate public="1" get="inline" set="null" expr="cast 0x4C" line="101" static="1">
		<x path="format.as1.ActionCode"/>
		<meta>
			<m n=":value"><e>cast 0x4C</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ActionPushDuplicate>
	<ActionStackSwap public="1" get="inline" set="null" expr="cast 0x4D" line="102" static="1">
		<x path="format.as1.ActionCode"/>
		<meta>
			<m n=":value"><e>cast 0x4D</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ActionStackSwap>
	<ActionGetMember public="1" get="inline" set="null" expr="cast 0x4E" line="103" static="1">
		<x path="format.as1.ActionCode"/>
		<meta>
			<m n=":value"><e>cast 0x4E</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ActionGetMember>
	<ActionSetMember public="1" get="inline" set="null" expr="cast 0x4F" line="104" static="1">
		<x path="format.as1.ActionCode"/>
		<meta>
			<m n=":value"><e>cast 0x4F</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ActionSetMember>
	<ActionIncrement public="1" get="inline" set="null" expr="cast 0x50" line="105" static="1">
		<x path="format.as1.ActionCode"/>
		<meta>
			<m n=":value"><e>cast 0x50</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ActionIncrement>
	<ActionDecrement public="1" get="inline" set="null" expr="cast 0x51" line="106" static="1">
		<x path="format.as1.ActionCode"/>
		<meta>
			<m n=":value"><e>cast 0x51</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ActionDecrement>
	<ActionCallMethod public="1" get="inline" set="null" expr="cast 0x52" line="107" static="1">
		<x path="format.as1.ActionCode"/>
		<meta>
			<m n=":value"><e>cast 0x52</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ActionCallMethod>
	<ActionNewMethod public="1" get="inline" set="null" expr="cast 0x53" line="108" static="1">
		<x path="format.as1.ActionCode"/>
		<meta>
			<m n=":value"><e>cast 0x53</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ActionNewMethod>
	<ActionInstanceOf public="1" get="inline" set="null" expr="cast 0x54" line="109" static="1">
		<x path="format.as1.ActionCode"/>
		<meta>
			<m n=":value"><e>cast 0x54</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ActionInstanceOf>
	<ActionEnumerate2 public="1" get="inline" set="null" expr="cast 0x55" line="110" static="1">
		<x path="format.as1.ActionCode"/>
		<meta>
			<m n=":value"><e>cast 0x55</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ActionEnumerate2>
	<ActionBitAnd public="1" get="inline" set="null" expr="cast 0x60" line="111" static="1">
		<x path="format.as1.ActionCode"/>
		<meta>
			<m n=":value"><e>cast 0x60</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ActionBitAnd>
	<ActionBitOr public="1" get="inline" set="null" expr="cast 0x61" line="112" static="1">
		<x path="format.as1.ActionCode"/>
		<meta>
			<m n=":value"><e>cast 0x61</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ActionBitOr>
	<ActionBitXor public="1" get="inline" set="null" expr="cast 0x62" line="113" static="1">
		<x path="format.as1.ActionCode"/>
		<meta>
			<m n=":value"><e>cast 0x62</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ActionBitXor>
	<ActionBitLShift public="1" get="inline" set="null" expr="cast 0x63" line="114" static="1">
		<x path="format.as1.ActionCode"/>
		<meta>
			<m n=":value"><e>cast 0x63</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ActionBitLShift>
	<ActionBitRShift public="1" get="inline" set="null" expr="cast 0x64" line="115" static="1">
		<x path="format.as1.ActionCode"/>
		<meta>
			<m n=":value"><e>cast 0x64</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ActionBitRShift>
	<ActionBitURShift public="1" get="inline" set="null" expr="cast 0x65" line="116" static="1">
		<x path="format.as1.ActionCode"/>
		<meta>
			<m n=":value"><e>cast 0x65</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ActionBitURShift>
	<ActionStrictEquals public="1" get="inline" set="null" expr="cast 0x66" line="117" static="1">
		<x path="format.as1.ActionCode"/>
		<meta>
			<m n=":value"><e>cast 0x66</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ActionStrictEquals>
	<ActionGreater public="1" get="inline" set="null" expr="cast 0x67" line="118" static="1">
		<x path="format.as1.ActionCode"/>
		<meta>
			<m n=":value"><e>cast 0x67</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ActionGreater>
	<ActionStringGreater public="1" get="inline" set="null" expr="cast 0x68" line="119" static="1">
		<x path="format.as1.ActionCode"/>
		<meta>
			<m n=":value"><e>cast 0x68</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ActionStringGreater>
	<ActionExtends public="1" get="inline" set="null" expr="cast 0x69" line="120" static="1">
		<x path="format.as1.ActionCode"/>
		<meta>
			<m n=":value"><e>cast 0x69</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ActionExtends>
	<ActionGotoFrame public="1" get="inline" set="null" expr="cast 0x81" line="121" static="1">
		<x path="format.as1.ActionCode"/>
		<meta>
			<m n=":value"><e>cast 0x81</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ActionGotoFrame>
	<ActionGetURL public="1" get="inline" set="null" expr="cast 0x83" line="122" static="1">
		<x path="format.as1.ActionCode"/>
		<meta>
			<m n=":value"><e>cast 0x83</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ActionGetURL>
	<ActionStoreRegister public="1" get="inline" set="null" expr="cast 0x87" line="123" static="1">
		<x path="format.as1.ActionCode"/>
		<meta>
			<m n=":value"><e>cast 0x87</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ActionStoreRegister>
	<ActionConstantPool public="1" get="inline" set="null" expr="cast 0x88" line="124" static="1">
		<x path="format.as1.ActionCode"/>
		<meta>
			<m n=":value"><e>cast 0x88</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ActionConstantPool>
	<ActionWaitForFrame public="1" get="inline" set="null" expr="cast 0x8A" line="125" static="1">
		<x path="format.as1.ActionCode"/>
		<meta>
			<m n=":value"><e>cast 0x8A</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ActionWaitForFrame>
	<ActionSetTarget public="1" get="inline" set="null" expr="cast 0x8B" line="126" static="1">
		<x path="format.as1.ActionCode"/>
		<meta>
			<m n=":value"><e>cast 0x8B</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ActionSetTarget>
	<ActionGoToLabel public="1" get="inline" set="null" expr="cast 0x8C" line="127" static="1">
		<x path="format.as1.ActionCode"/>
		<meta>
			<m n=":value"><e>cast 0x8C</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ActionGoToLabel>
	<ActionWaitForFrame2 public="1" get="inline" set="null" expr="cast 0x8D" line="128" static="1">
		<x path="format.as1.ActionCode"/>
		<meta>
			<m n=":value"><e>cast 0x8D</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ActionWaitForFrame2>
	<ActionDefineFunction2 public="1" get="inline" set="null" expr="cast 0x8E" line="129" static="1">
		<x path="format.as1.ActionCode"/>
		<meta>
			<m n=":value"><e>cast 0x8E</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ActionDefineFunction2>
	<ActionTry public="1" get="inline" set="null" expr="cast 0x8F" line="130" static="1">
		<x path="format.as1.ActionCode"/>
		<meta>
			<m n=":value"><e>cast 0x8F</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ActionTry>
	<ActionWith public="1" get="inline" set="null" expr="cast 0x94" line="131" static="1">
		<x path="format.as1.ActionCode"/>
		<meta>
			<m n=":value"><e>cast 0x94</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ActionWith>
	<ActionPush public="1" get="inline" set="null" expr="cast 0x96" line="132" static="1">
		<x path="format.as1.ActionCode"/>
		<meta>
			<m n=":value"><e>cast 0x96</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ActionPush>
	<ActionJump public="1" get="inline" set="null" expr="cast 0x99" line="133" static="1">
		<x path="format.as1.ActionCode"/>
		<meta>
			<m n=":value"><e>cast 0x99</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ActionJump>
	<ActionGetURL2 public="1" get="inline" set="null" expr="cast 0x9A" line="134" static="1">
		<x path="format.as1.ActionCode"/>
		<meta>
			<m n=":value"><e>cast 0x9A</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ActionGetURL2>
	<ActionDefineFunction public="1" get="inline" set="null" expr="cast 0x9B" line="135" static="1">
		<x path="format.as1.ActionCode"/>
		<meta>
			<m n=":value"><e>cast 0x9B</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ActionDefineFunction>
	<ActionIf public="1" get="inline" set="null" expr="cast 0x9D" line="136" static="1">
		<x path="format.as1.ActionCode"/>
		<meta>
			<m n=":value"><e>cast 0x9D</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ActionIf>
	<ActionCall public="1" get="inline" set="null" expr="cast 0x9E" line="137" static="1">
		<x path="format.as1.ActionCode"/>
		<meta>
			<m n=":value"><e>cast 0x9E</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ActionCall>
	<ActionGotoFrame2 public="1" get="inline" set="null" expr="cast 0x9F" line="138" static="1">
		<x path="format.as1.ActionCode"/>
		<meta>
			<m n=":value"><e>cast 0x9F</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ActionGotoFrame2>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="format.as1._Constants.ActionCode_Impl_" params="" file="format/as1/Constants.hx" private="1" module="format.as1.Constants" extern="1">
		<ActionEnd public="1" get="inline" set="null" expr="cast 0x00" line="38" static="1">
			<x path="format.as1.ActionCode"/>
			<meta>
				<m n=":value"><e>cast 0x00</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ActionEnd>
		<ActionNextFrame public="1" get="inline" set="null" expr="cast 0x04" line="39" static="1">
			<x path="format.as1.ActionCode"/>
			<meta>
				<m n=":value"><e>cast 0x04</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ActionNextFrame>
		<ActionPrevFrame public="1" get="inline" set="null" expr="cast 0x05" line="40" static="1">
			<x path="format.as1.ActionCode"/>
			<meta>
				<m n=":value"><e>cast 0x05</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ActionPrevFrame>
		<ActionPlay public="1" get="inline" set="null" expr="cast 0x06" line="41" static="1">
			<x path="format.as1.ActionCode"/>
			<meta>
				<m n=":value"><e>cast 0x06</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ActionPlay>
		<ActionStop public="1" get="inline" set="null" expr="cast 0x07" line="42" static="1">
			<x path="format.as1.ActionCode"/>
			<meta>
				<m n=":value"><e>cast 0x07</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ActionStop>
		<ActionToggleQuality public="1" get="inline" set="null" expr="cast 0x08" line="43" static="1">
			<x path="format.as1.ActionCode"/>
			<meta>
				<m n=":value"><e>cast 0x08</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ActionToggleQuality>
		<ActionStopSounds public="1" get="inline" set="null" expr="cast 0x09" line="44" static="1">
			<x path="format.as1.ActionCode"/>
			<meta>
				<m n=":value"><e>cast 0x09</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ActionStopSounds>
		<ActionAdd public="1" get="inline" set="null" expr="cast 0x0A" line="45" static="1">
			<x path="format.as1.ActionCode"/>
			<meta>
				<m n=":value"><e>cast 0x0A</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ActionAdd>
		<ActionSubtract public="1" get="inline" set="null" expr="cast 0x0B" line="46" static="1">
			<x path="format.as1.ActionCode"/>
			<meta>
				<m n=":value"><e>cast 0x0B</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ActionSubtract>
		<ActionMultiply public="1" get="inline" set="null" expr="cast 0x0C" line="47" static="1">
			<x path="format.as1.ActionCode"/>
			<meta>
				<m n=":value"><e>cast 0x0C</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ActionMultiply>
		<ActionDivide public="1" get="inline" set="null" expr="cast 0x0D" line="48" static="1">
			<x path="format.as1.ActionCode"/>
			<meta>
				<m n=":value"><e>cast 0x0D</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ActionDivide>
		<ActionEquals public="1" get="inline" set="null" expr="cast 0x0E" line="49" static="1">
			<x path="format.as1.ActionCode"/>
			<meta>
				<m n=":value"><e>cast 0x0E</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ActionEquals>
		<ActionLess public="1" get="inline" set="null" expr="cast 0x0F" line="50" static="1">
			<x path="format.as1.ActionCode"/>
			<meta>
				<m n=":value"><e>cast 0x0F</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ActionLess>
		<ActionAnd public="1" get="inline" set="null" expr="cast 0x10" line="51" static="1">
			<x path="format.as1.ActionCode"/>
			<meta>
				<m n=":value"><e>cast 0x10</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ActionAnd>
		<ActionOr public="1" get="inline" set="null" expr="cast 0x11" line="52" static="1">
			<x path="format.as1.ActionCode"/>
			<meta>
				<m n=":value"><e>cast 0x11</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ActionOr>
		<ActionNot public="1" get="inline" set="null" expr="cast 0x12" line="53" static="1">
			<x path="format.as1.ActionCode"/>
			<meta>
				<m n=":value"><e>cast 0x12</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ActionNot>
		<ActionStringEquals public="1" get="inline" set="null" expr="cast 0x13" line="54" static="1">
			<x path="format.as1.ActionCode"/>
			<meta>
				<m n=":value"><e>cast 0x13</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ActionStringEquals>
		<ActionStringLength public="1" get="inline" set="null" expr="cast 0x14" line="55" static="1">
			<x path="format.as1.ActionCode"/>
			<meta>
				<m n=":value"><e>cast 0x14</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ActionStringLength>
		<ActionStringExtract public="1" get="inline" set="null" expr="cast 0x15" line="56" static="1">
			<x path="format.as1.ActionCode"/>
			<meta>
				<m n=":value"><e>cast 0x15</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ActionStringExtract>
		<ActionPop public="1" get="inline" set="null" expr="cast 0x17" line="57" static="1">
			<x path="format.as1.ActionCode"/>
			<meta>
				<m n=":value"><e>cast 0x17</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ActionPop>
		<ActionToInteger public="1" get="inline" set="null" expr="cast 0x18" line="58" static="1">
			<x path="format.as1.ActionCode"/>
			<meta>
				<m n=":value"><e>cast 0x18</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ActionToInteger>
		<ActionGetVariable public="1" get="inline" set="null" expr="cast 0x1C" line="59" static="1">
			<x path="format.as1.ActionCode"/>
			<meta>
				<m n=":value"><e>cast 0x1C</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ActionGetVariable>
		<ActionSetVariable public="1" get="inline" set="null" expr="cast 0x1D" line="60" static="1">
			<x path="format.as1.ActionCode"/>
			<meta>
				<m n=":value"><e>cast 0x1D</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ActionSetVariable>
		<ActionSetTarget2 public="1" get="inline" set="null" expr="cast 0x20" line="61" static="1">
			<x path="format.as1.ActionCode"/>
			<meta>
				<m n=":value"><e>cast 0x20</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ActionSetTarget2>
		<ActionStringAdd public="1" get="inline" set="null" expr="cast 0x21" line="62" static="1">
			<x path="format.as1.ActionCode"/>
			<meta>
				<m n=":value"><e>cast 0x21</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ActionStringAdd>
		<ActionGetProperty public="1" get="inline" set="null" expr="cast 0x22" line="63" static="1">
			<x path="format.as1.ActionCode"/>
			<meta>
				<m n=":value"><e>cast 0x22</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ActionGetProperty>
		<ActionSetProperty public="1" get="inline" set="null" expr="cast 0x23" line="64" static="1">
			<x path="format.as1.ActionCode"/>
			<meta>
				<m n=":value"><e>cast 0x23</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ActionSetProperty>
		<ActionCloneSprite public="1" get="inline" set="null" expr="cast 0x24" line="65" static="1">
			<x path="format.as1.ActionCode"/>
			<meta>
				<m n=":value"><e>cast 0x24</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ActionCloneSprite>
		<ActionRemoveSprite public="1" get="inline" set="null" expr="cast 0x25" line="66" static="1">
			<x path="format.as1.ActionCode"/>
			<meta>
				<m n=":value"><e>cast 0x25</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ActionRemoveSprite>
		<ActionTrace public="1" get="inline" set="null" expr="cast 0x26" line="67" static="1">
			<x path="format.as1.ActionCode"/>
			<meta>
				<m n=":value"><e>cast 0x26</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ActionTrace>
		<ActionStartDrag public="1" get="inline" set="null" expr="cast 0x27" line="68" static="1">
			<x path="format.as1.ActionCode"/>
			<meta>
				<m n=":value"><e>cast 0x27</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ActionStartDrag>
		<ActionEndDrag public="1" get="inline" set="null" expr="cast 0x28" line="69" static="1">
			<x path="format.as1.ActionCode"/>
			<meta>
				<m n=":value"><e>cast 0x28</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ActionEndDrag>
		<ActionStringLess public="1" get="inline" set="null" expr="cast 0x29" line="70" static="1">
			<x path="format.as1.ActionCode"/>
			<meta>
				<m n=":value"><e>cast 0x29</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ActionStringLess>
		<ActionThrow public="1" get="inline" set="null" expr="cast 0x2A" line="71" static="1">
			<x path="format.as1.ActionCode"/>
			<meta>
				<m n=":value"><e>cast 0x2A</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ActionThrow>
		<ActionCastOp public="1" get="inline" set="null" expr="cast 0x2B" line="72" static="1">
			<x path="format.as1.ActionCode"/>
			<meta>
				<m n=":value"><e>cast 0x2B</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ActionCastOp>
		<ActionImplementsOp public="1" get="inline" set="null" expr="cast 0x2C" line="73" static="1">
			<x path="format.as1.ActionCode"/>
			<meta>
				<m n=":value"><e>cast 0x2C</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ActionImplementsOp>
		<ActionFSCommand2 public="1" get="inline" set="null" expr="cast 0x2D" line="74" static="1">
			<x path="format.as1.ActionCode"/>
			<meta>
				<m n=":value"><e>cast 0x2D</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ActionFSCommand2>
		<ActionRandomNumber public="1" get="inline" set="null" expr="cast 0x30" line="75" static="1">
			<x path="format.as1.ActionCode"/>
			<meta>
				<m n=":value"><e>cast 0x30</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ActionRandomNumber>
		<ActionMBStringLength public="1" get="inline" set="null" expr="cast 0x31" line="76" static="1">
			<x path="format.as1.ActionCode"/>
			<meta>
				<m n=":value"><e>cast 0x31</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ActionMBStringLength>
		<ActionCharToAscii public="1" get="inline" set="null" expr="cast 0x32" line="77" static="1">
			<x path="format.as1.ActionCode"/>
			<meta>
				<m n=":value"><e>cast 0x32</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ActionCharToAscii>
		<ActionAsciiToChar public="1" get="inline" set="null" expr="cast 0x33" line="78" static="1">
			<x path="format.as1.ActionCode"/>
			<meta>
				<m n=":value"><e>cast 0x33</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ActionAsciiToChar>
		<ActionGetTime public="1" get="inline" set="null" expr="cast 0x34" line="79" static="1">
			<x path="format.as1.ActionCode"/>
			<meta>
				<m n=":value"><e>cast 0x34</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ActionGetTime>
		<ActionMBStringExtract public="1" get="inline" set="null" expr="cast 0x35" line="80" static="1">
			<x path="format.as1.ActionCode"/>
			<meta>
				<m n=":value"><e>cast 0x35</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ActionMBStringExtract>
		<ActionMBCharToAscii public="1" get="inline" set="null" expr="cast 0x36" line="81" static="1">
			<x path="format.as1.ActionCode"/>
			<meta>
				<m n=":value"><e>cast 0x36</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ActionMBCharToAscii>
		<ActionMBAsciiToChar public="1" get="inline" set="null" expr="cast 0x37" line="82" static="1">
			<x path="format.as1.ActionCode"/>
			<meta>
				<m n=":value"><e>cast 0x37</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ActionMBAsciiToChar>
		<ActionDelete public="1" get="inline" set="null" expr="cast 0x3A" line="83" static="1">
			<x path="format.as1.ActionCode"/>
			<meta>
				<m n=":value"><e>cast 0x3A</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ActionDelete>
		<ActionDelete2 public="1" get="inline" set="null" expr="cast 0x3B" line="84" static="1">
			<x path="format.as1.ActionCode"/>
			<meta>
				<m n=":value"><e>cast 0x3B</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ActionDelete2>
		<ActionDefineLocal public="1" get="inline" set="null" expr="cast 0x3C" line="85" static="1">
			<x path="format.as1.ActionCode"/>
			<meta>
				<m n=":value"><e>cast 0x3C</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ActionDefineLocal>
		<ActionCallFunction public="1" get="inline" set="null" expr="cast 0x3D" line="86" static="1">
			<x path="format.as1.ActionCode"/>
			<meta>
				<m n=":value"><e>cast 0x3D</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ActionCallFunction>
		<ActionReturn public="1" get="inline" set="null" expr="cast 0x3E" line="87" static="1">
			<x path="format.as1.ActionCode"/>
			<meta>
				<m n=":value"><e>cast 0x3E</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ActionReturn>
		<ActionModulo public="1" get="inline" set="null" expr="cast 0x3F" line="88" static="1">
			<x path="format.as1.ActionCode"/>
			<meta>
				<m n=":value"><e>cast 0x3F</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ActionModulo>
		<ActionNewObject public="1" get="inline" set="null" expr="cast 0x40" line="89" static="1">
			<x path="format.as1.ActionCode"/>
			<meta>
				<m n=":value"><e>cast 0x40</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ActionNewObject>
		<ActionDefineLocal2 public="1" get="inline" set="null" expr="cast 0x41" line="90" static="1">
			<x path="format.as1.ActionCode"/>
			<meta>
				<m n=":value"><e>cast 0x41</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ActionDefineLocal2>
		<ActionInitArray public="1" get="inline" set="null" expr="cast 0x42" line="91" static="1">
			<x path="format.as1.ActionCode"/>
			<meta>
				<m n=":value"><e>cast 0x42</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ActionInitArray>
		<ActionInitObject public="1" get="inline" set="null" expr="cast 0x43" line="92" static="1">
			<x path="format.as1.ActionCode"/>
			<meta>
				<m n=":value"><e>cast 0x43</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ActionInitObject>
		<ActionTypeOf public="1" get="inline" set="null" expr="cast 0x44" line="93" static="1">
			<x path="format.as1.ActionCode"/>
			<meta>
				<m n=":value"><e>cast 0x44</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ActionTypeOf>
		<ActionTargetPath public="1" get="inline" set="null" expr="cast 0x45" line="94" static="1">
			<x path="format.as1.ActionCode"/>
			<meta>
				<m n=":value"><e>cast 0x45</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ActionTargetPath>
		<ActionEnumerate public="1" get="inline" set="null" expr="cast 0x46" line="95" static="1">
			<x path="format.as1.ActionCode"/>
			<meta>
				<m n=":value"><e>cast 0x46</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ActionEnumerate>
		<ActionAdd2 public="1" get="inline" set="null" expr="cast 0x47" line="96" static="1">
			<x path="format.as1.ActionCode"/>
			<meta>
				<m n=":value"><e>cast 0x47</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ActionAdd2>
		<ActionLess2 public="1" get="inline" set="null" expr="cast 0x48" line="97" static="1">
			<x path="format.as1.ActionCode"/>
			<meta>
				<m n=":value"><e>cast 0x48</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ActionLess2>
		<ActionEquals2 public="1" get="inline" set="null" expr="cast 0x49" line="98" static="1">
			<x path="format.as1.ActionCode"/>
			<meta>
				<m n=":value"><e>cast 0x49</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ActionEquals2>
		<ActionToNumber public="1" get="inline" set="null" expr="cast 0x4A" line="99" static="1">
			<x path="format.as1.ActionCode"/>
			<meta>
				<m n=":value"><e>cast 0x4A</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ActionToNumber>
		<ActionToString public="1" get="inline" set="null" expr="cast 0x4B" line="100" static="1">
			<x path="format.as1.ActionCode"/>
			<meta>
				<m n=":value"><e>cast 0x4B</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ActionToString>
		<ActionPushDuplicate public="1" get="inline" set="null" expr="cast 0x4C" line="101" static="1">
			<x path="format.as1.ActionCode"/>
			<meta>
				<m n=":value"><e>cast 0x4C</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ActionPushDuplicate>
		<ActionStackSwap public="1" get="inline" set="null" expr="cast 0x4D" line="102" static="1">
			<x path="format.as1.ActionCode"/>
			<meta>
				<m n=":value"><e>cast 0x4D</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ActionStackSwap>
		<ActionGetMember public="1" get="inline" set="null" expr="cast 0x4E" line="103" static="1">
			<x path="format.as1.ActionCode"/>
			<meta>
				<m n=":value"><e>cast 0x4E</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ActionGetMember>
		<ActionSetMember public="1" get="inline" set="null" expr="cast 0x4F" line="104" static="1">
			<x path="format.as1.ActionCode"/>
			<meta>
				<m n=":value"><e>cast 0x4F</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ActionSetMember>
		<ActionIncrement public="1" get="inline" set="null" expr="cast 0x50" line="105" static="1">
			<x path="format.as1.ActionCode"/>
			<meta>
				<m n=":value"><e>cast 0x50</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ActionIncrement>
		<ActionDecrement public="1" get="inline" set="null" expr="cast 0x51" line="106" static="1">
			<x path="format.as1.ActionCode"/>
			<meta>
				<m n=":value"><e>cast 0x51</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ActionDecrement>
		<ActionCallMethod public="1" get="inline" set="null" expr="cast 0x52" line="107" static="1">
			<x path="format.as1.ActionCode"/>
			<meta>
				<m n=":value"><e>cast 0x52</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ActionCallMethod>
		<ActionNewMethod public="1" get="inline" set="null" expr="cast 0x53" line="108" static="1">
			<x path="format.as1.ActionCode"/>
			<meta>
				<m n=":value"><e>cast 0x53</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ActionNewMethod>
		<ActionInstanceOf public="1" get="inline" set="null" expr="cast 0x54" line="109" static="1">
			<x path="format.as1.ActionCode"/>
			<meta>
				<m n=":value"><e>cast 0x54</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ActionInstanceOf>
		<ActionEnumerate2 public="1" get="inline" set="null" expr="cast 0x55" line="110" static="1">
			<x path="format.as1.ActionCode"/>
			<meta>
				<m n=":value"><e>cast 0x55</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ActionEnumerate2>
		<ActionBitAnd public="1" get="inline" set="null" expr="cast 0x60" line="111" static="1">
			<x path="format.as1.ActionCode"/>
			<meta>
				<m n=":value"><e>cast 0x60</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ActionBitAnd>
		<ActionBitOr public="1" get="inline" set="null" expr="cast 0x61" line="112" static="1">
			<x path="format.as1.ActionCode"/>
			<meta>
				<m n=":value"><e>cast 0x61</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ActionBitOr>
		<ActionBitXor public="1" get="inline" set="null" expr="cast 0x62" line="113" static="1">
			<x path="format.as1.ActionCode"/>
			<meta>
				<m n=":value"><e>cast 0x62</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ActionBitXor>
		<ActionBitLShift public="1" get="inline" set="null" expr="cast 0x63" line="114" static="1">
			<x path="format.as1.ActionCode"/>
			<meta>
				<m n=":value"><e>cast 0x63</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ActionBitLShift>
		<ActionBitRShift public="1" get="inline" set="null" expr="cast 0x64" line="115" static="1">
			<x path="format.as1.ActionCode"/>
			<meta>
				<m n=":value"><e>cast 0x64</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ActionBitRShift>
		<ActionBitURShift public="1" get="inline" set="null" expr="cast 0x65" line="116" static="1">
			<x path="format.as1.ActionCode"/>
			<meta>
				<m n=":value"><e>cast 0x65</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ActionBitURShift>
		<ActionStrictEquals public="1" get="inline" set="null" expr="cast 0x66" line="117" static="1">
			<x path="format.as1.ActionCode"/>
			<meta>
				<m n=":value"><e>cast 0x66</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ActionStrictEquals>
		<ActionGreater public="1" get="inline" set="null" expr="cast 0x67" line="118" static="1">
			<x path="format.as1.ActionCode"/>
			<meta>
				<m n=":value"><e>cast 0x67</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ActionGreater>
		<ActionStringGreater public="1" get="inline" set="null" expr="cast 0x68" line="119" static="1">
			<x path="format.as1.ActionCode"/>
			<meta>
				<m n=":value"><e>cast 0x68</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ActionStringGreater>
		<ActionExtends public="1" get="inline" set="null" expr="cast 0x69" line="120" static="1">
			<x path="format.as1.ActionCode"/>
			<meta>
				<m n=":value"><e>cast 0x69</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ActionExtends>
		<ActionGotoFrame public="1" get="inline" set="null" expr="cast 0x81" line="121" static="1">
			<x path="format.as1.ActionCode"/>
			<meta>
				<m n=":value"><e>cast 0x81</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ActionGotoFrame>
		<ActionGetURL public="1" get="inline" set="null" expr="cast 0x83" line="122" static="1">
			<x path="format.as1.ActionCode"/>
			<meta>
				<m n=":value"><e>cast 0x83</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ActionGetURL>
		<ActionStoreRegister public="1" get="inline" set="null" expr="cast 0x87" line="123" static="1">
			<x path="format.as1.ActionCode"/>
			<meta>
				<m n=":value"><e>cast 0x87</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ActionStoreRegister>
		<ActionConstantPool public="1" get="inline" set="null" expr="cast 0x88" line="124" static="1">
			<x path="format.as1.ActionCode"/>
			<meta>
				<m n=":value"><e>cast 0x88</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ActionConstantPool>
		<ActionWaitForFrame public="1" get="inline" set="null" expr="cast 0x8A" line="125" static="1">
			<x path="format.as1.ActionCode"/>
			<meta>
				<m n=":value"><e>cast 0x8A</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ActionWaitForFrame>
		<ActionSetTarget public="1" get="inline" set="null" expr="cast 0x8B" line="126" static="1">
			<x path="format.as1.ActionCode"/>
			<meta>
				<m n=":value"><e>cast 0x8B</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ActionSetTarget>
		<ActionGoToLabel public="1" get="inline" set="null" expr="cast 0x8C" line="127" static="1">
			<x path="format.as1.ActionCode"/>
			<meta>
				<m n=":value"><e>cast 0x8C</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ActionGoToLabel>
		<ActionWaitForFrame2 public="1" get="inline" set="null" expr="cast 0x8D" line="128" static="1">
			<x path="format.as1.ActionCode"/>
			<meta>
				<m n=":value"><e>cast 0x8D</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ActionWaitForFrame2>
		<ActionDefineFunction2 public="1" get="inline" set="null" expr="cast 0x8E" line="129" static="1">
			<x path="format.as1.ActionCode"/>
			<meta>
				<m n=":value"><e>cast 0x8E</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ActionDefineFunction2>
		<ActionTry public="1" get="inline" set="null" expr="cast 0x8F" line="130" static="1">
			<x path="format.as1.ActionCode"/>
			<meta>
				<m n=":value"><e>cast 0x8F</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ActionTry>
		<ActionWith public="1" get="inline" set="null" expr="cast 0x94" line="131" static="1">
			<x path="format.as1.ActionCode"/>
			<meta>
				<m n=":value"><e>cast 0x94</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ActionWith>
		<ActionPush public="1" get="inline" set="null" expr="cast 0x96" line="132" static="1">
			<x path="format.as1.ActionCode"/>
			<meta>
				<m n=":value"><e>cast 0x96</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ActionPush>
		<ActionJump public="1" get="inline" set="null" expr="cast 0x99" line="133" static="1">
			<x path="format.as1.ActionCode"/>
			<meta>
				<m n=":value"><e>cast 0x99</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ActionJump>
		<ActionGetURL2 public="1" get="inline" set="null" expr="cast 0x9A" line="134" static="1">
			<x path="format.as1.ActionCode"/>
			<meta>
				<m n=":value"><e>cast 0x9A</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ActionGetURL2>
		<ActionDefineFunction public="1" get="inline" set="null" expr="cast 0x9B" line="135" static="1">
			<x path="format.as1.ActionCode"/>
			<meta>
				<m n=":value"><e>cast 0x9B</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ActionDefineFunction>
		<ActionIf public="1" get="inline" set="null" expr="cast 0x9D" line="136" static="1">
			<x path="format.as1.ActionCode"/>
			<meta>
				<m n=":value"><e>cast 0x9D</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ActionIf>
		<ActionCall public="1" get="inline" set="null" expr="cast 0x9E" line="137" static="1">
			<x path="format.as1.ActionCode"/>
			<meta>
				<m n=":value"><e>cast 0x9E</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ActionCall>
		<ActionGotoFrame2 public="1" get="inline" set="null" expr="cast 0x9F" line="138" static="1">
			<x path="format.as1.ActionCode"/>
			<meta>
				<m n=":value"><e>cast 0x9F</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ActionGotoFrame2>
		<meta><m n=":enum"/></meta>
	</class>
	<enum path="format.as1.Action" params="" file="format/as1/Data.hx" module="format.as1.Data">
		<AEnd/>
		<ANextFrame/>
		<APrevFrame/>
		<APlay/>
		<AStop/>
		<AToggleHighQuality/>
		<AStopSounds/>
		<AAddNum/>
		<ASubtract/>
		<AMultiply/>
		<ADivide/>
		<ACompareNum/>
		<AEqualNum/>
		<ALogicalAnd/>
		<ALogicalOr/>
		<ANot/>
		<AStringEqual/>
		<AStringLength/>
		<ASubString/>
		<APop/>
		<AToInt/>
		<AEval/>
		<ASet/>
		<ATellTarget/>
		<AStringAdd/>
		<AGetProperty/>
		<ASetProperty/>
		<ADuplicateMC/>
		<ARemoveMC/>
		<ATrace/>
		<AStartDrag/>
		<AStopDrag/>
		<AStringCompare/>
		<AThrow/>
		<ACast/>
		<AImplements/>
		<AFSCommand2/>
		<ARandom/>
		<AMBStringLength/>
		<AOrd/>
		<AChr/>
		<AGetTimer/>
		<AMBStringSub/>
		<AMBOrd/>
		<AMBChr/>
		<ADeleteObj/>
		<ADelete/>
		<ALocalAssign/>
		<ACall/>
		<AReturn/>
		<AMod/>
		<ANew/>
		<ALocalVar/>
		<AInitArray/>
		<AObject/>
		<ATypeOf/>
		<ATargetPath/>
		<AEnum/>
		<AAdd/>
		<ACompare/>
		<AEqual/>
		<AToNumber/>
		<AToString/>
		<ADup/>
		<ASwap/>
		<AObjGet/>
		<AObjSet/>
		<AIncrement/>
		<ADecrement/>
		<AObjCall/>
		<ANewMethod/>
		<AInstanceOf/>
		<AEnum2/>
		<AAnd/>
		<AOr/>
		<AXor/>
		<AShl/>
		<AShr/>
		<AAsr/>
		<APhysEqual/>
		<AGreater/>
		<AStringGreater/>
		<AExtends/>
		<AGotoFrame a="f"><x path="Int"/></AGotoFrame>
		<AGetURL a="url:target">
			<c path="String"/>
			<c path="String"/>
		</AGetURL>
		<ASetReg a="reg"><x path="Int"/></ASetReg>
		<AStringPool a="strings"><c path="Array"><c path="String"/></c></AStringPool>
		<AWaitForFrame a="frame:skip">
			<x path="Int"/>
			<x path="Int"/>
		</AWaitForFrame>
		<ASetTarget a="target"><c path="String"/></ASetTarget>
		<AGotoLabel a="frame"><c path="String"/></AGotoLabel>
		<AWaitForFrame2 a="frame"><x path="Int"/></AWaitForFrame2>
		<AFunction2 a="infos"><t path="format.as1.Function2Infos"/></AFunction2>
		<ATry a="infos"><t path="format.as1.TryInfos"/></ATry>
		<AWith a="value"><x path="Int"/></AWith>
		<APush a="items"><c path="Array"><e path="format.as1.PushItem"/></c></APush>
		<AJump a="delta"><x path="Int"/></AJump>
		<AGetURL2 a="v"><x path="Int"/></AGetURL2>
		<AFunction a="infos"><t path="format.as1.FunctionInfos"/></AFunction>
		<ACondJump a="delta"><x path="Int"/></ACondJump>
		<ACallFrame/>
		<AGotoFrame2 a="play:delta">
			<x path="Bool"/>
			<x path="Null"><x path="Int"/></x>
		</AGotoFrame2>
		<AUnknown a="id:data">
			<x path="Int"/>
			<c path="haxe.io.Bytes"/>
		</AUnknown>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<enum path="format.as1.PushItem" params="" file="format/as1/Data.hx" module="format.as1.Data">
		<PString a="s"><c path="String"/></PString>
		<PFloat a="f"><x path="Float"/></PFloat>
		<PNull/>
		<PUndefined/>
		<PReg a="r"><x path="Int"/></PReg>
		<PBool a="b"><x path="Bool"/></PBool>
		<PDouble a="f"><x path="Float"/></PDouble>
		<PInt a="i"><x path="Int"/></PInt>
		<PStack a="p"><x path="Int"/></PStack>
		<PStack2 a="p"><x path="Int"/></PStack2>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<typedef path="format.as1.FunctionInfos" params="" file="format/as1/Data.hx" module="format.as1.Data"><a>
	<name><c path="String"/></name>
	<codeLength><x path="Int"/></codeLength>
	<args><c path="Array"><c path="String"/></c></args>
</a></typedef>
	<typedef path="format.as1.Function2Infos" params="" file="format/as1/Data.hx" module="format.as1.Data"><a>
	<name><c path="String"/></name>
	<nRegisters><x path="Int"/></nRegisters>
	<flags><x path="Int"/></flags>
	<codeLength><x path="Int"/></codeLength>
	<args><c path="Array"><a>
	<reg><x path="Int"/></reg>
	<name><c path="String"/></name>
</a></c></args>
</a></typedef>
	<enum path="format.as1.TryStyle" params="" file="format/as1/Data.hx" module="format.as1.Data">
		<TryVariable a="s"><c path="String"/></TryVariable>
		<TryRegister a="r"><x path="Int"/></TryRegister>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<typedef path="format.as1.TryInfos" params="" file="format/as1/Data.hx" module="format.as1.Data"><a>
	<tryLength><x path="Int"/></tryLength>
	<style><e path="format.as1.TryStyle"/></style>
	<finallyLength><x path="Null"><x path="Int"/></x></finallyLength>
	<catchLength><x path="Null"><x path="Int"/></x></catchLength>
</a></typedef>
	<typedef path="format.as1.AS1" params="" file="format/as1/Data.hx" module="format.as1.Data"><c path="Array"><e path="format.as1.Action"/></c></typedef>
	<class path="format.as1.Reader" params="" file="format/as1/Reader.hx">
		<i><c path="haxe.io.Input"/></i>
		<tmp><c path="haxe.io.Bytes"/></tmp>
		<read public="1" set="method" line="41"><f a=""><t path="format.as1.AS1"/></f></read>
		<readString get="inline" set="null" line="52"><f a=""><c path="String"/></f></readString>
		<readUTF8String set="method" line="56"><f a=""><c path="String"/></f></readUTF8String>
		<readDouble set="method" line="66"><f a=""><x path="Float"/></f></readDouble>
		<parsePushItems set="method" line="78"><f a="data">
	<c path="haxe.io.Bytes"/>
	<c path="Array"><e path="format.as1.PushItem"/></c>
</f></parsePushItems>
		<readAction set="method" line="107"><f a=""><e path="format.as1.Action"/></f></readAction>
		<new public="1" set="method" line="36"><f a="i">
	<c path="haxe.io.Input"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="format.as1.Writer" params="" file="format/as1/Writer.hx">
		<o><c path="haxe.io.Output"/></o>
		<old><c path="haxe.io.Output"/></old>
		<tmp><c path="haxe.io.BytesOutput"/></tmp>
		<write public="1" set="method" line="41"><f a="actions">
	<t path="format.as1.AS1"/>
	<x path="Void"/>
</f></write>
		<openTmp set="method" line="49"><f a=""><x path="Void"/></f></openTmp>
		<closeTmp get="inline" set="null" line="55"><f a=""><c path="haxe.io.Bytes"/></f></closeTmp>
		<closeAndWriteTmp set="method" line="61"><f a=""><x path="Void"/></f></closeAndWriteTmp>
		<writeString get="inline" set="null" line="67"><f a="s">
	<c path="String"/>
	<x path="Void"/>
</f></writeString>
		<writeDouble set="method" line="72"><f a="f">
	<x path="Float"/>
	<x path="Void"/>
</f></writeDouble>
		<writePushItems set="method" line="86"><f a="items">
	<c path="Array"><e path="format.as1.PushItem"/></c>
	<x path="Void"/>
</f></writePushItems>
		<writeActionCode get="inline" set="null" line="130"><f a="actionCode">
	<x path="format.as1.ActionCode"/>
	<x path="Void"/>
</f></writeActionCode>
		<writeAction set="method" line="134"><f a="action">
	<e path="format.as1.Action"/>
	<x path="Void"/>
</f></writeAction>
		<new public="1" set="method" line="37"><f a="o">
	<c path="haxe.io.Output"/>
	<x path="Void"/>
</f></new>
	</class>
	<typedef path="format.bmp.Data" params="" file="format/bmp/Data.hx"><a>
	<pixels><c path="haxe.io.Bytes"/></pixels>
	<header><t path="format.bmp.Header"/></header>
</a></typedef>
	<typedef path="format.bmp.Header" params="" file="format/bmp/Data.hx" module="format.bmp.Data"><a>
	<width><x path="Int"/></width>
	<topToBottom><x path="Bool"/></topToBottom>
	<paddedStride><x path="Int"/></paddedStride>
	<height><x path="Int"/></height>
	<dataLength><x path="Int"/></dataLength>
	<bpp><x path="Int"/></bpp>
</a></typedef>
	<class path="format.bmp.Reader" params="" file="format/bmp/Reader.hx">
		<input><c path="haxe.io.Input"/></input>
		<read public="1" set="method" line="52">
			<f a=""><t path="format.bmp.Data"/></f>
			<haxe_doc>* Only supports uncompressed 24bpp bitmaps (the most common format).
	 * 
	 * The returned bytes in `Data.pixels` will be in BGR order, and with padding (if present).
	 * 
	 * @see https://msdn.microsoft.com/en-us/library/windows/desktop/dd318229(v=vs.85).aspx
	 * @see https://en.wikipedia.org/wiki/BMP_file_format#Bitmap_file_header</haxe_doc>
		</read>
		<new public="1" set="method" line="40"><f a="i">
	<c path="haxe.io.Input"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="format.bmp.Tools" params="" file="format/bmp/Tools.hx">
		<ARGB_MAP set="null" expr="[0, 1, 2, 3]" line="36" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>[0, 1, 2, 3]</e></m></meta>
		</ARGB_MAP>
		<BGRA_MAP set="null" expr="[3, 2, 1, 0]" line="37" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>[3, 2, 1, 0]</e></m></meta>
		</BGRA_MAP>
		<extractBGRA public="1" get="inline" set="null" line="42" static="1">
			<f a="bmp">
				<t path="format.bmp.Data"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>Extract BMP pixel data (24bpp in BGR format) and expands it to BGRA, removing any padding in the process.</haxe_doc>
		</extractBGRA>
		<extractARGB public="1" get="inline" set="null" line="49" static="1">
			<f a="bmp">
				<t path="format.bmp.Data"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>Extract BMP pixel data (24bpp in BGR format) and converts it to ARGB.</haxe_doc>
		</extractARGB>
		<buildFromBGRA public="1" get="inline" set="null" line="56" static="1">
			<f a="width:height:srcBytes:?topToBottom" v=":::false">
				<x path="Int"/>
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
				<x path="Bool"/>
				<t path="format.bmp.Data"/>
			</f>
			<meta><m n=":value"><e>{ topToBottom : false }</e></m></meta>
			<haxe_doc>Creates BMP data from bytes in BGRA format for each pixel.</haxe_doc>
		</buildFromBGRA>
		<buildFromARGB public="1" get="inline" set="null" line="63" static="1">
			<f a="width:height:srcBytes:?topToBottom" v=":::false">
				<x path="Int"/>
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
				<x path="Bool"/>
				<t path="format.bmp.Data"/>
			</f>
			<meta><m n=":value"><e>{ topToBottom : false }</e></m></meta>
			<haxe_doc>Creates BMP data from bytes in ARGB format for each pixel.</haxe_doc>
		</buildFromARGB>
		<computePaddedStride public="1" get="inline" set="null" line="67" static="1"><f a="width:bpp">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></computePaddedStride>
		<_extract32 set="method" line="73" static="1">
			<f a="bmp:channelMap:?alpha" v="::0xFF">
				<t path="format.bmp.Data"/>
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":value"><e>{ alpha : 0xFF }</e></m></meta>
		</_extract32>
		<_buildFrom32 set="method" line="110" static="1">
			<f a="width:height:srcBytes:channelMap:?topToBottom" v="::::false">
				<x path="Int"/>
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
				<c path="Array"><x path="Int"/></c>
				<x path="Bool"/>
				<t path="format.bmp.Data"/>
			</f>
			<meta><m n=":value"><e>{ topToBottom : false }</e></m></meta>
		</_buildFrom32>
	</class>
	<class path="format.bmp.Writer" params="" file="format/bmp/Writer.hx">
		<DATA_OFFSET expr="0x36" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x36</e></m></meta>
		</DATA_OFFSET>
		<output><c path="haxe.io.Output"/></output>
		<write public="1" set="method" line="49">
			<f a="bmp">
				<t path="format.bmp.Data"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Specs: http://s223767089.online.de/en/file-format-bmp</haxe_doc>
		</write>
		<new public="1" set="method" line="42"><f a="o">
	<c path="haxe.io.Output"/>
	<x path="Void"/>
</f></new>
	</class>
	<typedef path="format.elf.Address" params="" file="format/elf/Data.hx" module="format.elf.Data"><x path="haxe.Int64"/></typedef>
	<typedef path="format.elf.Header" params="" file="format/elf/Data.hx" module="format.elf.Data"><a>
	<sectionNameIndex><x path="Int"/></sectionNameIndex>
	<sectionHeaderSize><x path="Int"/></sectionHeaderSize>
	<sectionHeaderEntries><x path="Int"/></sectionHeaderEntries>
	<sectionHeader><t path="format.elf.Address"/></sectionHeader>
	<programHeaderSize><x path="Int"/></programHeaderSize>
	<programHeaderEntries><x path="Int"/></programHeaderEntries>
	<programHeader><t path="format.elf.Address"/></programHeader>
	<isBigEndian><x path="Bool"/></isBigEndian>
	<is64><x path="Bool"/></is64>
	<headerSize><x path="Int"/></headerSize>
	<flags><x path="Int"/></flags>
	<entryPoint><t path="format.elf.Address"/></entryPoint>
	<elfVersion><x path="Int"/></elfVersion>
	<elfType><x path="Int"/></elfType>
	<elfInstruction><x path="Int"/></elfInstruction>
	<abiVersion><x path="Int"/></abiVersion>
	<abiSubVersion><x path="Int"/></abiSubVersion>
</a></typedef>
	<typedef path="format.elf.SectionHeader" params="" file="format/elf/Data.hx" module="format.elf.Data"><a>
	<type><x path="Int"/></type>
	<size><x path="haxe.Int64"/></size>
	<offset><t path="format.elf.Address"/></offset>
	<nameIndex><x path="Int"/></nameIndex>
	<link><x path="Int"/></link>
	<info><x path="Int"/></info>
	<flags><x path="haxe.Int64"/></flags>
	<entSize><x path="Int"/></entSize>
	<addressAlign><x path="Int"/></addressAlign>
	<address><t path="format.elf.Address"/></address>
</a></typedef>
	<typedef path="format.elf.Data" params="" file="format/elf/Data.hx"><a>
	<sections><c path="Array"><t path="format.elf.SectionHeader"/></c></sections>
	<header><t path="format.elf.Header"/></header>
	<data><c path="haxe.io.Bytes"/></data>
</a></typedef>
	<class path="format.elf.Reader" params="" file="format/elf/Reader.hx">
		<i><c path="haxe.io.Input"/></i>
		<is64><x path="Bool"/></is64>
		<data><c path="haxe.io.Bytes"/></data>
		<read public="1" set="method" line="14"><f a=""><t path="format.elf.Data"/></f></read>
		<readAddress set="method" line="25"><f a=""><t path="format.elf.Address"/></f></readAddress>
		<read64 get="inline" set="null" line="29"><f a=""><t path="format.elf.Address"/></f></read64>
		<readSectionHeader set="method" line="33"><f a=""><a>
	<type><x path="Int"/></type>
	<size><t path="format.elf.Address"/></size>
	<offset><t path="format.elf.Address"/></offset>
	<nameIndex><x path="Int"/></nameIndex>
	<link><x path="Int"/></link>
	<info><x path="Int"/></info>
	<flags><t path="format.elf.Address"/></flags>
	<entSize><x path="Int"/></entSize>
	<addressAlign><x path="Int"/></addressAlign>
	<address><t path="format.elf.Address"/></address>
</a></f></readSectionHeader>
		<readHeader set="method" line="48"><f a=""><t path="format.elf.Header"/></f></readHeader>
		<new public="1" set="method" line="10"><f a="i">
	<c path="haxe.io.Input"/>
	<x path="Void"/>
</f></new>
	</class>
	<typedef path="format.flv.Header" params="" file="format/flv/Data.hx" module="format.flv.Data"><a>
	<hasVideo><x path="Bool"/></hasVideo>
	<hasMeta><x path="Bool"/></hasMeta>
	<hasAudio><x path="Bool"/></hasAudio>
</a></typedef>
	<enum path="format.flv.Data" params="" file="format/flv/Data.hx">
		<FLVAudio a="data:time">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
		</FLVAudio>
		<FLVVideo a="data:time">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
		</FLVVideo>
		<FLVMeta a="data:time">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
		</FLVMeta>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<class path="format.flv.Reader" params="" file="format/flv/Reader.hx">
		<ch><c path="haxe.io.Input"/></ch>
		<close public="1" set="method" line="39"><f a=""><x path="Void"/></f></close>
		<readInt get="inline" set="null" line="43"><f a=""><x path="Int"/></f></readInt>
		<readHeader public="1" set="method" line="51"><f a=""><t path="format.flv.Header"/></f></readHeader>
		<readChunk public="1" set="method" line="72"><f a=""><x path="Null"><e path="format.flv.Data"/></x></f></readChunk>
		<new public="1" set="method" line="34"><f a="i">
	<c path="haxe.io.Input"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="format.flv.Tools" params="" file="format/flv/Tools.hx"><isVideoKeyFrame public="1" set="method" line="31" static="1"><f a="data">
	<c path="haxe.io.Bytes"/>
	<x path="Bool"/>
</f></isVideoKeyFrame></class>
	<class path="format.flv.Writer" params="" file="format/flv/Writer.hx">
		<ch><c path="haxe.io.Output"/></ch>
		<close public="1" set="method" line="39"><f a=""><x path="Void"/></f></close>
		<writeHeader public="1" set="method" line="43"><f a="h">
	<t path="format.flv.Header"/>
	<x path="Void"/>
</f></writeHeader>
		<writeChunk public="1" set="method" line="56"><f a="chunk">
	<e path="format.flv.Data"/>
	<x path="Void"/>
</f></writeChunk>
		<new public="1" set="method" line="34"><f a="o">
	<c path="haxe.io.Output"/>
	<x path="Void"/>
</f></new>
	</class>
	<typedef path="format.gif.Data" params="" file="format/gif/Data.hx">
		<a>
			<version>
				<e path="format.gif.Version"/>
				<haxe_doc>* Gif version. There is only 2 Gif version exists. 87a and 89a.
   * 87a have less features and does not support any extensions.
   * Unknown version is adviced to be interpreted as newest (89a) official version.</haxe_doc>
			</version>
			<logicalScreenDescriptor>
				<t path="format.gif.LogicalScreenDescriptor"/>
				<haxe_doc>* Information about logical screen of Gif that provides basic information about Gif.</haxe_doc>
			</logicalScreenDescriptor>
			<globalColorTable>
				<x path="Null"><t path="format.gif.ColorTable"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Global color table used for Gif. Present only if Logical Screen Descriptor contained global color table flag.
   * Note that this color table not always present since frames can contain local color tables that overrides global color table.</haxe_doc>
			</globalColorTable>
			<blocks>
				<t path="List"><e path="format.gif.Block"/></t>
				<haxe_doc>* List of Gif data blocks.</haxe_doc>
			</blocks>
		</a>
		<haxe_doc>* Gif data.</haxe_doc>
	</typedef>
	<enum path="format.gif.Block" params="" file="format/gif/Data.hx" module="format.gif.Data">
		<BFrame a="frame">
			<t path="format.gif.Frame"/>
			<haxe_doc>* Gif frame block.
   * Note that this block does not contain link to graphic control extension of Frame even if it is present. GraphicControl extension Block commonly present right before frame Block.</haxe_doc>
		</BFrame>
		<BExtension a="extension">
			<e path="format.gif.Extension"/>
			<haxe_doc>* Additional extension block. This Block does not supported in 87a Gif specification version.</haxe_doc>
		</BExtension>
		<BEOF><haxe_doc>* End of File block. Represents end of Gif data.</haxe_doc></BEOF>
		<haxe_doc>* Gif data block. Custom blocks are not supported.</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<enum path="format.gif.Extension" params="" file="format/gif/Data.hx" module="format.gif.Data">
		<EGraphicControl a="gce">
			<t path="format.gif.GraphicControlExtension"/>
			<haxe_doc>* Graphic Control extension gives additional control over next frame, like frame delay, disposal method, alpha channel and other information.</haxe_doc>
		</EGraphicControl>
		<EComment a="text">
			<c path="String"/>
			<haxe_doc>* Commentary extension. Not show up as any visual, just a text in file.</haxe_doc>
		</EComment>
		<EText a="pte">
			<t path="format.gif.PlainTextExtension"/>
			<haxe_doc>* Text extension. Must work as text rendering on the image, but ignored by all major Gif decoders.</haxe_doc>
		</EText>
		<EApplicationExtension a="ext">
			<e path="format.gif.ApplicationExtension"/>
			<haxe_doc>* Application extension allow to insert additional application data into Gif. Mostly used app extension is NETSCAPE2.0 looping extension, used to set up amount of loops in frame.</haxe_doc>
		</EApplicationExtension>
		<EUnknown a="id:data">
			<x path="Int"/>
			<c path="haxe.io.Bytes"/>
			<haxe_doc>* Unknown extension.</haxe_doc>
		</EUnknown>
		<haxe_doc>* Extension block contains additional data about Gif image. This block does not supported by 87a version.</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<enum path="format.gif.ApplicationExtension" params="" file="format/gif/Data.hx" module="format.gif.Data">
		<AENetscapeLooping a="loops">
			<x path="Int"/>
			<haxe_doc>* NETSCAPE2.0 looping extension. Contains only amount of animation repeats.
   * Note that there is two NETSCAPE2.0 app extensions for Gif format and the type of extension is stored in first byte of data. Looping extension have ID 1.</haxe_doc>
		</AENetscapeLooping>
		<AEUnknown a="name:version:data">
			<c path="String"/>
			<c path="String"/>
			<c path="haxe.io.Bytes"/>
			<haxe_doc>* Unknown or unsupported app extension.</haxe_doc>
		</AEUnknown>
		<haxe_doc>* Application extension. Mostly used only for one reason - setting up loops count. There is exist other app extensions but they are really rare.</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<typedef path="format.gif.ColorTable" params="" file="format/gif/Data.hx" module="format.gif.Data">
		<c path="haxe.io.Bytes"/>
		<haxe_doc>* Typical color table for Gif image.
 * Can contain 2, 4, 8, 16, 32, 64, 128 or 256 colors.
 * Data stored in RGB format. Information about alpha channel provided by Graohic Control Extension.</haxe_doc>
	</typedef>
	<typedef path="format.gif.Frame" params="" file="format/gif/Data.hx" module="format.gif.Data">
		<a>
			<y>
				<x path="Int"/>
				<haxe_doc>* Y position of image on the Logical Screen</haxe_doc>
			</y>
			<x>
				<x path="Int"/>
				<haxe_doc>* X position of image on the Logical Screen</haxe_doc>
			</x>
			<width>
				<x path="Int"/>
				<haxe_doc>* Width of image in pixels</haxe_doc>
			</width>
			<sorted>
				<x path="Bool"/>
				<haxe_doc>* Is local color table sorted in order of decreasing priority?</haxe_doc>
			</sorted>
			<pixels>
				<c path="haxe.io.Bytes"/>
				<haxe_doc>* Pixel data of frame. Stored as Indexed colors, 1 byte per pixel.</haxe_doc>
			</pixels>
			<localColorTableSize>
				<x path="Int"/>
				<haxe_doc>* Size of local color table</haxe_doc>
			</localColorTableSize>
			<localColorTable>
				<x path="Bool"/>
				<haxe_doc>* Is this image uses local color table?</haxe_doc>
			</localColorTable>
			<interlaced>
				<x path="Bool"/>
				<haxe_doc>* Is this image written in interlace mode?
   * Note: The pixel data already deinterlaced and this flag presented only for information purpose (and for Writer when there is one).</haxe_doc>
			</interlaced>
			<height>
				<x path="Int"/>
				<haxe_doc>* Height of image in pixels</haxe_doc>
			</height>
			<colorTable>
				<t path="format.gif.ColorTable"/>
				<haxe_doc>* Local color table used by frame. Stored as 3-byte RGB colors. If value is null, must be used global color table.</haxe_doc>
			</colorTable>
		</a>
		<haxe_doc>* Single frame of the image.
 * Actually it's a merge of 3 consequent blocks:
 * 1. Image Descriptor.
 * Contains frame informations like position, size, existing of local color table and interlaced flag.
 * 2. [Local color table].
 * Only present if Image Descriptor contains local color table flag. Overrides global color table.
 * 3. Pixel data blocks.
 * LZW compressed pixel data.</haxe_doc>
	</typedef>
	<typedef path="format.gif.GraphicControlExtension" params="" file="format/gif/Data.hx" module="format.gif.Data">
		<a>
			<userInput>
				<x path="Bool"/>
				<haxe_doc>* Is image must wait for user input, before dispose?
   * This flag may be used by user-defined program but absolutely ignored by any Gif players.</haxe_doc>
			</userInput>
			<transparentIndex>
				<x path="Int"/>
				<haxe_doc>* Index in color table that used as transparent.</haxe_doc>
			</transparentIndex>
			<hasTransparentColor>
				<x path="Bool"/>
				<haxe_doc>* Is image have transparency?</haxe_doc>
			</hasTransparentColor>
			<disposalMethod>
				<e path="format.gif.DisposalMethod"/>
				<haxe_doc>* Disposal method of frame.</haxe_doc>
			</disposalMethod>
			<delay>
				<x path="Int"/>
				<haxe_doc>* Delay, before next image appears. Delay is in centiseconds (1 centisecond = 1/100 seconds).
   * Note: Some players (like FastStone) cut fraction of elapsed time when progressing to next frame which results in small timing error.
   * Recommended to use `time -= delay` instead of `time = 0`.</haxe_doc>
			</delay>
		</a>
		<haxe_doc>* Graphic Control Extension block, used for setting up disposal method, transparency, delay and user input.</haxe_doc>
	</typedef>
	<typedef path="format.gif.PlainTextExtension" params="" file="format/gif/Data.hx" module="format.gif.Data">
		<a>
			<textGridY>
				<x path="Int"/>
				<haxe_doc>* Y position of text grid on Logical Screen.</haxe_doc>
			</textGridY>
			<textGridX>
				<x path="Int"/>
				<haxe_doc>* X position of text grid on Logical Screen.</haxe_doc>
			</textGridX>
			<textGridWidth>
				<x path="Int"/>
				<haxe_doc>* Width of text grid in pixels.</haxe_doc>
			</textGridWidth>
			<textGridHeight>
				<x path="Int"/>
				<haxe_doc>* Height of text grid in pixels.</haxe_doc>
			</textGridHeight>
			<textForegroundColorIndex>
				<x path="Int"/>
				<haxe_doc>* Foreground/character color index.</haxe_doc>
			</textForegroundColorIndex>
			<textBackgroundColorIndex>
				<x path="Int"/>
				<haxe_doc>* Background color index.</haxe_doc>
			</textBackgroundColorIndex>
			<text>
				<c path="String"/>
				<haxe_doc>* Text to render.</haxe_doc>
			</text>
			<charCellWidth>
				<x path="Int"/>
				<haxe_doc>* Width of character cell in text grid.</haxe_doc>
			</charCellWidth>
			<charCellHeight>
				<x path="Int"/>
				<haxe_doc>* Height of character cell in text grid.</haxe_doc>
			</charCellHeight>
		</a>
		<haxe_doc>* Extension for rendering text on Gif logical screen. It does not supported by major Gif decoders.
 * Font and text size decision is left to decoder. (recommended to decide based on grid/cell size)
 * Text must be rendered with one character at cell.
 * It's recommended to replace any characters less than 0x20 and greater than 0xf7 to be rendered as Space (0x20)</haxe_doc>
	</typedef>
	<typedef path="format.gif.LogicalScreenDescriptor" params="" file="format/gif/Data.hx" module="format.gif.Data">
		<a>
			<width>
				<x path="Int"/>
				<haxe_doc>* Width of GIF image in pixels</haxe_doc>
			</width>
			<sorted>
				<x path="Bool"/>
				<haxe_doc>* Specification:
   * Indicates whether the Global Color Table is sorted.
     If the flag is set, the Global Color Table is sorted, in order of
     decreasing importance. Typically, the order would be decreasing
     frequency, with most frequent color first. This assists a decoder,
     with fewer available colors, in choosing the best subset of colors;
     the decoder may use an initial segment of the table to render the
     graphic.</haxe_doc>
			</sorted>
			<pixelAspectRatio>
				<x path="Float"/>
				<haxe_doc>* Factor used to compute an approximation of the aspect ratio of the pixel in the original image.</haxe_doc>
			</pixelAspectRatio>
			<height>
				<x path="Int"/>
				<haxe_doc>* Height of GIF image in pixels</haxe_doc>
			</height>
			<hasGlobalColorTable>
				<x path="Bool"/>
				<haxe_doc>* Is this file uses global color table?</haxe_doc>
			</hasGlobalColorTable>
			<globalColorTableSize>
				<x path="Int"/>
				<haxe_doc>* Size of global color table.</haxe_doc>
			</globalColorTableSize>
			<colorResolution>
				<x path="Int"/>
				<haxe_doc>* Specification:
   * Number of bits per primary color available
     to the original image, minus 1. This value represents the size of
     the entire palette from which the colors in the graphic were
     selected, not the number of colors actually used in the graphic.
     For example, if the value in this field is 3, then the palette of
     the original image had 4 bits per primary color available to create
     the image.  This value should be set to indicate the richness of
     the original palette, even if not every color from the whole
     palette is available on the source machine.</haxe_doc>
			</colorResolution>
			<backgroundColorIndex>
				<x path="Int"/>
				<haxe_doc>* Background color index in global color table</haxe_doc>
			</backgroundColorIndex>
		</a>
		<haxe_doc>* Logical screen descriptor of GIF file.
 * Contains very basic information about Gif.</haxe_doc>
	</typedef>
	<enum path="format.gif.Version" params="" file="format/gif/Data.hx" module="format.gif.Data">
		<GIF87a><haxe_doc>* First version of Gif file format from May 1987.
   * 
   * Note: The checking of unsupported blocks disabled by default to save some time. To enable supported blocks check set `yagp_strict_version_check` debug variable.</haxe_doc></GIF87a>
		<GIF89a><haxe_doc>* Second and actual version of Gif file format from July 1989.</haxe_doc></GIF89a>
		<Unknown a="version">
			<c path="String"/>
			<haxe_doc>* Unknown version of Gif file.</haxe_doc>
		</Unknown>
		<haxe_doc>* Version of Gif file.  
 * The only 2 official versions is GIF87a and GIF89a.</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<enum path="format.gif.DisposalMethod" params="" file="format/gif/Data.hx" module="format.gif.Data">
		<UNSPECIFIED><haxe_doc>* The disposal method is unspecified. Action on demand of viewer.
   * 
   * Mostly interpreted as NO_ACTION.</haxe_doc></UNSPECIFIED>
		<NO_ACTION><haxe_doc>* No action required.</haxe_doc></NO_ACTION>
		<FILL_BACKGROUND><haxe_doc>* Fill frame rectangle with background color.
   * 
   * Usage note: 
   * Most renderers clears to transparency instead of filling background color, when frame's transparent color index not equals to background color index.</haxe_doc></FILL_BACKGROUND>
		<RENDER_PREVIOUS><haxe_doc>* Render previous state of gif as it before rendering disposing frame.</haxe_doc></RENDER_PREVIOUS>
		<UNDEFINED a="index">
			<x path="Int"/>
			<haxe_doc>* Reserved disposal methods.</haxe_doc>
		</UNDEFINED>
		<haxe_doc>* Disposal method of GIF frame.</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<class path="format.gif.Reader" params="" file="format/gif/Reader.hx">
		<i><c path="haxe.io.Input"/></i>
		<read public="1" set="method" line="22"><f a=""><t path="format.gif.Data"/></f></read>
		<readBlock set="method" line="80"><f a=""><e path="format.gif.Block"/></f></readBlock>
		<readImage set="method" line="98"><f a=""><e path="format.gif.Block"/></f></readImage>
		<readPixels set="method" line="129"><f a="width:height:interlaced">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<c path="haxe.io.Bytes"/>
</f></readPixels>
		<deinterlace set="method" line="236"><f a="input:output:step:y:offset:width:height">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></deinterlace>
		<readExtension set="method" line="247"><f a=""><e path="format.gif.Block"/></f></readExtension>
		<readApplicationExtension set="method" line="302"><f a=""><e path="format.gif.Block"/></f></readApplicationExtension>
		<readBlocks get="inline" set="null" line="315"><f a=""><c path="haxe.io.Bytes"/></f></readBlocks>
		<readColorTable set="method" line="332"><f a="size">
	<x path="Int"/>
	<t path="format.gif.ColorTable"/>
</f></readColorTable>
		<new public="1" set="method" line="16"><f a="i">
	<c path="haxe.io.Input"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>* ...
 * @author Yanrishatum</haxe_doc>
	</class>
	<class path="format.gif.Tools" params="" file="format/gif/Tools.hx">
		<framesCount public="1" set="method" line="16" static="1">
			<f a="data">
				<t path="format.gif.Data"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* Returns amount of frames in Gif data.</haxe_doc>
		</framesCount>
		<frame public="1" set="method" line="37" static="1">
			<f a="data:frameIndex">
				<t path="format.gif.Data"/>
				<x path="Int"/>
				<t path="format.gif.Frame"/>
			</f>
			<haxe_doc>* Returns frame at given index.
   * @param data Gif data.
   * @param frameIndex Index of frame.
   * @return Frame at given index or null, if there is no frame at that index.</haxe_doc>
		</frame>
		<graphicControl public="1" set="method" line="59" static="1">
			<f a="data:frameIndex">
				<t path="format.gif.Data"/>
				<x path="Int"/>
				<t path="format.gif.GraphicControlExtension"/>
			</f>
			<haxe_doc>* Returns Graphic Control extension for frame at given index.
   * @param data Gif data.
   * @param frameIndex Index of frame.
   * @return GCE extension if it is exists for given frame, null otherwise.</haxe_doc>
		</graphicControl>
		<extractBGRA public="1" set="method" line="90" static="1">
			<f a="data:frameIndex">
				<t path="format.gif.Data"/>
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>* Extracts frame pixel data in Blue-Green-Red-Alpha pixel format.
   * This function extracts only exact frame and does put previous frame pixel data into resulting Bytes. Note that frame size may not equal to Gif logical screen size.
   * @param data Gif data.
   * @param frameIndex Frame index.
   * @return BGRA pixel data with dimensions equals to specified Frame size. If frame does not present in Gif data returns null.</haxe_doc>
		</extractBGRA>
		<extractRGBA public="1" set="method" line="141" static="1">
			<f a="data:frameIndex">
				<t path="format.gif.Data"/>
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>* Extracts frame pixel data in Red-Green-Blue-Alpha pixel format.
   * This function extracts only exact frame and does put previous frame pixel data into resulting Bytes. Note that frame size may not equal to Gif logical screen size.
   * @param data Gif data.
   * @param frameIndex Frame index.
   * @return RGBA pixel data with dimensions equals to specified Frame size. If frame does not present in Gif data returns null.</haxe_doc>
		</extractRGBA>
		<extractFullBGRA public="1" set="method" line="192" static="1">
			<f a="data:frameIndex">
				<t path="format.gif.Data"/>
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>* Extracts full Gif pixel data to specified frame in Blue-Green-Red-Alpha pixel format.
   * This functions returns full representation of frame including rendering of all other frames before.
   * @param data Gif data.
   * @param frameIndex Frame index.
   * @return BGRA pixel data with dimensions equals to Gif logical screen with full pixel data of Gif image at specified frame.</haxe_doc>
		</extractFullBGRA>
		<extractFullRGBA public="1" set="method" line="278" static="1">
			<f a="data:frameIndex">
				<t path="format.gif.Data"/>
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>* Extracts full Gif pixel data to specified frame in Red-Green-Blue-Alpha pixel format.
   * This functions returns full representation of frame including rendering of all other frames before.
   * @param data Gif data.
   * @param frameIndex Frame index.
   * @return RGBA pixel data with dimensions equals to Gif logical screen with full pixel data of Gif image at specified frame.</haxe_doc>
		</extractFullRGBA>
		<loopCount public="1" set="method" line="363" static="1">
			<f a="data">
				<t path="format.gif.Data"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* Returns amount of animation repeats stored in Gif data.
   * This is link to Netscape Looping application extension. If this extension does not present amount of loops equals to 1.
   * @param data Gif data.
   * @return Amount of animation repeats. Zero equals to infinite amount of repeats.</haxe_doc>
		</loopCount>
		<LN2 expr="Math.log(2)" line="385" static="1">
			<x path="Float"/>
			<meta><m n=":value"><e>Math.log(2)</e></m></meta>
		</LN2>
		<log2 public="1" get="inline" set="null" line="386" static="1">
			<f a="val">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</log2>
		<haxe_doc>* Tools for gif data.
 * @author Yanrishatum</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="format.gif.Writer" params="" file="format/gif/Writer.hx">
		<o><c path="haxe.io.Output"/></o>
		<lzw><c path="format.gif.LZWEncoder"/></lzw>
		<gctSize><x path="Int"/></gctSize>
		<write public="1" set="method" line="30">
			<f a="data">
				<t path="format.gif.Data"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Write entire Data at once.
   * @param data Input gif file data</haxe_doc>
		</write>
		<writeHeader public="1" set="method" line="70">
			<f a="version">
				<e path="format.gif.Version"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Writes header of Gif file. Must be first.
   * @param version</haxe_doc>
		</writeHeader>
		<writeLogicalScreenDescriptor public="1" set="method" line="94">
			<f a="lsd:?globalColorTable" v=":null">
				<t path="format.gif.LogicalScreenDescriptor"/>
				<c path="haxe.io.Bytes"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ globalColorTable : null }</e></m></meta>
			<haxe_doc>* Writes Logical Screen Descriptor block. Must go right after header.
   * @param lsd Logical Screen Descriptor object.
   * @param globalColorTable Global color table. Required only if LSD contains hasGlobalColorTable flag.
   * Color table must be a RGB-aligned Bytes with 3 bytes per color.</haxe_doc>
		</writeLogicalScreenDescriptor>
		<writeComment public="1" set="method" line="121"><f a="text">
	<c path="String"/>
	<x path="Void"/>
</f></writeComment>
		<writeText public="1" set="method" line="128"><f a="textExt">
	<t path="format.gif.PlainTextExtension"/>
	<x path="Void"/>
</f></writeText>
		<writeGraphicControl public="1" set="method" line="144"><f a="gce">
	<t path="format.gif.GraphicControlExtension"/>
	<x path="Void"/>
</f></writeGraphicControl>
		<writeAppExtension public="1" set="method" line="168"><f a="appExt">
	<e path="format.gif.ApplicationExtension"/>
	<x path="Void"/>
</f></writeAppExtension>
		<writeUnknownExtension public="1" set="method" line="188"><f a="id:bytes">
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></writeUnknownExtension>
		<writeFrame public="1" set="method" line="195"><f a="frame">
	<t path="format.gif.Frame"/>
	<x path="Void"/>
</f></writeFrame>
		<writeEOF public="1" set="method" line="222">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Writes EndOfFile block.</haxe_doc>
		</writeEOF>
		<writeStringBlocks set="method" line="227"><f a="text">
	<c path="String"/>
	<x path="Void"/>
</f></writeStringBlocks>
		<writeBlocks set="method" line="242"><f a="bytes">
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></writeBlocks>
		<new public="1" set="method" line="19"><f a="o">
	<c path="haxe.io.Output"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>* ...
 * @author Yanrishatum</haxe_doc>
	</class>
	<class path="format.gif.LZWEncoder" params="" file="format/gif/Writer.hx" module="format.gif.Writer">
		<BITS get="inline" set="null" expr="12" line="263" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>12</e></m></meta>
		</BITS>
		<HSIZE get="inline" set="null" expr="5003" line="264" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>5003</e></m></meta>
		</HSIZE>
		<EOF expr="-1">
			<x path="Int"/>
			<meta><m n=":value"><e>-1</e></m></meta>
		</EOF>
		<masks expr="[0x0000, 0x0001, 0x0003, 0x0007, 0x000F, 0x001F, 0x003F, 0x007F, 0x00FF, 0x01FF, 0x03FF, 0x07FF, 0x0FFF, 0x1FFF, 0x3FFF, 0x7FFF, 0xFFFF]">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>[0x0000, 0x0001, 0x0003, 0x0007, 0x000F, 0x001F, 0x003F, 0x007F, 0x00FF, 0x01FF, 0x03FF, 0x07FF, 0x0FFF, 0x1FFF, 0x3FFF, 0x7FFF, 0xFFFF]</e></m></meta>
		</masks>
		<out><c path="haxe.io.Output"/></out>
		<bits><x path="Int"/></bits>
		<bitsCount><x path="Int"/></bitsCount>
		<minCodeSize><x path="Int"/></minCodeSize>
		<codeSize><x path="Int"/></codeSize>
		<codeSizeLimit><x path="Int"/></codeSizeLimit>
		<clearFlag><x path="Bool"/></clearFlag>
		<clearCode><x path="Int"/></clearCode>
		<eofCode><x path="Int"/></eofCode>
		<htab><x path="haxe.ds.Vector"><x path="Int"/></x></htab>
		<codetab><x path="haxe.ds.Vector"><x path="Int"/></x></codetab>
		<freeEnt><x path="Int"/></freeEnt>
		<blockBuffer><c path="haxe.io.Bytes"/></blockBuffer>
		<blockBufferCaret><x path="Int"/></blockBufferCaret>
		<pixels><c path="haxe.io.Bytes"/></pixels>
		<width><x path="Int"/></width>
		<height><x path="Int"/></height>
		<remaining><x path="Int"/></remaining>
		<pixelsCaret><x path="Int"/></pixelsCaret>
		<interlaced><x path="Bool"/></interlaced>
		<pixelsX><x path="Int"/></pixelsX>
		<pixelsY><x path="Int"/></pixelsY>
		<interlacingStage><x path="Int"/></interlacingStage>
		<interlacingStep><x path="Int"/></interlacingStep>
		<encode public="1" set="method" line="310"><f a="width:height:pixels:colorsCount:out:interlaced">
	<x path="Int"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<c path="haxe.io.Output"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></encode>
		<char_out set="method" line="347"><f a="c">
	<x path="Int"/>
	<x path="Void"/>
</f></char_out>
		<cl_block set="method" line="353"><f a=""><x path="Void"/></f></cl_block>
		<cl_hash set="method" line="361"><f a="hsize">
	<x path="Int"/>
	<x path="Void"/>
</f></cl_hash>
		<compress set="method" line="366"><f a=""><x path="Void"/></f></compress>
		<flush_char set="method" line="436"><f a=""><x path="Void"/></f></flush_char>
		<MAXCODE get="inline" set="null" line="446"><f a="n_bits">
	<x path="Int"/>
	<x path="Int"/>
</f></MAXCODE>
		<nextPixel set="method" line="451"><f a=""><x path="Int"/></f></nextPixel>
		<output set="method" line="482"><f a="code">
	<x path="Int"/>
	<x path="Void"/>
</f></output>
		<new public="1" set="method" line="305"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<typedef path="format.gz.Header" params="" file="format/gz/Data.hx" module="format.gz.Data"><a>
	<fileName><c path="String"/></fileName>
	<extraData><c path="haxe.io.Bytes"/></extraData>
	<comments><c path="String"/></comments>
</a></typedef>
	<class path="format.gz.Reader" params="" file="format/gz/Reader.hx">
		<i><c path="haxe.io.Input"/></i>
		<read public="1" set="method" line="38"><f a=""><a>
	<file><c path="String"/></file>
	<data><c path="haxe.io.Bytes"/></data>
</a></f></read>
		<readHeader public="1" set="method" line="45"><f a=""><t path="format.gz.Header"/></f></readHeader>
		<readData public="1" set="method" line="76"><f a="o:?bufsize">
	<c path="haxe.io.Output"/>
	<x path="Int"/>
	<x path="Int"/>
</f></readData>
		<refill set="method" line="119"><f a="buf:pos">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></refill>
		<new public="1" set="method" line="34"><f a="i">
	<c path="haxe.io.Input"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<enum path="format.hl.CodeFlag" params="" file="format/hl/Data.hx" module="format.hl.Data">
		<HasDebug/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<typedef path="format.hl.Data" params="" file="format/hl/Data.hx"><a>
	<version><x path="Int"/></version>
	<types><c path="Array"><e path="format.hl.HLType"/></c></types>
	<strings><c path="Array"><c path="String"/></c></strings>
	<natives><c path="Array"><t path="format.hl.NativeFunction"/></c></natives>
	<ints><c path="Array"><x path="Int"/></c></ints>
	<globals><c path="Array"><e path="format.hl.HLType"/></c></globals>
	<functions><c path="Array"><t path="format.hl.HLFunction"/></c></functions>
	<floats><c path="Array"><x path="Float"/></c></floats>
	<flags><x path="haxe.EnumFlags"><e path="format.hl.CodeFlag"/></x></flags>
	<entryPoint><x path="Int"/></entryPoint>
	<debugFiles><c path="Array"><c path="String"/></c></debugFiles>
	<constants><c path="Array"><t path="format.hl.HLConstant"/></c></constants>
	<bytesPos><c path="Array"><x path="Int"/></c></bytesPos>
	<bytes><c path="haxe.io.Bytes"/></bytes>
</a></typedef>
	<enum path="format.hl.HLType" params="" file="format/hl/Data.hx" module="format.hl.Data">
		<HVoid/>
		<HUi8/>
		<HUi16/>
		<HI32/>
		<HI64/>
		<HF32/>
		<HF64/>
		<HBool/>
		<HBytes/>
		<HDyn/>
		<HFun a="fun"><t path="format.hl.FunPrototype"/></HFun>
		<HObj a="proto"><t path="format.hl.ObjPrototype"/></HObj>
		<HArray/>
		<HType/>
		<HRef a="t"><e path="format.hl.HLType"/></HRef>
		<HVirtual a="fields"><c path="Array"><a>
	<t><e path="format.hl.HLType"/></t>
	<name><c path="String"/></name>
</a></c></HVirtual>
		<HDynObj/>
		<HAbstract a="name"><c path="String"/></HAbstract>
		<HEnum a="proto"><t path="format.hl.EnumPrototype"/></HEnum>
		<HNull a="t"><e path="format.hl.HLType"/></HNull>
		<HMethod a="fun"><t path="format.hl.FunPrototype"/></HMethod>
		<HStruct a="proto"><t path="format.hl.ObjPrototype"/></HStruct>
		<HAt a="i"><x path="Int"/></HAt>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<typedef path="format.hl.FunPrototype" params="" file="format/hl/Data.hx" module="format.hl.Data"><a>
	<ret><e path="format.hl.HLType"/></ret>
	<args><c path="Array"><e path="format.hl.HLType"/></c></args>
</a></typedef>
	<typedef path="format.hl.ObjPrototype" params="" file="format/hl/Data.hx" module="format.hl.Data"><a>
	<tsuper><e path="format.hl.HLType"/></tsuper>
	<proto><c path="Array"><a>
	<pindex><x path="Int"/></pindex>
	<name><c path="String"/></name>
	<findex><x path="Int"/></findex>
</a></c></proto>
	<name><c path="String"/></name>
	<globalValue><x path="Null"><x path="Int"/></x></globalValue>
	<fields><c path="Array"><a>
	<t><e path="format.hl.HLType"/></t>
	<name><c path="String"/></name>
</a></c></fields>
	<bindings><c path="Array"><a>
	<mid><t path="format.hl.Index"><t path="format.hl.FunTable"/></t></mid>
	<fid><x path="Int"/></fid>
</a></c></bindings>
</a></typedef>
	<typedef path="format.hl.EnumPrototype" params="" file="format/hl/Data.hx" module="format.hl.Data"><a>
	<name><c path="String"/></name>
	<globalValue><x path="Null"><x path="Int"/></x></globalValue>
	<constructs><c path="Array"><a>
	<params><c path="Array"><e path="format.hl.HLType"/></c></params>
	<name><c path="String"/></name>
</a></c></constructs>
</a></typedef>
	<typedef path="format.hl.NativeFunction" params="" file="format/hl/Data.hx" module="format.hl.Data"><a>
	<t><e path="format.hl.HLType"/></t>
	<name><c path="String"/></name>
	<lib><c path="String"/></lib>
	<findex><x path="Int"/></findex>
</a></typedef>
	<typedef path="format.hl.HLFunction" params="" file="format/hl/Data.hx" module="format.hl.Data"><a>
	<t><e path="format.hl.HLType"/></t>
	<regs><c path="Array"><e path="format.hl.HLType"/></c></regs>
	<ops><c path="Array"><e path="format.hl.Opcode"/></c></ops>
	<findex><x path="Int"/></findex>
	<debug><c path="Array"><x path="Int"/></c></debug>
	<assigns><c path="Array"><a>
	<varName><t path="format.hl.Index"><c path="String"/></t></varName>
	<position><t path="format.hl.Index"><e path="format.hl.Opcode"/></t></position>
</a></c></assigns>
</a></typedef>
	<typedef path="format.hl.HLConstant" params="" file="format/hl/Data.hx" module="format.hl.Data"><a>
	<global><x path="Int"/></global>
	<fields><c path="Array"><x path="Int"/></c></fields>
</a></typedef>
	<typedef path="format.hl.FunTable" params="" file="format/hl/Data.hx" module="format.hl.Data"><c path="Array"><e path="format.hl.AnyFunction"/></c></typedef>
	<enum path="format.hl.AnyFunction" params="" file="format/hl/Data.hx" module="format.hl.Data">
		<FHL a="f"><t path="format.hl.HLFunction"/></FHL>
		<FNative a="f"><t path="format.hl.NativeFunction"/></FNative>
	</enum>
	<typedef path="format.hl.Reg" params="" file="format/hl/Data.hx" module="format.hl.Data"><x path="Int"/></typedef>
	<typedef path="format.hl.Index" params="T" file="format/hl/Data.hx" module="format.hl.Data"><x path="Int"/></typedef>
	<typedef path="format.hl.ObjField" params="" file="format/hl/Data.hx" module="format.hl.Data"><x path="Void"/></typedef>
	<typedef path="format.hl.Global" params="" file="format/hl/Data.hx" module="format.hl.Data"><x path="Void"/></typedef>
	<typedef path="format.hl.EnumConstruct" params="" file="format/hl/Data.hx" module="format.hl.Data"><x path="Void"/></typedef>
	<enum path="format.hl.Opcode" params="" file="format/hl/Data.hx" module="format.hl.Data">
		<OMov a="dst:a">
			<t path="format.hl.Reg"/>
			<t path="format.hl.Reg"/>
		</OMov>
		<OInt a="dst:i">
			<t path="format.hl.Reg"/>
			<t path="format.hl.Index"><x path="Int"/></t>
		</OInt>
		<OFloat a="dst:i">
			<t path="format.hl.Reg"/>
			<t path="format.hl.Index"><x path="Float"/></t>
		</OFloat>
		<OBool a="dst:b">
			<t path="format.hl.Reg"/>
			<x path="Bool"/>
		</OBool>
		<OBytes a="dst:i">
			<t path="format.hl.Reg"/>
			<t path="format.hl.Index"><c path="String"/></t>
		</OBytes>
		<OString a="dst:i">
			<t path="format.hl.Reg"/>
			<t path="format.hl.Index"><c path="String"/></t>
		</OString>
		<ONull a="dst"><t path="format.hl.Reg"/></ONull>
		<OAdd a="dst:a:b">
			<t path="format.hl.Reg"/>
			<t path="format.hl.Reg"/>
			<t path="format.hl.Reg"/>
		</OAdd>
		<OSub a="dst:a:b">
			<t path="format.hl.Reg"/>
			<t path="format.hl.Reg"/>
			<t path="format.hl.Reg"/>
		</OSub>
		<OMul a="dst:a:b">
			<t path="format.hl.Reg"/>
			<t path="format.hl.Reg"/>
			<t path="format.hl.Reg"/>
		</OMul>
		<OSDiv a="dst:a:b">
			<t path="format.hl.Reg"/>
			<t path="format.hl.Reg"/>
			<t path="format.hl.Reg"/>
		</OSDiv>
		<OUDiv a="dst:a:b">
			<t path="format.hl.Reg"/>
			<t path="format.hl.Reg"/>
			<t path="format.hl.Reg"/>
		</OUDiv>
		<OSMod a="dst:a:b">
			<t path="format.hl.Reg"/>
			<t path="format.hl.Reg"/>
			<t path="format.hl.Reg"/>
		</OSMod>
		<OUMod a="dst:a:b">
			<t path="format.hl.Reg"/>
			<t path="format.hl.Reg"/>
			<t path="format.hl.Reg"/>
		</OUMod>
		<OShl a="dst:a:b">
			<t path="format.hl.Reg"/>
			<t path="format.hl.Reg"/>
			<t path="format.hl.Reg"/>
		</OShl>
		<OSShr a="dst:a:b">
			<t path="format.hl.Reg"/>
			<t path="format.hl.Reg"/>
			<t path="format.hl.Reg"/>
		</OSShr>
		<OUShr a="dst:a:b">
			<t path="format.hl.Reg"/>
			<t path="format.hl.Reg"/>
			<t path="format.hl.Reg"/>
		</OUShr>
		<OAnd a="dst:a:b">
			<t path="format.hl.Reg"/>
			<t path="format.hl.Reg"/>
			<t path="format.hl.Reg"/>
		</OAnd>
		<OOr a="dst:a:b">
			<t path="format.hl.Reg"/>
			<t path="format.hl.Reg"/>
			<t path="format.hl.Reg"/>
		</OOr>
		<OXor a="dst:a:b">
			<t path="format.hl.Reg"/>
			<t path="format.hl.Reg"/>
			<t path="format.hl.Reg"/>
		</OXor>
		<ONeg a="dst:a">
			<t path="format.hl.Reg"/>
			<t path="format.hl.Reg"/>
		</ONeg>
		<ONot a="dst:a">
			<t path="format.hl.Reg"/>
			<t path="format.hl.Reg"/>
		</ONot>
		<OIncr a="dst"><t path="format.hl.Reg"/></OIncr>
		<ODecr a="dst"><t path="format.hl.Reg"/></ODecr>
		<OCall0 a="dst:i">
			<t path="format.hl.Reg"/>
			<t path="format.hl.Index"><t path="format.hl.FunTable"/></t>
		</OCall0>
		<OCall1 a="dst:i:a">
			<t path="format.hl.Reg"/>
			<t path="format.hl.Index"><t path="format.hl.FunTable"/></t>
			<t path="format.hl.Reg"/>
		</OCall1>
		<OCall2 a="dst:i:a:b">
			<t path="format.hl.Reg"/>
			<t path="format.hl.Index"><t path="format.hl.FunTable"/></t>
			<t path="format.hl.Reg"/>
			<t path="format.hl.Reg"/>
		</OCall2>
		<OCall3 a="dst:i:a:b:c">
			<t path="format.hl.Reg"/>
			<t path="format.hl.Index"><t path="format.hl.FunTable"/></t>
			<t path="format.hl.Reg"/>
			<t path="format.hl.Reg"/>
			<t path="format.hl.Reg"/>
		</OCall3>
		<OCall4 a="dst:i:a:b:c:d">
			<t path="format.hl.Reg"/>
			<t path="format.hl.Index"><t path="format.hl.FunTable"/></t>
			<t path="format.hl.Reg"/>
			<t path="format.hl.Reg"/>
			<t path="format.hl.Reg"/>
			<t path="format.hl.Reg"/>
		</OCall4>
		<OCallN a="dst:i:args">
			<t path="format.hl.Reg"/>
			<t path="format.hl.Index"><t path="format.hl.FunTable"/></t>
			<c path="Array"><t path="format.hl.Reg"/></c>
		</OCallN>
		<OCallMethod a="dst:i:args">
			<t path="format.hl.Reg"/>
			<t path="format.hl.Index"><t path="format.hl.ObjField"/></t>
			<c path="Array"><t path="format.hl.Reg"/></c>
		</OCallMethod>
		<OCallThis a="dst:i:args">
			<t path="format.hl.Reg"/>
			<t path="format.hl.Index"><t path="format.hl.ObjField"/></t>
			<c path="Array"><t path="format.hl.Reg"/></c>
		</OCallThis>
		<OCallClosure a="dst:obj:args">
			<t path="format.hl.Reg"/>
			<t path="format.hl.Reg"/>
			<c path="Array"><t path="format.hl.Reg"/></c>
		</OCallClosure>
		<OStaticClosure a="dst:i">
			<t path="format.hl.Reg"/>
			<t path="format.hl.Index"><t path="format.hl.FunTable"/></t>
		</OStaticClosure>
		<OInstanceClosure a="dst:i:a">
			<t path="format.hl.Reg"/>
			<t path="format.hl.Index"><t path="format.hl.FunTable"/></t>
			<t path="format.hl.Reg"/>
		</OInstanceClosure>
		<OVirtualClosure a="dst:a:i">
			<t path="format.hl.Reg"/>
			<t path="format.hl.Reg"/>
			<t path="format.hl.Index"><t path="format.hl.ObjField"/></t>
		</OVirtualClosure>
		<OGetGlobal a="dst:i">
			<t path="format.hl.Reg"/>
			<t path="format.hl.Index"><t path="format.hl.Global"/></t>
		</OGetGlobal>
		<OSetGlobal a="i:a">
			<t path="format.hl.Index"><t path="format.hl.Global"/></t>
			<t path="format.hl.Reg"/>
		</OSetGlobal>
		<OField a="dst:a:i">
			<t path="format.hl.Reg"/>
			<t path="format.hl.Reg"/>
			<t path="format.hl.Index"><t path="format.hl.ObjField"/></t>
		</OField>
		<OSetField a="dst:i:a">
			<t path="format.hl.Reg"/>
			<t path="format.hl.Index"><t path="format.hl.ObjField"/></t>
			<t path="format.hl.Reg"/>
		</OSetField>
		<OGetThis a="dst:i">
			<t path="format.hl.Reg"/>
			<t path="format.hl.Index"><t path="format.hl.ObjField"/></t>
		</OGetThis>
		<OSetThis a="i:a">
			<t path="format.hl.Index"><t path="format.hl.ObjField"/></t>
			<t path="format.hl.Reg"/>
		</OSetThis>
		<ODynGet a="dst:a:i">
			<t path="format.hl.Reg"/>
			<t path="format.hl.Reg"/>
			<t path="format.hl.Index"><c path="String"/></t>
		</ODynGet>
		<ODynSet a="dst:i:a">
			<t path="format.hl.Reg"/>
			<t path="format.hl.Index"><c path="String"/></t>
			<t path="format.hl.Reg"/>
		</ODynSet>
		<OJTrue a="dst:offset">
			<t path="format.hl.Reg"/>
			<x path="Int"/>
		</OJTrue>
		<OJFalse a="dst:offset">
			<t path="format.hl.Reg"/>
			<x path="Int"/>
		</OJFalse>
		<OJNull a="dst:offset">
			<t path="format.hl.Reg"/>
			<x path="Int"/>
		</OJNull>
		<OJNotNull a="dst:offset">
			<t path="format.hl.Reg"/>
			<x path="Int"/>
		</OJNotNull>
		<OJSLt a="dst:a:offset">
			<t path="format.hl.Reg"/>
			<t path="format.hl.Reg"/>
			<x path="Int"/>
		</OJSLt>
		<OJSGte a="dst:a:offset">
			<t path="format.hl.Reg"/>
			<t path="format.hl.Reg"/>
			<x path="Int"/>
		</OJSGte>
		<OJSGt a="dst:a:offset">
			<t path="format.hl.Reg"/>
			<t path="format.hl.Reg"/>
			<x path="Int"/>
		</OJSGt>
		<OJSLte a="dst:a:offset">
			<t path="format.hl.Reg"/>
			<t path="format.hl.Reg"/>
			<x path="Int"/>
		</OJSLte>
		<OJULt a="dst:a:offset">
			<t path="format.hl.Reg"/>
			<t path="format.hl.Reg"/>
			<x path="Int"/>
		</OJULt>
		<OJUGte a="dst:a:offset">
			<t path="format.hl.Reg"/>
			<t path="format.hl.Reg"/>
			<x path="Int"/>
		</OJUGte>
		<OJNotLt a="dst:a:offset">
			<t path="format.hl.Reg"/>
			<t path="format.hl.Reg"/>
			<x path="Int"/>
		</OJNotLt>
		<OJNotGte a="dst:a:offset">
			<t path="format.hl.Reg"/>
			<t path="format.hl.Reg"/>
			<x path="Int"/>
		</OJNotGte>
		<OJEq a="dst:a:offset">
			<t path="format.hl.Reg"/>
			<t path="format.hl.Reg"/>
			<x path="Int"/>
		</OJEq>
		<OJNotEq a="dst:a:offset">
			<t path="format.hl.Reg"/>
			<t path="format.hl.Reg"/>
			<x path="Int"/>
		</OJNotEq>
		<OJAlways a="offset"><x path="Int"/></OJAlways>
		<OToDyn a="dst:a">
			<t path="format.hl.Reg"/>
			<t path="format.hl.Reg"/>
		</OToDyn>
		<OToSFloat a="dst:a">
			<t path="format.hl.Reg"/>
			<t path="format.hl.Reg"/>
		</OToSFloat>
		<OToUFloat a="dst:a">
			<t path="format.hl.Reg"/>
			<t path="format.hl.Reg"/>
		</OToUFloat>
		<OToInt a="dst:a">
			<t path="format.hl.Reg"/>
			<t path="format.hl.Reg"/>
		</OToInt>
		<OSafeCast a="dst:a">
			<t path="format.hl.Reg"/>
			<t path="format.hl.Reg"/>
		</OSafeCast>
		<OUnsafeCast a="dst:a">
			<t path="format.hl.Reg"/>
			<t path="format.hl.Reg"/>
		</OUnsafeCast>
		<OToVirtual a="dst:a">
			<t path="format.hl.Reg"/>
			<t path="format.hl.Reg"/>
		</OToVirtual>
		<OLabel/>
		<ORet a="dst"><t path="format.hl.Reg"/></ORet>
		<OThrow a="dst"><t path="format.hl.Reg"/></OThrow>
		<ORethrow a="dst"><t path="format.hl.Reg"/></ORethrow>
		<OSwitch a="dst:cases:end">
			<t path="format.hl.Reg"/>
			<c path="Array"><x path="Int"/></c>
			<x path="Int"/>
		</OSwitch>
		<ONullCheck a="dst"><t path="format.hl.Reg"/></ONullCheck>
		<OTrap a="dst:end">
			<t path="format.hl.Reg"/>
			<x path="Int"/>
		</OTrap>
		<OEndTrap a="last"><x path="Bool"/></OEndTrap>
		<OGetUI8 a="dst:a:b">
			<t path="format.hl.Reg"/>
			<t path="format.hl.Reg"/>
			<t path="format.hl.Reg"/>
		</OGetUI8>
		<OGetUI16 a="dst:a:b">
			<t path="format.hl.Reg"/>
			<t path="format.hl.Reg"/>
			<t path="format.hl.Reg"/>
		</OGetUI16>
		<OGetMem a="dst:a:b">
			<t path="format.hl.Reg"/>
			<t path="format.hl.Reg"/>
			<t path="format.hl.Reg"/>
		</OGetMem>
		<OGetArray a="dst:a:b">
			<t path="format.hl.Reg"/>
			<t path="format.hl.Reg"/>
			<t path="format.hl.Reg"/>
		</OGetArray>
		<OSetUI8 a="dst:a:b">
			<t path="format.hl.Reg"/>
			<t path="format.hl.Reg"/>
			<t path="format.hl.Reg"/>
		</OSetUI8>
		<OSetUI16 a="dst:a:b">
			<t path="format.hl.Reg"/>
			<t path="format.hl.Reg"/>
			<t path="format.hl.Reg"/>
		</OSetUI16>
		<OSetMem a="dst:a:b">
			<t path="format.hl.Reg"/>
			<t path="format.hl.Reg"/>
			<t path="format.hl.Reg"/>
		</OSetMem>
		<OSetArray a="dst:a:b">
			<t path="format.hl.Reg"/>
			<t path="format.hl.Reg"/>
			<t path="format.hl.Reg"/>
		</OSetArray>
		<ONew a="dst"><t path="format.hl.Reg"/></ONew>
		<OArraySize a="dst:a">
			<t path="format.hl.Reg"/>
			<t path="format.hl.Reg"/>
		</OArraySize>
		<OType a="dst:t">
			<t path="format.hl.Reg"/>
			<t path="format.hl.Index"><e path="format.hl.HLType"/></t>
		</OType>
		<OGetType a="dst:a">
			<t path="format.hl.Reg"/>
			<t path="format.hl.Reg"/>
		</OGetType>
		<OGetTID a="dst:a">
			<t path="format.hl.Reg"/>
			<t path="format.hl.Reg"/>
		</OGetTID>
		<ORef a="dst:a">
			<t path="format.hl.Reg"/>
			<t path="format.hl.Reg"/>
		</ORef>
		<OUnref a="dst:a">
			<t path="format.hl.Reg"/>
			<t path="format.hl.Reg"/>
		</OUnref>
		<OSetref a="dst:a">
			<t path="format.hl.Reg"/>
			<t path="format.hl.Reg"/>
		</OSetref>
		<OMakeEnum a="dst:i:a">
			<t path="format.hl.Reg"/>
			<t path="format.hl.Index"><t path="format.hl.EnumConstruct"/></t>
			<c path="Array"><t path="format.hl.Reg"/></c>
		</OMakeEnum>
		<OEnumAlloc a="dst:i">
			<t path="format.hl.Reg"/>
			<t path="format.hl.Index"><t path="format.hl.EnumConstruct"/></t>
		</OEnumAlloc>
		<OEnumIndex a="dst:a">
			<t path="format.hl.Reg"/>
			<t path="format.hl.Reg"/>
		</OEnumIndex>
		<OEnumField a="dst:a:i:param">
			<t path="format.hl.Reg"/>
			<t path="format.hl.Reg"/>
			<t path="format.hl.Index"><t path="format.hl.EnumConstruct"/></t>
			<x path="Int"/>
		</OEnumField>
		<OSetEnumField a="dst:param:a">
			<t path="format.hl.Reg"/>
			<x path="Int"/>
			<t path="format.hl.Reg"/>
		</OSetEnumField>
		<OAssert/>
		<ORefData a="dst:src">
			<t path="format.hl.Reg"/>
			<t path="format.hl.Reg"/>
		</ORefData>
		<ORefOffset a="dst:src:offset">
			<t path="format.hl.Reg"/>
			<t path="format.hl.Reg"/>
			<t path="format.hl.Reg"/>
		</ORefOffset>
		<ONop/>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<class path="format.hl.Reader" params="" file="format/hl/Reader.hx">
		<OP_ARGS expr="[2, 2, 2, 2, 2, 2, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 1, 1, 2, 3, 4, 5, 6, -1, -1, -1, -1, 2, 3, 3, 2, 2, 3, 3, 2, 2, 3, 3, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 2, 2, 2, 2, 2, 0, 1, 1, 1, -1, 1, 2, 1, 3, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, 4, 3, 0, 2, 3, 0]" line="363" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>[2, 2, 2, 2, 2, 2, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 1, 1, 2, 3, 4, 5, 6, -1, -1, -1, -1, 2, 3, 3, 2, 2, 3, 3, 2, 2, 3, 3, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 2, 2, 2, 2, 2, 0, 1, 1, 1, -1, 1, 2, 1, 3, 3, 3, 3, 3, 3, 3, 3, 1, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, 4, 3, 0, 2, 3, 0]</e></m></meta>
		</OP_ARGS>
		<version><x path="Int"/></version>
		<i><c path="haxe.io.Input"/></i>
		<strings><c path="Array"><c path="String"/></c></strings>
		<types><c path="Array"><e path="format.hl.HLType"/></c></types>
		<debugFiles><c path="Array"><c path="String"/></c></debugFiles>
		<flags><x path="haxe.EnumFlags"><e path="format.hl.CodeFlag"/></x></flags>
		<args1><c path="Array"><d/></c></args1>
		<args2><c path="Array"><d/></c></args2>
		<args3><c path="Array"><d/></c></args3>
		<args4><c path="Array"><d/></c></args4>
		<readCode><x path="Bool"/></readCode>
		<_read get="inline" set="null" line="26"><f a=""><x path="Int"/></f></_read>
		<index set="method" line="30"><f a=""><x path="Int"/></f></index>
		<uindex set="method" line="45"><f a=""><x path="Int"/></f></uindex>
		<readStrings set="method" line="51"><f a="n">
	<x path="Int"/>
	<c path="Array"><c path="String"/></c>
</f></readStrings>
		<getString set="method" line="65"><f a=""><c path="String"/></f></getString>
		<getType set="method" line="72"><f a=""><e path="format.hl.HLType"/></f></getType>
		<readType set="method" line="79"><f a=""><e path="format.hl.HLType"/></f></readType>
		<readProto set="method" line="136"><f a=""><t path="format.hl.ObjPrototype"/></f></readProto>
		<fixType set="method" line="161"><f a="t">
	<e path="format.hl.HLType"/>
	<e path="format.hl.HLType"/>
</f></fixType>
		<readFunction set="method" line="170"><f a=""><t path="format.hl.HLFunction"/></f></readFunction>
		<skipOps set="method" line="185"><f a="nops">
	<x path="Int"/>
	<c path="Array"><e path="format.hl.Opcode"/></c>
</f></skipOps>
		<readOp set="method" line="211"><f a=""><e path="format.hl.Opcode"/></f></readOp>
		<readDebug set="method" line="254"><f a="nops">
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
</f></readDebug>
		<read public="1" set="method" line="295"><f a="i">
	<c path="haxe.io.Input"/>
	<t path="format.hl.Data"/>
</f></read>
		<new public="1" set="method" line="18">
			<f a="?readCode" v="true">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ readCode : true }</e></m></meta>
		</new>
	</class>
	<class path="format.hl.Tools" params="" file="format/hl/Tools.hx">
		<isDynamic public="1" set="method" line="6" static="1"><f a="t">
	<e path="format.hl.HLType"/>
	<x path="Bool"/>
</f></isDynamic>
		<isPtr public="1" set="method" line="18" static="1"><f a="t">
	<e path="format.hl.HLType"/>
	<x path="Bool"/>
</f></isPtr>
		<containsPointer public="1" set="method" line="29" static="1"><f a="t">
	<e path="format.hl.HLType"/>
	<x path="Bool"/>
</f></containsPointer>
		<hash public="1" set="method" line="53" static="1"><f a="name">
	<c path="String"/>
	<x path="Int"/>
</f></hash>
		<toString public="1" set="method" line="61" static="1"><f a="t">
	<e path="format.hl.HLType"/>
	<c path="String"/>
</f></toString>
	</class>
	<typedef path="format.jpg.Data" params="" file="format/jpg/Data.hx"><a>
	<width><x path="Int"/></width>
	<quality><x path="Float"/></quality>
	<pixels><c path="haxe.io.Bytes"/></pixels>
	<height><x path="Int"/></height>
</a></typedef>
	<class path="format.jpg.Writer" params="" file="format/jpg/Writer.hx">
		<ZigZag><c path="Array"><x path="Int"/></c></ZigZag>
		<initZigZag set="method" line="36"><f a=""><x path="Void"/></f></initZigZag>
		<YTable><c path="Array"><x path="Int"/></c></YTable>
		<UVTable><c path="Array"><x path="Int"/></c></UVTable>
		<fdtbl_Y><c path="Array"><x path="Float"/></c></fdtbl_Y>
		<fdtbl_UV><c path="Array"><x path="Float"/></c></fdtbl_UV>
		<initQuantTables set="method" line="54"><f a="sf">
	<x path="Int"/>
	<x path="Void"/>
</f></initQuantTables>
		<std_dc_luminance_nrcodes><c path="Array"><x path="Int"/></c></std_dc_luminance_nrcodes>
		<std_dc_luminance_values><c path="haxe.io.Bytes"/></std_dc_luminance_values>
		<std_ac_luminance_nrcodes><c path="Array"><x path="Int"/></c></std_ac_luminance_nrcodes>
		<std_ac_luminance_values><c path="haxe.io.Bytes"/></std_ac_luminance_values>
		<initLuminance set="method" line="106"><f a=""><x path="Void"/></f></initLuminance>
		<strIntsToBytes set="method" line="135"><f a="s">
	<c path="String"/>
	<c path="haxe.io.Bytes"/>
</f></strIntsToBytes>
		<std_dc_chrominance_nrcodes><c path="Array"><x path="Int"/></c></std_dc_chrominance_nrcodes>
		<std_dc_chrominance_values><c path="haxe.io.Bytes"/></std_dc_chrominance_values>
		<std_ac_chrominance_nrcodes><c path="Array"><x path="Int"/></c></std_ac_chrominance_nrcodes>
		<std_ac_chrominance_values><c path="haxe.io.Bytes"/></std_ac_chrominance_values>
		<initChrominance set="method" line="159"><f a=""><x path="Void"/></f></initChrominance>
		<YDC_HT><t path="Map">
	<x path="Int"/>
	<c path="format.jpg._Writer.BitString"/>
</t></YDC_HT>
		<UVDC_HT><t path="Map">
	<x path="Int"/>
	<c path="format.jpg._Writer.BitString"/>
</t></UVDC_HT>
		<YAC_HT><t path="Map">
	<x path="Int"/>
	<c path="format.jpg._Writer.BitString"/>
</t></YAC_HT>
		<UVAC_HT><t path="Map">
	<x path="Int"/>
	<c path="format.jpg._Writer.BitString"/>
</t></UVAC_HT>
		<initHuffmanTbl set="method" line="193"><f a=""><x path="Void"/></f></initHuffmanTbl>
		<computeHuffmanTbl set="method" line="200"><f a="nrcodes:std_table">
	<c path="Array"><x path="Int"/></c>
	<c path="haxe.io.Bytes"/>
	<t path="Map">
		<x path="Int"/>
		<c path="format.jpg._Writer.BitString"/>
	</t>
</f></computeHuffmanTbl>
		<bitcode><t path="Map">
	<x path="Int"/>
	<c path="format.jpg._Writer.BitString"/>
</t></bitcode>
		<category><t path="Map">
	<x path="Int"/>
	<x path="Int"/>
</t></category>
		<initCategoryNumber set="method" line="220"><f a=""><x path="Void"/></f></initCategoryNumber>
		<byteout><c path="haxe.io.Output"/></byteout>
		<bytenew><x path="Int"/></bytenew>
		<bytepos><x path="Int"/></bytepos>
		<writeBits set="method" line="249"><f a="bs">
	<c path="format.jpg._Writer.BitString"/>
	<x path="Void"/>
</f></writeBits>
		<writeWord set="method" line="274"><f a="val">
	<x path="Int"/>
	<x path="Void"/>
</f></writeWord>
		<fDCTQuant set="method" line="281"><f a="data:fdtbl">
	<c path="Array"><x path="Float"/></c>
	<c path="Array"><x path="Float"/></c>
	<c path="Array"><x path="Float"/></c>
</f></fDCTQuant>
		<b get="inline" set="null" line="386"><f a="v">
	<x path="Int"/>
	<x path="Void"/>
</f></b>
		<writeAPP0 set="method" line="390"><f a=""><x path="Void"/></f></writeAPP0>
		<writeDQT set="method" line="406"><f a=""><x path="Void"/></f></writeDQT>
		<writeSOF0 set="method" line="416"><f a="width:height">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></writeSOF0>
		<writeDHT set="method" line="436"><f a=""><x path="Void"/></f></writeDHT>
		<writeSOS set="method" line="460"><f a=""><x path="Void"/></f></writeSOS>
		<DU><c path="Array"><x path="Float"/></c></DU>
		<processDU set="method" line="478"><f a="CDU:fdtbl:DC:HTDC:HTAC">
	<c path="Array"><x path="Float"/></c>
	<c path="Array"><x path="Float"/></c>
	<x path="Float"/>
	<t path="Map">
		<x path="Int"/>
		<c path="format.jpg._Writer.BitString"/>
	</t>
	<t path="Map">
		<x path="Int"/>
		<c path="format.jpg._Writer.BitString"/>
	</t>
	<x path="Float"/>
</f></processDU>
		<YDU><c path="Array"><x path="Float"/></c></YDU>
		<UDU><c path="Array"><x path="Float"/></c></UDU>
		<VDU><c path="Array"><x path="Float"/></c></VDU>
		<RGB2YUV set="method" line="534"><f a="img:width:xpos:ypos">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></RGB2YUV>
		<write public="1" set="method" line="590"><f a="image">
	<t path="format.jpg.Data"/>
	<x path="Void"/>
</f></write>
		<new public="1" set="method" line="551"><f a="out">
	<c path="haxe.io.Output"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="format.jpg._Writer.BitString" params="" file="format/jpg/Writer.hx" private="1" module="format.jpg.Writer">
		<len public="1"><x path="Int"/></len>
		<val public="1"><x path="Int"/></val>
		<new public="1" set="method" line="647"><f a="l:v">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="format.lz4.Reader" params="" file="format/lz4/Reader.hx">
		<bytes><c path="haxe.io.Bytes"/></bytes>
		<pos><x path="Int"/></pos>
		<b get="inline" set="null" line="11"><f a=""><x path="Int"/></f></b>
		<grow set="method" line="15"><f a="out:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></grow>
		<read public="1" set="method" line="25"><f a="bytes">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></read>
		<new public="1" set="method" line="8"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="format.lz4.Uncompress" params="" file="format/lz4/Uncompress.hx">
		<run public="1" set="method" line="5" static="1"><f a="src:srcPos:srcLen:out:outPos">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
</f></run>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<enum path="format.mp3.SamplingRate" params="" file="format/mp3/Data.hx" module="format.mp3.Data">
		<SR_8000/>
		<SR_11025/>
		<SR_12000/>
		<SR_22050/>
		<SR_24000/>
		<SR_32000/>
		<SR_44100/>
		<SR_48000/>
		<SR_Bad/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<enum path="format.mp3.Bitrate" params="" file="format/mp3/Data.hx" module="format.mp3.Data">
		<BR_8/>
		<BR_16/>
		<BR_24/>
		<BR_32/>
		<BR_40/>
		<BR_48/>
		<BR_56/>
		<BR_64/>
		<BR_80/>
		<BR_96/>
		<BR_112/>
		<BR_128/>
		<BR_144/>
		<BR_160/>
		<BR_176/>
		<BR_192/>
		<BR_224/>
		<BR_256/>
		<BR_288/>
		<BR_320/>
		<BR_352/>
		<BR_384/>
		<BR_416/>
		<BR_448/>
		<BR_Free/>
		<BR_Bad/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<class path="format.mp3.MPEG" params="" file="format/mp3/Constants.hx" module="format.mp3.Constants">
		<V1 public="1" get="inline" set="null" expr="3" line="11" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</V1>
		<V2 public="1" get="inline" set="null" expr="2" line="12" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</V2>
		<V25 public="1" get="inline" set="null" expr="0" line="13" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</V25>
		<Reserved public="1" expr="1" line="14" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</Reserved>
		<enum2Num public="1" set="method" line="16" static="1"><f a="m">
	<e path="format.mp3.MPEGVersion"/>
	<x path="Int"/>
</f></enum2Num>
		<num2Enum public="1" set="method" line="25" static="1"><f a="m">
	<x path="Int"/>
	<e path="format.mp3.MPEGVersion"/>
</f></num2Enum>
		<V1_Bitrates public="1" expr="[[BR_Bad, BR_Bad, BR_Bad, BR_Bad, BR_Bad, BR_Bad, BR_Bad, BR_Bad, BR_Bad, BR_Bad, BR_Bad, BR_Bad, BR_Bad, BR_Bad, BR_Bad, BR_Bad], [BR_Free, BR_32, BR_40, BR_48, BR_56, BR_64, BR_80, BR_96, BR_112, BR_128, BR_160, BR_192, BR_224, BR_256, BR_320, BR_Bad], [BR_Free, BR_32, BR_48, BR_56, BR_64, BR_80, BR_96, BR_112, BR_128, BR_160, BR_192, BR_224, BR_256, BR_320, BR_384, BR_Bad], [BR_Free, BR_32, BR_64, BR_96, BR_128, BR_160, BR_192, BR_224, BR_256, BR_288, BR_320, BR_352, BR_384, BR_416, BR_448, BR_Bad]]" line="35" static="1">
			<c path="Array"><c path="Array"><e path="format.mp3.Bitrate"/></c></c>
			<meta><m n=":value"><e>[[BR_Bad, BR_Bad, BR_Bad, BR_Bad, BR_Bad, BR_Bad, BR_Bad, BR_Bad, BR_Bad, BR_Bad, BR_Bad, BR_Bad, BR_Bad, BR_Bad, BR_Bad, BR_Bad], [BR_Free, BR_32, BR_40, BR_48, BR_56, BR_64, BR_80, BR_96, BR_112, BR_128, BR_160, BR_192, BR_224, BR_256, BR_320, BR_Bad], [BR_Free, BR_32, BR_48, BR_56, BR_64, BR_80, BR_96, BR_112, BR_128, BR_160, BR_192, BR_224, BR_256, BR_320, BR_384, BR_Bad], [BR_Free, BR_32, BR_64, BR_96, BR_128, BR_160, BR_192, BR_224, BR_256, BR_288, BR_320, BR_352, BR_384, BR_416, BR_448, BR_Bad]]</e></m></meta>
		</V1_Bitrates>
		<V2_Bitrates public="1" expr="[[BR_Bad, BR_Bad, BR_Bad, BR_Bad, BR_Bad, BR_Bad, BR_Bad, BR_Bad, BR_Bad, BR_Bad, BR_Bad, BR_Bad, BR_Bad, BR_Bad, BR_Bad, BR_Bad], [BR_Free, BR_8, BR_16, BR_24, BR_32, BR_40, BR_48, BR_56, BR_64, BR_80, BR_96, BR_112, BR_128, BR_144, BR_160, BR_Bad], [BR_Free, BR_8, BR_16, BR_24, BR_32, BR_40, BR_48, BR_56, BR_64, BR_80, BR_96, BR_112, BR_128, BR_144, BR_160, BR_Bad], [BR_Free, BR_32, BR_48, BR_56, BR_64, BR_80, BR_96, BR_112, BR_128, BR_144, BR_160, BR_176, BR_192, BR_224, BR_256, BR_Bad]]" line="43" static="1">
			<c path="Array"><c path="Array"><e path="format.mp3.Bitrate"/></c></c>
			<meta><m n=":value"><e>[[BR_Bad, BR_Bad, BR_Bad, BR_Bad, BR_Bad, BR_Bad, BR_Bad, BR_Bad, BR_Bad, BR_Bad, BR_Bad, BR_Bad, BR_Bad, BR_Bad, BR_Bad, BR_Bad], [BR_Free, BR_8, BR_16, BR_24, BR_32, BR_40, BR_48, BR_56, BR_64, BR_80, BR_96, BR_112, BR_128, BR_144, BR_160, BR_Bad], [BR_Free, BR_8, BR_16, BR_24, BR_32, BR_40, BR_48, BR_56, BR_64, BR_80, BR_96, BR_112, BR_128, BR_144, BR_160, BR_Bad], [BR_Free, BR_32, BR_48, BR_56, BR_64, BR_80, BR_96, BR_112, BR_128, BR_144, BR_160, BR_176, BR_192, BR_224, BR_256, BR_Bad]]</e></m></meta>
		</V2_Bitrates>
		<SamplingRates public="1" expr="[[SR_11025, SR_12000, SR_8000, SR_Bad], [SR_Bad, SR_Bad, SR_Bad, SR_Bad], [SR_22050, SR_24000, SR_12000, SR_Bad], [SR_44100, SR_48000, SR_32000, SR_Bad]]" line="51" static="1">
			<c path="Array"><c path="Array"><e path="format.mp3.SamplingRate"/></c></c>
			<meta><m n=":value"><e>[[SR_11025, SR_12000, SR_8000, SR_Bad], [SR_Bad, SR_Bad, SR_Bad, SR_Bad], [SR_22050, SR_24000, SR_12000, SR_Bad], [SR_44100, SR_48000, SR_32000, SR_Bad]]</e></m></meta>
		</SamplingRates>
		<srNum2Enum public="1" set="method" line="58" static="1"><f a="sr">
	<x path="Int"/>
	<e path="format.mp3.SamplingRate"/>
</f></srNum2Enum>
		<srEnum2Num public="1" set="method" line="72" static="1"><f a="sr">
	<e path="format.mp3.SamplingRate"/>
	<x path="Int"/>
</f></srEnum2Num>
		<getBitrateIdx public="1" set="method" line="87" static="1"><f a="br:mpeg:layer">
	<e path="format.mp3.Bitrate"/>
	<e path="format.mp3.MPEGVersion"/>
	<e path="format.mp3.Layer"/>
	<x path="Int"/>
</f></getBitrateIdx>
		<getSamplingRateIdx public="1" set="method" line="96" static="1"><f a="sr:mpeg">
	<e path="format.mp3.SamplingRate"/>
	<e path="format.mp3.MPEGVersion"/>
	<x path="Int"/>
</f></getSamplingRateIdx>
		<bitrateEnum2Num public="1" set="method" line="105" static="1"><f a="br">
	<e path="format.mp3.Bitrate"/>
	<x path="Int"/>
</f></bitrateEnum2Num>
		<bitrateNum2Enum public="1" set="method" line="136" static="1"><f a="br">
	<x path="Int"/>
	<e path="format.mp3.Bitrate"/>
</f></bitrateNum2Enum>
		<haxe_doc>* MPEG Version
 *
 * sored on 2 bits in the file,
 * values represent bit values</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="format.mp3.CLayer" params="" file="format/mp3/Constants.hx" module="format.mp3.Constants">
		<LReserved public="1" expr="0" line="177" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</LReserved>
		<LLayer3 public="1" expr="1" line="178" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</LLayer3>
		<LLayer2 public="1" expr="2" line="179" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</LLayer2>
		<LLayer1 public="1" expr="3" line="180" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</LLayer1>
		<enum2Num public="1" set="method" line="182" static="1"><f a="l">
	<e path="format.mp3.Layer"/>
	<x path="Int"/>
</f></enum2Num>
		<num2Enum public="1" set="method" line="191" static="1"><f a="l">
	<x path="Int"/>
	<e path="format.mp3.Layer"/>
</f></num2Enum>
		<haxe_doc>* Layer
 *
 * stored on 2 bits in the file,
 * values represent bit values</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="format.mp3.CChannelMode" params="" file="format/mp3/Constants.hx" module="format.mp3.Constants">
		<CStereo public="1" get="inline" set="null" expr="0" line="209" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</CStereo>
		<CJointStereo public="1" get="inline" set="null" expr="1" line="210" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</CJointStereo>
		<CDualChannel public="1" get="inline" set="null" expr="2" line="211" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</CDualChannel>
		<CMono public="1" get="inline" set="null" expr="3" line="212" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</CMono>
		<enum2Num public="1" set="method" line="214" static="1"><f a="c">
	<e path="format.mp3.ChannelMode"/>
	<x path="Int"/>
</f></enum2Num>
		<num2Enum public="1" set="method" line="223" static="1"><f a="c">
	<x path="Int"/>
	<e path="format.mp3.ChannelMode"/>
</f></num2Enum>
		<haxe_doc>* Sound channel mode
 *
 * stored on 2 bits in the file,
 * values represent bit values</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="format.mp3.CEmphasis" params="" file="format/mp3/Constants.hx" module="format.mp3.Constants">
		<ENone public="1" get="inline" set="null" expr="0" line="240" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</ENone>
		<EMs50_15 public="1" get="inline" set="null" expr="1" line="241" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</EMs50_15>
		<EReserved public="1" get="inline" set="null" expr="2" line="242" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>2</e></m></meta>
		</EReserved>
		<ECCIT_J17 public="1" get="inline" set="null" expr="3" line="243" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>3</e></m></meta>
		</ECCIT_J17>
		<enum2Num public="1" set="method" line="245" static="1"><f a="c">
	<e path="format.mp3.Emphasis"/>
	<x path="Int"/>
</f></enum2Num>
		<num2Enum public="1" set="method" line="254" static="1"><f a="c">
	<x path="Int"/>
	<e path="format.mp3.Emphasis"/>
</f></num2Enum>
		<haxe_doc>* Emphasis
 *
 * 2 bits</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<typedef path="format.mp3.MP3" params="" file="format/mp3/Data.hx" module="format.mp3.Data"><a>
	<sampleSize><x path="Int"/></sampleSize>
	<sampleCount><x path="Int"/></sampleCount>
	<id3v2><t path="format.mp3.ID3v2Info"/></id3v2>
	<frames><c path="Array"><t path="format.mp3.MP3Frame"/></c></frames>
</a></typedef>
	<typedef path="format.mp3.ID3v2Info" params="" file="format/mp3/Data.hx" module="format.mp3.Data"><a>
	<versionBytes><x path="Int"/></versionBytes>
	<flagByte><x path="Int"/></flagByte>
	<data><c path="haxe.io.Bytes"/></data>
</a></typedef>
	<typedef path="format.mp3.MP3Frame" params="" file="format/mp3/Data.hx" module="format.mp3.Data"><a>
	<header><t path="format.mp3.MP3Header"/></header>
	<data><c path="haxe.io.Bytes"/></data>
</a></typedef>
	<typedef path="format.mp3.MP3Header" params="" file="format/mp3/Data.hx" module="format.mp3.Data"><a>
	<version><e path="format.mp3.MPEGVersion"/></version>
	<samplingRate><e path="format.mp3.SamplingRate"/></samplingRate>
	<privateBit><x path="Bool"/></privateBit>
	<layer><e path="format.mp3.Layer"/></layer>
	<isPadded><x path="Bool"/></isPadded>
	<isOriginal><x path="Bool"/></isOriginal>
	<isMSStereo><x path="Bool"/></isMSStereo>
	<isIntensityStereo><x path="Bool"/></isIntensityStereo>
	<isCopyrighted><x path="Bool"/></isCopyrighted>
	<hasCrc><x path="Bool"/></hasCrc>
	<emphasis><e path="format.mp3.Emphasis"/></emphasis>
	<crc16><x path="Int"/></crc16>
	<channelMode><e path="format.mp3.ChannelMode"/></channelMode>
	<bitrate><e path="format.mp3.Bitrate"/></bitrate>
</a></typedef>
	<enum path="format.mp3.MPEGVersion" params="" file="format/mp3/Data.hx" module="format.mp3.Data">
		<MPEG_V1/>
		<MPEG_V2/>
		<MPEG_V25/>
		<MPEG_Reserved/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<enum path="format.mp3.Layer" params="" file="format/mp3/Data.hx" module="format.mp3.Data">
		<LayerReserved/>
		<Layer3/>
		<Layer2/>
		<Layer1/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<enum path="format.mp3.ChannelMode" params="" file="format/mp3/Data.hx" module="format.mp3.Data">
		<Stereo/>
		<JointStereo/>
		<DualChannel/>
		<Mono/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<enum path="format.mp3.Emphasis" params="" file="format/mp3/Data.hx" module="format.mp3.Data">
		<NoEmphasis/>
		<Ms50_15/>
		<CCIT_J17/>
		<InvalidEmphasis/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<enum path="format.mp3.FrameType" params="" file="format/mp3/Reader.hx" module="format.mp3.Reader">
		<FT_MP3/>
		<FT_NONE/>
		<haxe_doc>* Used by seekFrame to retrun the type
 * of frame (possibly) found.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<class path="format.mp3.Reader" params="" file="format/mp3/Reader.hx">
		<i><c path="haxe.io.Input"/></i>
		<bits><c path="format.tools.BitsInput"/></bits>
		<version><x path="Int"/></version>
		<samples><x path="Int"/></samples>
		<sampleSize><x path="Int"/></sampleSize>
		<any_read><x path="Bool"/></any_read>
		<id3v2_data><c path="haxe.io.Bytes"/></id3v2_data>
		<id3v2_version><x path="Int"/></id3v2_version>
		<id3v2_flags><x path="Int"/></id3v2_flags>
		<skipID3v2 public="1" set="method" line="78">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Called after found 'ID3' signature
    * at the beginning of the file.
    *
    * Records the raw tag data.</haxe_doc>
		</skipID3v2>
		<seekFrame public="1" set="method" line="101">
			<f a=""><e path="format.mp3.FrameType"/></f>
			<haxe_doc>* Winds the input stream until the 11-bit
    * syncword is found.
    *
    * @returns Bool false if not found (this should happen at eof).</haxe_doc>
		</seekFrame>
		<readFrames public="1" set="method" line="150">
			<f a=""><c path="Array"><t path="format.mp3.MP3Frame"/></c></f>
			<haxe_doc>* Returns all valid frames. Invalid frames
    * are discarded.</haxe_doc>
		</readFrames>
		<readFrameHeader public="1" set="method" line="170">
			<f a=""><t path="format.mp3.MP3Header"/></f>
			<haxe_doc>* Returns null if header proves to be invalid.</haxe_doc>
		</readFrameHeader>
		<readFrame public="1" set="method" line="250">
			<f a=""><t path="format.mp3.MP3Frame"/></f>
			<haxe_doc>* Reads a frame from the input.
    *
    * The input position should already be just past the
    * 11 bit syncword.
    *
    * Returns null if the header is invalid or the frame was incomplete.</haxe_doc>
		</readFrame>
		<read public="1" set="method" line="280">
			<f a=""><t path="format.mp3.MP3"/></f>
			<haxe_doc>* Reads the MP3 data.
    *
    * Currently returns all valid frames.</haxe_doc>
		</read>
		<new public="1" set="method" line="62"><f a="i">
	<c path="haxe.io.Input"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="format.mp3.Tools" params="" file="format/mp3/Tools.hx">
		<getBitrate public="1" set="method" line="40" static="1">
			<f a="mpegVersion:layerIdx:bitrateIdx">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<e path="format.mp3.Bitrate"/>
			</f>
			<haxe_doc>* Returns kbps</haxe_doc>
		</getBitrate>
		<getSamplingRate public="1" set="method" line="50" static="1">
			<f a="mpegVersion:samplingRateIdx">
				<x path="Int"/>
				<x path="Int"/>
				<e path="format.mp3.SamplingRate"/>
			</f>
			<haxe_doc>* Returns Hz</haxe_doc>
		</getSamplingRate>
		<isInvalidFrameHeader public="1" set="method" line="57" static="1">
			<f a="hdr">
				<t path="format.mp3.MP3Header"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Tells whether the header is invalid.</haxe_doc>
		</isInvalidFrameHeader>
		<getSampleDataSize public="1" set="method" line="74" static="1">
			<f a="mpegVersion:bitrate:samplingRate:isPadded:hasCrc">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* Return sample data size. Note that
    * the 4 bytes subtracted is the size of the header,
    * so this 4 bytes less the frame size.
    *
    * Also, 2 bytes are subtracted for CRC too, if present</haxe_doc>
		</getSampleDataSize>
		<getSampleDataSizeHdr public="1" set="method" line="78" static="1"><f a="hdr">
	<t path="format.mp3.MP3Header"/>
	<x path="Int"/>
</f></getSampleDataSizeHdr>
		<getSampleCount public="1" set="method" line="89" static="1">
			<f a="mpegVersion">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* Returns the number of samples in the frame.</haxe_doc>
		</getSampleCount>
		<getSampleCountHdr public="1" set="method" line="94" static="1"><f a="hdr">
	<t path="format.mp3.MP3Header"/>
	<x path="Int"/>
</f></getSampleCountHdr>
		<getFrameInfo public="1" set="method" line="102" static="1">
			<f a="fr">
				<t path="format.mp3.MP3Frame"/>
				<c path="String"/>
			</f>
			<haxe_doc>* Displays frame info in human-readable format.
    * Subject to change, do not use for programmatical parsing!</haxe_doc>
		</getFrameInfo>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="format.mp3.Writer" params="" file="format/mp3/Writer.hx">
		<WRITE_ID3V2 public="1" get="inline" set="null" expr="true" line="37" static="1">
			<x path="Bool"/>
			<meta><m n=":value"><e>true</e></m></meta>
		</WRITE_ID3V2>
		<DONT_WRITE_ID3V2 public="1" get="inline" set="null" expr="false" line="38" static="1">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</DONT_WRITE_ID3V2>
		<o><c path="haxe.io.Output"/></o>
		<bits><c path="format.tools.BitsOutput"/></bits>
		<write public="1" set="method" line="53">
			<f a="mp3:?writeId3v2" v=":true">
				<t path="format.mp3.MP3"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ writeId3v2 : true }</e></m></meta>
			<haxe_doc>* Pass DONT_WRITE_ID3V2 (false) as second parameter to
    * write the mpeg stream without id3v2</haxe_doc>
		</write>
		<writeID3v2 public="1" set="method" line="61"><f a="id3v2">
	<t path="format.mp3.ID3v2Info"/>
	<x path="Void"/>
</f></writeID3v2>
		<writeFrame public="1" set="method" line="81"><f a="f">
	<t path="format.mp3.MP3Frame"/>
	<x path="Void"/>
</f></writeFrame>
		<new public="1" set="method" line="43"><f a="output">
	<c path="haxe.io.Output"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="format.neko.Builtins" params="" file="format/neko/Builtins.hx">
		<CINVALID public="1" get="inline" set="null" expr="-1000" line="33" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>-1000</e></m></meta>
		</CINVALID>
		<vm><c path="format.neko.VM"/></vm>
		<table public="1"><t path="Map">
	<c path="String"/>
	<e path="format.neko.Value"/>
</t></table>
		<b set="method" line="49"><f a="name:f">
	<c path="String"/>
	<e path="format.neko.ValueFunction"/>
	<x path="Void"/>
</f></b>
		<_nargs public="1" set="method" line="53"><f a="f">
	<e path="format.neko.ValueFunction"/>
	<x path="Int"/>
</f></_nargs>
		<_compare public="1" set="method" line="65"><f a="a:b">
	<e path="format.neko.Value"/>
	<e path="format.neko.Value"/>
	<x path="Int"/>
</f></_compare>
		<_string public="1" set="method" line="132"><f a="v">
	<e path="format.neko.Value"/>
	<c path="String"/>
</f></_string>
		<typeof public="1" set="method" line="162"><f a="o">
	<e path="format.neko.Value"/>
	<e path="format.neko.Value"/>
</f></typeof>
		<print set="method" line="170"><f a="vl">
	<c path="Array"><e path="format.neko.Value"/></c>
	<e path="format.neko.Value"/>
</f></print>
		<string set="method" line="178"><f a="v">
	<e path="format.neko.Value"/>
	<e path="format.neko.Value"/>
</f></string>
		<objsetproto set="method" line="182"><f a="o:p">
	<e path="format.neko.Value"/>
	<e path="format.neko.Value"/>
	<e path="format.neko.Value"/>
</f></objsetproto>
		<new public="1" set="method" line="38"><f a="vm">
	<c path="format.neko.VM"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<enum path="format.neko.Opcode" params="" file="format/neko/Data.hx" module="format.neko.Data">
		<OAccNull/>
		<OAccTrue/>
		<OAccFalse/>
		<OAccThis/>
		<OAccInt a="p"><x path="Int"/></OAccInt>
		<OAccStack a="p"><x path="Int"/></OAccStack>
		<OAccGlobal a="p"><x path="Int"/></OAccGlobal>
		<OAccEnv a="p"><x path="Int"/></OAccEnv>
		<OAccField a="p"><c path="String"/></OAccField>
		<OAccArray/>
		<OAccIndex a="p"><x path="Int"/></OAccIndex>
		<OAccBuiltin a="p"><c path="String"/></OAccBuiltin>
		<OSetStack a="p"><x path="Int"/></OSetStack>
		<OSetGlobal a="p"><x path="Int"/></OSetGlobal>
		<OSetEnv a="p"><x path="Int"/></OSetEnv>
		<OSetField a="p"><c path="String"/></OSetField>
		<OSetArray/>
		<OSetIndex a="p"><x path="Int"/></OSetIndex>
		<OSetThis/>
		<OPush/>
		<OPop a="p"><x path="Int"/></OPop>
		<OCall a="p"><x path="Int"/></OCall>
		<OObjCall a="p"><x path="Int"/></OObjCall>
		<OJump a="p"><x path="Int"/></OJump>
		<OJumpIf a="p"><x path="Int"/></OJumpIf>
		<OJumpIfNot a="p"><x path="Int"/></OJumpIfNot>
		<OTrap a="p"><x path="Int"/></OTrap>
		<OEndTrap/>
		<ORet a="p"><x path="Int"/></ORet>
		<OMakeEnv a="p"><x path="Int"/></OMakeEnv>
		<OMakeArray a="p"><x path="Int"/></OMakeArray>
		<OBool/>
		<OIsNull/>
		<OIsNotNull/>
		<OAdd/>
		<OSub/>
		<OMult/>
		<ODiv/>
		<OMod/>
		<OShl/>
		<OShr/>
		<OUShr/>
		<OOr/>
		<OAnd/>
		<OXor/>
		<OEq/>
		<ONeq/>
		<OGt/>
		<OGte/>
		<OLt/>
		<OLte/>
		<ONot/>
		<OTypeOf/>
		<OCompare/>
		<OHash/>
		<ONew/>
		<OJumpTable a="p"><x path="Int"/></OJumpTable>
		<OApply a="p"><x path="Int"/></OApply>
		<OAccStack0/>
		<OAccStack1/>
		<OAccIndex0/>
		<OAccIndex1/>
		<OPhysCompare/>
		<OTailCall a="p:r">
			<x path="Int"/>
			<x path="Int"/>
		</OTailCall>
		<OLoop/>
		<OLast/>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<typedef path="format.neko.DebugInfos" params="" file="format/neko/Data.hx" module="format.neko.Data"><c path="Array"><x path="Null"><a>
	<line><x path="Int"/></line>
	<file><c path="String"/></file>
</a></x></c></typedef>
	<enum path="format.neko.Global" params="" file="format/neko/Data.hx" module="format.neko.Data">
		<GlobalVar a="v"><c path="String"/></GlobalVar>
		<GlobalFunction a="pos:nargs">
			<x path="Int"/>
			<x path="Int"/>
		</GlobalFunction>
		<GlobalString a="v"><c path="String"/></GlobalString>
		<GlobalFloat a="v"><c path="String"/></GlobalFloat>
		<GlobalDebug a="debug"><t path="format.neko.DebugInfos"/></GlobalDebug>
		<GlobalVersion a="v"><x path="Int"/></GlobalVersion>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<typedef path="format.neko.Data" params="" file="format/neko/Data.hx"><a>
	<globals><c path="Array"><e path="format.neko.Global"/></c></globals>
	<fields><c path="Array"><c path="String"/></c></fields>
	<code><c path="Array"><e path="format.neko.Opcode"/></c></code>
</a></typedef>
	<class path="format.neko.Reader" params="" file="format/neko/Reader.hx">
		<i><c path="haxe.io.Input"/></i>
		<error set="method" line="39"><f a=""><d/></f></error>
		<readInt get="inline" set="null" line="44"><f a=""><x path="Int"/></f></readInt>
		<readDebugInfos set="method" line="52"><f a=""><t path="format.neko.DebugInfos"/></f></readDebugInfos>
		<alloc params="T" set="method" line="102"><f a="size">
	<x path="Int"/>
	<c path="Array"><c path="alloc.T"/></c>
</f></alloc>
		<hash set="method" line="108"><f a="s">
	<c path="String"/>
	<x path="Int"/>
</f></hash>
		<read public="1" set="method" line="121"><f a=""><t path="format.neko.Data"/></f></read>
		<new public="1" set="method" line="35"><f a="i">
	<c path="haxe.io.Input"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="format.neko.ValueAbstract" params="" file="format/neko/Value.hx" module="format.neko.Value" interface="1"/>
	<class path="format.neko.ABuffer" params="" file="format/neko/Templo.hx" module="format.neko.Templo">
		<extends path="StringBuf"/>
		<implements path="format.neko.ValueAbstract"/>
		<new public="1" get="inline" set="null" line="5"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="format.neko._Templo.Iter" params="" file="format/neko/Templo.hx" private="1" module="format.neko.Templo">
		<__it public="1"><t path="Iterator"><d/></t></__it>
		<current public="1"><d/></current>
		<index public="1"><x path="Int"/></index>
		<number public="1"><x path="Int"/></number>
		<first public="1"><x path="Bool"/></first>
		<last public="1"><x path="Bool"/></last>
		<odd public="1"><x path="Bool"/></odd>
		<even public="1"><x path="Bool"/></even>
		<size public="1"><x path="Null"><x path="Int"/></x></size>
		<new public="1" set="method" line="18"><f a="it:size">
	<t path="Iterator"><d/></t>
	<x path="Null"><x path="Int"/></x>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="format.neko.Templo" params="" file="format/neko/Templo.hx">
		<makeLoader public="1" set="method" line="157" static="1"><f a="vm">
	<c path="format.neko.VM"/>
	<c path="format.neko.ValueObject"/>
</f></makeLoader>
		<execute public="1" set="method" line="177" static="1"><f a="vm:data:ctx">
	<c path="format.neko.VM"/>
	<t path="format.neko.Data"/>
	<a/>
	<c path="String"/>
</f></execute>
		<_String><e path="format.neko.Value"/></_String>
		<_Array><e path="format.neko.Value"/></_Array>
		<vm><c path="format.neko.VM"/></vm>
		<open set="method" line="65"><f a=""><e path="format.neko.Value"/></f></open>
		<add set="method" line="69"><f a="b:v">
	<e path="format.neko.Value"/>
	<e path="format.neko.Value"/>
	<e path="format.neko.Value"/>
</f></add>
		<close set="method" line="74"><f a="b">
	<e path="format.neko.Value"/>
	<e path="format.neko.Value"/>
</f></close>
		<split set="method" line="78"><f a="s:sep">
	<e path="format.neko.Value"/>
	<e path="format.neko.Value"/>
	<e path="format.neko.Value"/>
</f></split>
		<iter set="method" line="102"><f a="v">
	<e path="format.neko.Value"/>
	<e path="format.neko.Value"/>
</f></iter>
		<loop set="method" line="121"><f a="vi:callb:b:ctx">
	<e path="format.neko.Value"/>
	<e path="format.neko.Value"/>
	<e path="format.neko.Value"/>
	<e path="format.neko.Value"/>
	<e path="format.neko.Value"/>
</f></loop>
		<use set="method" line="147"><f a="file:buf:ctx:content">
	<e path="format.neko.Value"/>
	<e path="format.neko.Value"/>
	<e path="format.neko.Value"/>
	<e path="format.neko.Value"/>
	<e path="format.neko.Value"/>
</f></use>
		<macros set="method" line="152"><f a="file:m">
	<e path="format.neko.Value"/>
	<e path="format.neko.Value"/>
	<e path="format.neko.Value"/>
</f></macros>
		<new public="1" set="method" line="37"><f a="ivm">
	<c path="format.neko.VM"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="format.neko.VM" params="" file="format/neko/VM.hx">
		<builtins><c path="format.neko.Builtins"/></builtins>
		<hloader><x path="Int"/></hloader>
		<hexports><x path="Int"/></hexports>
		<vthis><e path="format.neko.Value"/></vthis>
		<env><c path="Array"><e path="format.neko.Value"/></c></env>
		<stack><c path="haxe.ds.GenericStack"><e path="format.neko.Value"/></c></stack>
		<module><c path="format.neko.Module"/></module>
		<hash set="method" line="52"><f a="s">
	<c path="String"/>
	<x path="Int"/>
</f></hash>
		<doPrint public="1" set="dynamic" line="65"><f a="s">
	<c path="String"/>
	<x path="Void"/>
</f></doPrint>
		<_abstract public="1" params="T" set="method" line="69"><f a="b:t">
	<e path="format.neko.Value"/>
	<x path="Class"><c path="_abstract.T"/></x>
	<c path="_abstract.T"/>
</f></_abstract>
		<valueToString public="1" set="method" line="80"><f a="v">
	<e path="format.neko.Value"/>
	<c path="String"/>
</f></valueToString>
		<exc set="method" line="84"><f a="v">
	<e path="format.neko.Value"/>
	<x path="Void"/>
</f></exc>
		<loadPrim set="method" line="88"><f a="vprim:vargs">
	<e path="format.neko.Value"/>
	<e path="format.neko.Value"/>
	<e path="format.neko.Value"/>
</f></loadPrim>
		<defaultLoader public="1" set="method" line="102"><f a=""><c path="format.neko.ValueObject"/></f></defaultLoader>
		<load public="1" set="method" line="108"><f a="m:?loader">
	<t path="format.neko.Data"/>
	<c path="format.neko.ValueObject"/>
	<c path="format.neko.Module"/>
</f></load>
		<error set="method" line="164"><f a="pc:msg">
	<x path="Int"/>
	<c path="String"/>
	<x path="Void"/>
</f></error>
		<call public="1" set="method" line="177"><f a="vthis:vfun:args">
	<e path="format.neko.Value"/>
	<e path="format.neko.Value"/>
	<c path="Array"><e path="format.neko.Value"/></c>
	<e path="format.neko.Value"/>
</f></call>
		<fcall set="method" line="183"><f a="m:pc">
	<c path="format.neko.Module"/>
	<x path="Int"/>
	<e path="format.neko.Value"/>
</f></fcall>
		<mcall set="method" line="191"><f a="pc:obj:f:nargs">
	<x path="Int"/>
	<e path="format.neko.Value"/>
	<e path="format.neko.Value"/>
	<x path="Int"/>
	<e path="format.neko.Value"/>
</f></mcall>
		<compare get="inline" set="null" line="251"><f a="pc:a:b">
	<x path="Int"/>
	<e path="format.neko.Value"/>
	<e path="format.neko.Value"/>
	<x path="Int"/>
</f></compare>
		<accIndex get="inline" set="null" line="255"><f a="pc:acc:index">
	<x path="Int"/>
	<e path="format.neko.Value"/>
	<x path="Int"/>
	<e path="format.neko.Value"/>
</f></accIndex>
		<wrap public="1" set="method" line="268"><f a="v">
	<d/>
	<x path="Null"><e path="format.neko.Value"/></x>
</f></wrap>
		<unwrap public="1" set="method" line="288"><f a="v">
	<e path="format.neko.Value"/>
	<d/>
</f></unwrap>
		<getField public="1" set="method" line="326"><f a="v:fid">
	<e path="format.neko.Value"/>
	<c path="String"/>
	<e path="format.neko.Value"/>
</f></getField>
		<loop set="method" line="347"><f a="pc">
	<x path="Int"/>
	<e path="format.neko.Value"/>
</f></loop>
		<new public="1" set="method" line="47"><f a=""><x path="Void"/></f></new>
	</class>
	<enum path="format.neko.Value" params="" file="format/neko/Value.hx">
		<VNull/>
		<VInt a="i"><x path="Int"/></VInt>
		<VFloat a="f"><x path="Float"/></VFloat>
		<VBool a="b"><x path="Bool"/></VBool>
		<VString a="s"><c path="String"/></VString>
		<VObject a="o"><c path="format.neko.ValueObject"/></VObject>
		<VArray a="a"><c path="Array"><e path="format.neko.Value"/></c></VArray>
		<VFunction a="f"><e path="format.neko.ValueFunction"/></VFunction>
		<VAbstract a="v"><c path="format.neko.ValueAbstract"/></VAbstract>
		<VProxy a="o"><d/></VProxy>
		<VProxyFunction a="f"><d/></VProxyFunction>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<class path="format.neko.ValueObject" params="" file="format/neko/Value.hx" module="format.neko.Value">
		<fields public="1"><t path="Map">
	<c path="String"/>
	<e path="format.neko.Value"/>
</t></fields>
		<proto public="1"><x path="Null"><c path="format.neko.ValueObject"/></x></proto>
		<new public="1" set="method" line="48"><f a="?p">
	<c path="format.neko.ValueObject"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<enum path="format.neko.ValueFunction" params="" file="format/neko/Value.hx" module="format.neko.Value">
		<VFun0 a="f"><f a=""><e path="format.neko.Value"/></f></VFun0>
		<VFun1 a="f"><f a="">
	<e path="format.neko.Value"/>
	<e path="format.neko.Value"/>
</f></VFun1>
		<VFun2 a="f"><f a=":">
	<e path="format.neko.Value"/>
	<e path="format.neko.Value"/>
	<e path="format.neko.Value"/>
</f></VFun2>
		<VFun3 a="f"><f a="::">
	<e path="format.neko.Value"/>
	<e path="format.neko.Value"/>
	<e path="format.neko.Value"/>
	<e path="format.neko.Value"/>
</f></VFun3>
		<VFun4 a="f"><f a=":::">
	<e path="format.neko.Value"/>
	<e path="format.neko.Value"/>
	<e path="format.neko.Value"/>
	<e path="format.neko.Value"/>
	<e path="format.neko.Value"/>
</f></VFun4>
		<VFun5 a="f"><f a="::::">
	<e path="format.neko.Value"/>
	<e path="format.neko.Value"/>
	<e path="format.neko.Value"/>
	<e path="format.neko.Value"/>
	<e path="format.neko.Value"/>
	<e path="format.neko.Value"/>
</f></VFun5>
		<VFunVar a="f"><f a="">
	<c path="Array"><e path="format.neko.Value"/></c>
	<e path="format.neko.Value"/>
</f></VFunVar>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<class path="format.neko.Module" params="" file="format/neko/Value.hx" module="format.neko.Value">
		<code public="1"><t path="format.neko.Data"/></code>
		<gtable public="1"><c path="Array"><e path="format.neko.Value"/></c></gtable>
		<debug public="1"><x path="Null"><t path="format.neko.DebugInfos"/></x></debug>
		<exports public="1"><c path="format.neko.ValueObject"/></exports>
		<loader public="1"><c path="format.neko.ValueObject"/></loader>
		<new public="1" set="method" line="73"><f a="code:loader">
	<t path="format.neko.Data"/>
	<c path="format.neko.ValueObject"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<enum path="format.pbj.PBJChannel" params="" file="format/pbj/Data.hx" module="format.pbj.Data">
		<R/>
		<G/>
		<B/>
		<A/>
		<M2x2/>
		<M3x3/>
		<M4x4/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<enum path="format.pbj.PBJReg" params="" file="format/pbj/Data.hx" module="format.pbj.Data">
		<RInt a="n:?s">
			<x path="Int"/>
			<c path="Array"><e path="format.pbj.PBJChannel"/></c>
		</RInt>
		<RFloat a="n:?s">
			<x path="Int"/>
			<c path="Array"><e path="format.pbj.PBJChannel"/></c>
		</RFloat>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<enum path="format.pbj.PBJType" params="" file="format/pbj/Data.hx" module="format.pbj.Data">
		<TFloat/>
		<TFloat2/>
		<TFloat3/>
		<TFloat4/>
		<TFloat2x2/>
		<TFloat3x3/>
		<TFloat4x4/>
		<TInt/>
		<TInt2/>
		<TInt3/>
		<TInt4/>
		<TString/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<enum path="format.pbj.PBJConst" params="" file="format/pbj/Data.hx" module="format.pbj.Data">
		<PFloat a="f"><x path="Float"/></PFloat>
		<PFloat2 a="f1:f2">
			<x path="Float"/>
			<x path="Float"/>
		</PFloat2>
		<PFloat3 a="f1:f2:f3">
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
		</PFloat3>
		<PFloat4 a="f1:f2:f3:f4">
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
		</PFloat4>
		<PFloat2x2 a="f"><c path="Array"><x path="Float"/></c></PFloat2x2>
		<PFloat3x3 a="f"><c path="Array"><x path="Float"/></c></PFloat3x3>
		<PFloat4x4 a="f"><c path="Array"><x path="Float"/></c></PFloat4x4>
		<PInt a="i"><x path="Int"/></PInt>
		<PInt2 a="i1:i2">
			<x path="Int"/>
			<x path="Int"/>
		</PInt2>
		<PInt3 a="i1:i2:i3">
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</PInt3>
		<PInt4 a="i1:i2:i3:i4">
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</PInt4>
		<PString a="s"><c path="String"/></PString>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<typedef path="format.pbj._Data.R" params="" file="format/pbj/Data.hx" private="1" module="format.pbj.Data"><e path="format.pbj.PBJReg"/></typedef>
	<enum path="format.pbj.PBJOpcode" params="" file="format/pbj/Data.hx" module="format.pbj.Data">
		<OpNop/>
		<OpAdd a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpAdd>
		<OpSub a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpSub>
		<OpMul a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpMul>
		<OpRcp a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpRcp>
		<OpDiv a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpDiv>
		<OpAtan2 a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpAtan2>
		<OpPow a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpPow>
		<OpMod a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpMod>
		<OpMin a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpMin>
		<OpMax a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpMax>
		<OpStep a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpStep>
		<OpSin a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpSin>
		<OpCos a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpCos>
		<OpTan a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpTan>
		<OpASin a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpASin>
		<OpACos a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpACos>
		<OpATan a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpATan>
		<OpExp a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpExp>
		<OpExp2 a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpExp2>
		<OpLog a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpLog>
		<OpLog2 a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpLog2>
		<OpSqrt a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpSqrt>
		<OpRSqrt a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpRSqrt>
		<OpAbs a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpAbs>
		<OpSign a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpSign>
		<OpFloor a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpFloor>
		<OpCeil a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpCeil>
		<OpFract a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpFract>
		<OpMov a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpMov>
		<OpFloatToInt a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpFloatToInt>
		<OpIntToFloat a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpIntToFloat>
		<OpMatrixMatrixMult a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpMatrixMatrixMult>
		<OpVectorMatrixMult a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpVectorMatrixMult>
		<OpMatrixVectorMult a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpMatrixVectorMult>
		<OpNormalize a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpNormalize>
		<OpLength a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpLength>
		<OpDistance a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpDistance>
		<OpDotProduct a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpDotProduct>
		<OpCrossProduct a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpCrossProduct>
		<OpEqual a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpEqual>
		<OpNotEqual a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpNotEqual>
		<OpLessThan a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpLessThan>
		<OpLessThanEqual a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpLessThanEqual>
		<OpLogicalNot a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpLogicalNot>
		<OpLogicalAnd a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpLogicalAnd>
		<OpLogicalOr a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpLogicalOr>
		<OpLogicalXor a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpLogicalXor>
		<OpSampleNearest a="dst:src:srcTexture">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
			<x path="Int"/>
		</OpSampleNearest>
		<OpSampleLinear a="dst:src:srcTexture">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
			<x path="Int"/>
		</OpSampleLinear>
		<OpLoadInt a="dst:v">
			<t path="format.pbj._Data.R"/>
			<x path="Int"/>
		</OpLoadInt>
		<OpLoadFloat a="dst:v">
			<t path="format.pbj._Data.R"/>
			<x path="Float"/>
		</OpLoadFloat>
		<OpIf a="cond"><t path="format.pbj._Data.R"/></OpIf>
		<OpElse/>
		<OpEndIf/>
		<OpFloatToBool a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpFloatToBool>
		<OpBoolToFloat a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpBoolToFloat>
		<OpIntToBool a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpIntToBool>
		<OpBoolToInt a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpBoolToInt>
		<OpVectorEqual a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpVectorEqual>
		<OpVectorNotEqual a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpVectorNotEqual>
		<OpBoolAny a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpBoolAny>
		<OpBoolAll a="dst:src">
			<t path="format.pbj._Data.R"/>
			<t path="format.pbj._Data.R"/>
		</OpBoolAll>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<typedef path="format.pbj.PBJMeta" params="" file="format/pbj/Data.hx" module="format.pbj.Data"><a>
	<value><e path="format.pbj.PBJConst"/></value>
	<key><c path="String"/></key>
</a></typedef>
	<enum path="format.pbj.PBJParam" params="" file="format/pbj/Data.hx" module="format.pbj.Data">
		<Parameter a="type:out:reg">
			<e path="format.pbj.PBJType"/>
			<x path="Bool"/>
			<e path="format.pbj.PBJReg"/>
		</Parameter>
		<Texture a="channels:index">
			<x path="Int"/>
			<x path="Int"/>
		</Texture>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<typedef path="format.pbj.PBJ" params="" file="format/pbj/Data.hx" module="format.pbj.Data"><a>
	<version><x path="Int"/></version>
	<parameters><c path="Array"><a>
	<p><e path="format.pbj.PBJParam"/></p>
	<name><c path="String"/></name>
	<metas><c path="Array"><t path="format.pbj.PBJMeta"/></c></metas>
</a></c></parameters>
	<name><c path="String"/></name>
	<metadatas><c path="Array"><t path="format.pbj.PBJMeta"/></c></metadatas>
	<code><c path="Array"><e path="format.pbj.PBJOpcode"/></c></code>
</a></typedef>
	<class path="format.pbj.Reader" params="" file="format/pbj/Reader.hx">
		<i><c path="haxe.io.Input"/></i>
		<chans><c path="Array"><e path="format.pbj.PBJChannel"/></c></chans>
		<getType set="method" line="40"><f a="t">
	<x path="Int"/>
	<e path="format.pbj.PBJType"/>
</f></getType>
		<srcReg set="method" line="58"><f a="src:size">
	<x path="Int"/>
	<x path="Int"/>
	<e path="format.pbj.PBJReg"/>
</f></srcReg>
		<dstReg set="method" line="70"><f a="dst:mask">
	<x path="Int"/>
	<x path="Int"/>
	<e path="format.pbj.PBJReg"/>
</f></dstReg>
		<mReg set="method" line="82"><f a="r:matrix">
	<x path="Int"/>
	<x path="Int"/>
	<e path="format.pbj.PBJReg"/>
</f></mReg>
		<reg set="method" line="86"><f a="t:s">
	<x path="Int"/>
	<x path="Null"><c path="Array"><e path="format.pbj.PBJChannel"/></c></x>
	<e path="format.pbj.PBJReg"/>
</f></reg>
		<readFloat set="method" line="92"><f a=""><x path="Float"/></f></readFloat>
		<readInt get="inline" set="null" line="99"><f a=""><x path="Int"/></f></readInt>
		<readValue set="method" line="107"><f a="t">
	<e path="format.pbj.PBJType"/>
	<e path="format.pbj.PBJConst"/>
</f></readValue>
		<assert set="method" line="145"><f a="v1:v2">
	<d/>
	<d/>
	<x path="Void"/>
</f></assert>
		<readOp set="method" line="149"><f a="op">
	<f a=":">
		<e path="format.pbj.PBJReg"/>
		<e path="format.pbj.PBJReg"/>
		<e path="format.pbj.PBJOpcode"/>
	</f>
	<e path="format.pbj.PBJOpcode"/>
</f></readOp>
		<read public="1" set="method" line="166"><f a=""><t path="format.pbj.PBJ"/></f></read>
		<new public="1" set="method" line="35"><f a="i">
	<c path="haxe.io.Input"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="format.pbj.Tools" params="" file="format/pbj/Tools.hx">
		<ext set="method" line="32" static="1"><f a="e">
	<c path="Array"><e path="format.pbj.PBJChannel"/></c>
	<c path="String"/>
</f></ext>
		<dumpReg public="1" set="method" line="49" static="1"><f a="r">
	<e path="format.pbj.PBJReg"/>
	<c path="String"/>
</f></dumpReg>
		<call set="method" line="56" static="1"><f a="p:vl">
	<c path="String"/>
	<c path="Array"><d/></c>
	<c path="String"/>
</f></call>
		<dumpValue public="1" set="method" line="60" static="1"><f a="v">
	<e path="format.pbj.PBJConst"/>
	<c path="String"/>
</f></dumpValue>
		<getValueType public="1" set="method" line="77" static="1"><f a="v">
	<e path="format.pbj.PBJConst"/>
	<e path="format.pbj.PBJType"/>
</f></getValueType>
		<getMatrixMaskBits public="1" set="method" line="94" static="1"><f a="n">
	<x path="Int"/>
	<x path="Int"/>
</f></getMatrixMaskBits>
		<dumpType public="1" set="method" line="103" static="1"><f a="t">
	<x path="EnumValue"/>
	<c path="String"/>
</f></dumpType>
		<dumpOpCode public="1" set="method" line="107" static="1"><f a="c">
	<e path="format.pbj.PBJOpcode"/>
	<c path="String"/>
</f></dumpOpCode>
		<dump public="1" set="method" line="124" static="1"><f a="p">
	<t path="format.pbj.PBJ"/>
	<c path="String"/>
</f></dump>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="format.pbj.Writer" params="" file="format/pbj/Writer.hx">
		<o><c path="haxe.io.Output"/></o>
		<getTypeCode set="method" line="38"><f a="t">
	<e path="format.pbj.PBJType"/>
	<x path="Int"/>
</f></getTypeCode>
		<regCode set="method" line="55"><f a="r">
	<e path="format.pbj.PBJReg"/>
	<x path="Int"/>
</f></regCode>
		<getMatrixBits set="method" line="62"><f a="t">
	<e path="format.pbj.PBJType"/>
	<x path="Int"/>
</f></getMatrixBits>
		<getSizeBits set="method" line="71"><f a="t">
	<e path="format.pbj.PBJType"/>
	<x path="Int"/>
</f></getSizeBits>
		<assert set="method" line="82"><f a="v1:v2">
	<d/>
	<d/>
	<x path="Void"/>
</f></assert>
		<writeFloat set="method" line="86"><f a="v">
	<x path="Float"/>
	<x path="Void"/>
</f></writeFloat>
		<writeValue set="method" line="92"><f a="v">
	<e path="format.pbj.PBJConst"/>
	<x path="Void"/>
</f></writeValue>
		<writeMeta set="method" line="140"><f a="m">
	<t path="format.pbj.PBJMeta"/>
	<x path="Void"/>
</f></writeMeta>
		<destMask set="method" line="148"><f a="e">
	<c path="Array"><e path="format.pbj.PBJChannel"/></c>
	<x path="Int"/>
</f></destMask>
		<srcSwizzle set="method" line="171"><f a="e:size">
	<c path="Array"><e path="format.pbj.PBJChannel"/></c>
	<x path="Int"/>
	<x path="Int"/>
</f></srcSwizzle>
		<writeDest set="method" line="188"><f a="dst:size">
	<e path="format.pbj.PBJReg"/>
	<x path="Int"/>
	<x path="Void"/>
</f></writeDest>
		<writeSrc set="method" line="194"><f a="src:size">
	<e path="format.pbj.PBJReg"/>
	<x path="Int"/>
	<x path="Void"/>
</f></writeSrc>
		<writeOp set="method" line="199"><f a="code:dst:src">
	<x path="Int"/>
	<e path="format.pbj.PBJReg"/>
	<e path="format.pbj.PBJReg"/>
	<x path="Void"/>
</f></writeOp>
		<writeCode set="method" line="219"><f a="c">
	<e path="format.pbj.PBJOpcode"/>
	<x path="Void"/>
</f></writeCode>
		<writeInt get="inline" set="null" line="316"><f a="v">
	<x path="Int"/>
	<x path="Void"/>
</f></writeInt>
		<write public="1" set="method" line="324"><f a="p">
	<t path="format.pbj.PBJ"/>
	<x path="Void"/>
</f></write>
		<new public="1" set="method" line="34"><f a="o">
	<c path="haxe.io.Output"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.io.Bytes" params="" file="D:\Projects\haxe\std/haxe/io/Bytes.hx">
		<alloc public="1" set="method" line="549" static="1">
			<f a="length">
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>Returns a new `Bytes` instance with the given `length`. The values of the
		bytes are not initialized and may not be zero.</haxe_doc>
		</alloc>
		<ofString public="1" set="method" line="580" static="1">
			<f a="s:?encoding">
				<c path="String"/>
				<e path="haxe.io.Encoding"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>Returns the `Bytes` representation of the given `String`, using the
		specified encoding (UTF-8 by default).</haxe_doc>
		</ofString>
		<length public="1" set="null"><x path="Int"/></length>
		<b><t path="haxe.io.BytesData"/></b>
		<blit public="1" set="method" line="90">
			<f a="pos:src:srcpos:len">
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Copies `len` bytes from `src` into this instance.
		@param pos Zero-based location in `this` instance at which to start writing
			bytes.
		@param src Source `Bytes` instance from which to copy bytes.
		@param srcpos Zero-based location at `src` from which bytes will be copied.
		@param len Number of bytes to be copied.</haxe_doc>
		</blit>
		<fill public="1" set="method" line="132">
			<f a="pos:len:value">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets `len` consecutive bytes starting from index `pos` of `this` instance
		to `value`.</haxe_doc>
		</fill>
		<sub public="1" set="method" line="155">
			<f a="pos:len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>Returns a new `Bytes` instance that contains a copy of `len` bytes of
		`this` instance, starting at index `pos`.</haxe_doc>
		</sub>
		<getString public="1" set="method" line="415">
			<f a="pos:len:?encoding">
				<x path="Int"/>
				<x path="Int"/>
				<e path="haxe.io.Encoding"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the `len`-bytes long string stored at the given position `pos`,
		interpreted with the given `encoding` (UTF-8 by default).</haxe_doc>
		</getString>
		<toString public="1" set="method" line="502">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a `String` representation of the bytes interpreted as UTF-8.</haxe_doc>
		</toString>
		<new set="method" line="34"><f a="length:b">
	<x path="Int"/>
	<t path="haxe.io.BytesData"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="format.pdf.Crypt" params="" file="format/pdf/Crypt.hx">
		<PAD_BYTES expr="initPadBytes()" line="32" static="1">
			<c path="haxe.io.Bytes"/>
			<meta><m n=":value"><e>initPadBytes()</e></m></meta>
		</PAD_BYTES>
		<initPadBytes set="method" line="33" static="1"><f a=""><c path="haxe.io.Bytes"/></f></initPadBytes>
		<version><x path="Int"/></version>
		<revision><x path="Int"/></revision>
		<fileKey><c path="haxe.io.Bytes"/></fileKey>
		<userPassword><c path="String"/></userPassword>
		<decrypt public="1" set="method" line="50"><f a="data">
	<c path="Array"><e path="format.pdf.Data"/></c>
	<c path="Array"><e path="format.pdf.Data"/></c>
</f></decrypt>
		<decryptObject set="method" line="86"><f a="key:o">
	<c path="haxe.io.Bytes"/>
	<e path="format.pdf.Data"/>
	<e path="format.pdf.Data"/>
</f></decryptObject>
		<decryptString set="method" line="115"><f a="s:k">
	<c path="String"/>
	<c path="haxe.io.Bytes"/>
	<c path="String"/>
</f></decryptString>
		<decryptBytes set="method" line="119"><f a="b:k">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></decryptBytes>
		<buildFileKey set="method" line="126"><f a="fileId:h">
	<e path="format.pdf.Data"/>
	<t path="Map">
		<c path="String"/>
		<e path="format.pdf.Data"/>
	</t>
	<c path="haxe.io.Bytes"/>
</f></buildFileKey>
		<buildObjectKey set="method" line="167"><f a="id:rev">
	<x path="Int"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></buildObjectKey>
		<new public="1" set="method" line="46"><f a="?pass">
	<c path="String"/>
	<x path="Void"/>
</f></new>
	</class>
	<enum path="format.pdf.Data" params="" file="format/pdf/Data.hx">
		<DNull/>
		<DBool a="b"><x path="Bool"/></DBool>
		<DNumber a="n"><x path="Float"/></DNumber>
		<DString a="s"><c path="String"/></DString>
		<DHexString a="s"><c path="String"/></DHexString>
		<DName a="s"><c path="String"/></DName>
		<DArray a="a"><c path="Array"><e path="format.pdf.Data"/></c></DArray>
		<DDict a="h"><t path="Map">
	<c path="String"/>
	<e path="format.pdf.Data"/>
</t></DDict>
		<DIndirect a="id:rev:v">
			<x path="Int"/>
			<x path="Int"/>
			<e path="format.pdf.Data"/>
		</DIndirect>
		<DStream a="b:props">
			<c path="haxe.io.Bytes"/>
			<t path="Map">
				<c path="String"/>
				<e path="format.pdf.Data"/>
			</t>
		</DStream>
		<DRef a="id:rev">
			<x path="Int"/>
			<x path="Int"/>
		</DRef>
		<DXRefTable a="t"><c path="Array"><a>
	<start><x path="Int"/></start>
	<entries><c path="Array"><a>
	<used><x path="Bool"/></used>
	<offset><x path="Int"/></offset>
	<gen><x path="Int"/></gen>
</a></c></entries>
</a></c></DXRefTable>
		<DTrailer a="o"><e path="format.pdf.Data"/></DTrailer>
		<DStartXRef a="pos"><x path="Int"/></DStartXRef>
		<DComment a="s"><c path="String"/></DComment>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<class path="format.pdf.Extract" params="" file="format/pdf/Extract.hx">
		<expect set="method" line="31" static="1"><f a="kind:o">
	<c path="String"/>
	<e path="format.pdf.Data"/>
	<d/>
</f></expect>
		<int public="1" set="method" line="35" static="1"><f a="o">
	<e path="format.pdf.Data"/>
	<x path="Int"/>
</f></int>
		<string public="1" set="method" line="47" static="1"><f a="o">
	<e path="format.pdf.Data"/>
	<c path="String"/>
</f></string>
		<bool public="1" set="method" line="55" static="1"><f a="o:?def">
	<e path="format.pdf.Data"/>
	<x path="Bool"/>
	<x path="Null"><x path="Bool"/></x>
</f></bool>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="format.pdf.Filter" params="" file="format/pdf/Filter.hx">
		<unfilter public="1" set="method" line="35"><f a="data">
	<c path="Array"><e path="format.pdf.Data"/></c>
	<c path="Array"><e path="format.pdf.Data"/></c>
</f></unfilter>
		<unfilterObject public="1" set="method" line="42"><f a="o">
	<e path="format.pdf.Data"/>
	<e path="format.pdf.Data"/>
</f></unfilterObject>
		<runFilter set="method" line="72"><f a="b:filter:props">
	<c path="haxe.io.Bytes"/>
	<e path="format.pdf.Data"/>
	<t path="Map">
		<c path="String"/>
		<e path="format.pdf.Data"/>
	</t>
	<c path="haxe.io.Bytes"/>
</f></runFilter>
		<new public="1" set="method" line="32"><f a=""><x path="Void"/></f></new>
	</class>
	<enum path="format.pdf._Reader.Break" params="" file="format/pdf/Reader.hx" private="1" module="format.pdf.Reader">
		<BDictEnd/>
		<BEndObj/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<class path="format.pdf.Reader" params="" file="format/pdf/Reader.hx">
		<char><x path="Null"><x path="Int"/></x></char>
		<objects><c path="Array"><e path="format.pdf.Data"/></c></objects>
		<readEOL set="method" line="47"><f a="i">
	<c path="haxe.io.Input"/>
	<x path="Void"/>
</f></readEOL>
		<invalidChar set="method" line="57"><f a="c">
	<x path="Int"/>
	<unknown/>
</f></invalidChar>
		<invalidBreak set="method" line="61"><f a="e">
	<e path="format.pdf._Reader.Break"/>
	<unknown/>
</f></invalidBreak>
		<readObjectEof set="method" line="65"><f a="i">
	<c path="haxe.io.Input"/>
	<e path="format.pdf.Data"/>
</f></readObjectEof>
		<readObject set="method" line="82"><f a="i">
	<c path="haxe.io.Input"/>
	<e path="format.pdf.Data"/>
</f></readObject>
		<readDictionnary set="method" line="275"><f a="i">
	<c path="haxe.io.Input"/>
	<e path="format.pdf.Data"/>
</f></readDictionnary>
		<readIndirect set="method" line="301"><f a="i">
	<c path="haxe.io.Input"/>
	<e path="format.pdf.Data"/>
</f></readIndirect>
		<readStream set="method" line="319"><f a="i">
	<c path="haxe.io.Input"/>
	<e path="format.pdf.Data"/>
</f></readStream>
		<readXRefTable set="method" line="375"><f a="i">
	<c path="haxe.io.Input"/>
	<e path="format.pdf.Data"/>
</f></readXRefTable>
		<read public="1" set="method" line="404"><f a="i">
	<c path="haxe.io.Input"/>
	<c path="Array"><e path="format.pdf.Data"/></c>
</f></read>
		<new public="1" set="method" line="44"><f a=""><x path="Void"/></f></new>
	</class>
	<abstract path="format.pex.EmitterType" params="" file="format/pex/Data.hx" module="format.pex.Data">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="format.pex._Data.EmitterType_Impl_" params="" file="format/pex/Data.hx" private="1" module="format.pex.Data" extern="1">
	<Gravity public="1" get="inline" set="null" expr="cast 0" line="6" static="1">
		<x path="format.pex.EmitterType"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Gravity>
	<Radial public="1" get="inline" set="null" expr="cast 1" line="7" static="1">
		<x path="format.pex.EmitterType"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Radial>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="format.pex._Data.EmitterType_Impl_" params="" file="format/pex/Data.hx" private="1" module="format.pex.Data" extern="1">
		<Gravity public="1" get="inline" set="null" expr="cast 0" line="6" static="1">
			<x path="format.pex.EmitterType"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Gravity>
		<Radial public="1" get="inline" set="null" expr="cast 1" line="7" static="1">
			<x path="format.pex.EmitterType"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Radial>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="format.pex.BlendFunction" params="" file="format/pex/Data.hx" module="format.pex.Data">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="format.pex._Data.BlendFunction_Impl_" params="" file="format/pex/Data.hx" private="1" module="format.pex.Data" extern="1">
	<Zero public="1" get="inline" set="null" expr="cast 0" line="13" static="1">
		<x path="format.pex.BlendFunction"/>
		<meta>
			<m n=":value"><e>cast 0</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Zero>
	<One public="1" get="inline" set="null" expr="cast 1" line="14" static="1">
		<x path="format.pex.BlendFunction"/>
		<meta>
			<m n=":value"><e>cast 1</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</One>
	<SourceColor public="1" get="inline" set="null" expr="cast 0x300" line="15" static="1">
		<x path="format.pex.BlendFunction"/>
		<meta>
			<m n=":value"><e>cast 0x300</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SourceColor>
	<OneMinusSourceColor public="1" get="inline" set="null" expr="cast 0x301" line="16" static="1">
		<x path="format.pex.BlendFunction"/>
		<meta>
			<m n=":value"><e>cast 0x301</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OneMinusSourceColor>
	<SourceAlpha public="1" get="inline" set="null" expr="cast 0x302" line="17" static="1">
		<x path="format.pex.BlendFunction"/>
		<meta>
			<m n=":value"><e>cast 0x302</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</SourceAlpha>
	<OneMinusSourceAlpha public="1" get="inline" set="null" expr="cast 0x303" line="18" static="1">
		<x path="format.pex.BlendFunction"/>
		<meta>
			<m n=":value"><e>cast 0x303</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OneMinusSourceAlpha>
	<DestinationAlpha public="1" get="inline" set="null" expr="cast 0x304" line="19" static="1">
		<x path="format.pex.BlendFunction"/>
		<meta>
			<m n=":value"><e>cast 0x304</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</DestinationAlpha>
	<OneMinusDestinationAlpha public="1" get="inline" set="null" expr="cast 0x305" line="20" static="1">
		<x path="format.pex.BlendFunction"/>
		<meta>
			<m n=":value"><e>cast 0x305</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OneMinusDestinationAlpha>
	<DestinationColor public="1" get="inline" set="null" expr="cast 0x306" line="21" static="1">
		<x path="format.pex.BlendFunction"/>
		<meta>
			<m n=":value"><e>cast 0x306</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</DestinationColor>
	<OneMinusDestinationColor public="1" get="inline" set="null" expr="cast 0x307" line="22" static="1">
		<x path="format.pex.BlendFunction"/>
		<meta>
			<m n=":value"><e>cast 0x307</e></m>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OneMinusDestinationColor>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="format.pex._Data.BlendFunction_Impl_" params="" file="format/pex/Data.hx" private="1" module="format.pex.Data" extern="1">
		<Zero public="1" get="inline" set="null" expr="cast 0" line="13" static="1">
			<x path="format.pex.BlendFunction"/>
			<meta>
				<m n=":value"><e>cast 0</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Zero>
		<One public="1" get="inline" set="null" expr="cast 1" line="14" static="1">
			<x path="format.pex.BlendFunction"/>
			<meta>
				<m n=":value"><e>cast 1</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</One>
		<SourceColor public="1" get="inline" set="null" expr="cast 0x300" line="15" static="1">
			<x path="format.pex.BlendFunction"/>
			<meta>
				<m n=":value"><e>cast 0x300</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SourceColor>
		<OneMinusSourceColor public="1" get="inline" set="null" expr="cast 0x301" line="16" static="1">
			<x path="format.pex.BlendFunction"/>
			<meta>
				<m n=":value"><e>cast 0x301</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OneMinusSourceColor>
		<SourceAlpha public="1" get="inline" set="null" expr="cast 0x302" line="17" static="1">
			<x path="format.pex.BlendFunction"/>
			<meta>
				<m n=":value"><e>cast 0x302</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</SourceAlpha>
		<OneMinusSourceAlpha public="1" get="inline" set="null" expr="cast 0x303" line="18" static="1">
			<x path="format.pex.BlendFunction"/>
			<meta>
				<m n=":value"><e>cast 0x303</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OneMinusSourceAlpha>
		<DestinationAlpha public="1" get="inline" set="null" expr="cast 0x304" line="19" static="1">
			<x path="format.pex.BlendFunction"/>
			<meta>
				<m n=":value"><e>cast 0x304</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</DestinationAlpha>
		<OneMinusDestinationAlpha public="1" get="inline" set="null" expr="cast 0x305" line="20" static="1">
			<x path="format.pex.BlendFunction"/>
			<meta>
				<m n=":value"><e>cast 0x305</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OneMinusDestinationAlpha>
		<DestinationColor public="1" get="inline" set="null" expr="cast 0x306" line="21" static="1">
			<x path="format.pex.BlendFunction"/>
			<meta>
				<m n=":value"><e>cast 0x306</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</DestinationColor>
		<OneMinusDestinationColor public="1" get="inline" set="null" expr="cast 0x307" line="22" static="1">
			<x path="format.pex.BlendFunction"/>
			<meta>
				<m n=":value"><e>cast 0x307</e></m>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OneMinusDestinationColor>
		<meta><m n=":enum"/></meta>
	</class>
	<abstract path="format.pex.ValueWithVariance" params="T" file="format/pex/Data.hx" module="format.pex.Data">
		<this><a>
	<variance><c path="format.pex.ValueWithVariance.T"/></variance>
	<base><c path="format.pex.ValueWithVariance.T"/></base>
</a></this>
		<meta><m n=":forward">
	<e>base</e>
	<e>variance</e>
</m></meta>
		<impl><class path="format.pex._Data.ValueWithVariance_Impl_" params="" file="format/pex/Data.hx" private="1" module="format.pex.Data">
	<_new public="1" get="inline" set="null" line="28" static="1">
		<f a="base:variance">
			<c path="format.pex.ValueWithVariance.T"/>
			<c path="format.pex.ValueWithVariance.T"/>
			<x path="format.pex.ValueWithVariance"><c path="format.pex.ValueWithVariance.T"/></x>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<random public="1" get="inline" set="null" line="36" static="1">
		<f a="this">
			<a>
				<variance><c path="format.pex.ValueWithVariance.T"/></variance>
				<base><c path="format.pex.ValueWithVariance.T"/></base>
			</a>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Choose a random float within this range.</haxe_doc>
	</random>
	<randomInt public="1" get="inline" set="null" line="44" static="1">
		<f a="this">
			<a>
				<variance><c path="format.pex.ValueWithVariance.T"/></variance>
				<base><c path="format.pex.ValueWithVariance.T"/></base>
			</a>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>* Choose a random integer within this range.</haxe_doc>
	</randomInt>
</class></impl>
	</abstract>
	<class path="format.pex._Data.ValueWithVariance_Impl_" params="" file="format/pex/Data.hx" private="1" module="format.pex.Data">
		<_new public="1" get="inline" set="null" line="28" static="1">
			<f a="base:variance">
				<c path="format.pex.ValueWithVariance.T"/>
				<c path="format.pex.ValueWithVariance.T"/>
				<x path="format.pex.ValueWithVariance"><c path="format.pex.ValueWithVariance.T"/></x>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<random public="1" get="inline" set="null" line="36" static="1">
			<f a="this">
				<a>
					<variance><c path="format.pex.ValueWithVariance.T"/></variance>
					<base><c path="format.pex.ValueWithVariance.T"/></base>
				</a>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Choose a random float within this range.</haxe_doc>
		</random>
		<randomInt public="1" get="inline" set="null" line="44" static="1">
			<f a="this">
				<a>
					<variance><c path="format.pex.ValueWithVariance.T"/></variance>
					<base><c path="format.pex.ValueWithVariance.T"/></base>
				</a>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>* Choose a random integer within this range.</haxe_doc>
		</randomInt>
	</class>
	<typedef path="format.pex.FloatWithVariance" params="" file="format/pex/Data.hx" module="format.pex.Data"><x path="format.pex.ValueWithVariance"><x path="Float"/></x></typedef>
	<typedef path="format.pex.UIntWithVariance" params="" file="format/pex/Data.hx" module="format.pex.Data"><x path="format.pex.ValueWithVariance"><x path="UInt"/></x></typedef>
	<class path="format.pex.PexParticle" params="" file="format/pex/Data.hx" module="format.pex.Data">
		<emitterType public="1" expr="EmitterType.Gravity">
			<x path="format.pex.EmitterType"/>
			<meta><m n=":value"><e>EmitterType.Gravity</e></m></meta>
		</emitterType>
		<textureName public="1"><c path="String"/></textureName>
		<emitterXVariance public="1" expr="0">
			<x path="Float"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</emitterXVariance>
		<emitterYVariance public="1" expr="0">
			<x path="Float"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</emitterYVariance>
		<duration public="1" expr="0">
			<x path="Float"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</duration>
		<maxParticles public="1" expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</maxParticles>
		<lifespan public="1"><t path="format.pex.FloatWithVariance"/></lifespan>
		<startSize public="1"><t path="format.pex.FloatWithVariance"/></startSize>
		<endSize public="1"><t path="format.pex.FloatWithVariance"/></endSize>
		<emitAngle public="1"><t path="format.pex.FloatWithVariance"/></emitAngle>
		<startRotation public="1"><t path="format.pex.FloatWithVariance"/></startRotation>
		<endRotation public="1"><t path="format.pex.FloatWithVariance"/></endRotation>
		<speed public="1"><t path="format.pex.FloatWithVariance"/></speed>
		<gravityX public="1" expr="0">
			<x path="Float"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</gravityX>
		<gravityY public="1" expr="0">
			<x path="Float"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</gravityY>
		<radialAcceleration public="1"><t path="format.pex.FloatWithVariance"/></radialAcceleration>
		<tangentialAcceleration public="1"><t path="format.pex.FloatWithVariance"/></tangentialAcceleration>
		<maxRadius public="1"><t path="format.pex.FloatWithVariance"/></maxRadius>
		<minRadius public="1"><t path="format.pex.FloatWithVariance"/></minRadius>
		<rotatePerSecond public="1"><t path="format.pex.FloatWithVariance"/></rotatePerSecond>
		<startColor public="1"><t path="format.pex.UIntWithVariance"/></startColor>
		<endColor public="1"><t path="format.pex.UIntWithVariance"/></endColor>
		<blendSource public="1"><x path="format.pex.BlendFunction"/></blendSource>
		<blendDestination public="1"><x path="format.pex.BlendFunction"/></blendDestination>
		<new public="1" set="method" line="85"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="format.pex.Reader" params="" file="format/pex/Reader.hx">
		<read public="1" set="method" line="12" static="1">
			<f a="i">
				<c path="haxe.io.Input"/>
				<c path="format.pex.PexParticle"/>
			</f>
			<haxe_doc>* Parse a PexParticle from a .pex XML file.</haxe_doc>
		</read>
		<parse public="1" set="method" line="21" static="1">
			<f a="contents">
				<c path="String"/>
				<c path="format.pex.PexParticle"/>
			</f>
			<haxe_doc>* Parse a PexParticle from a string contianing .pex XML.</haxe_doc>
		</parse>
		<parseFloat get="inline" set="null" line="54" static="1">
			<f a="data:nodeName:?att" v="::&quot;value&quot;">
				<t path="haxe.xml.Fast"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Float"/>
			</f>
			<meta><m n=":value"><e>{ att : "value" }</e></m></meta>
		</parseFloat>
		<parseInt get="inline" set="null" line="59" static="1">
			<f a="data:nodeName:?att" v="::&quot;value&quot;">
				<t path="haxe.xml.Fast"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ att : "value" }</e></m></meta>
		</parseInt>
		<parseFloatWithVariance get="inline" set="null" line="64" static="1"><f a="data:nodeName:?varianceName">
	<t path="haxe.xml.Fast"/>
	<c path="String"/>
	<c path="String"/>
	<t path="format.pex.FloatWithVariance"/>
</f></parseFloatWithVariance>
		<parseColor get="inline" set="null" line="72" static="1"><f a="data:nodeName:?varianceName">
	<t path="haxe.xml.Fast"/>
	<c path="String"/>
	<c path="String"/>
	<t path="format.pex.UIntWithVariance"/>
</f></parseColor>
		<makeColor get="inline" set="null" line="86" static="1"><f a="a:r:g:b">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="UInt"/>
</f></makeColor>
		<findNode set="method" line="95" static="1">
			<f a="data:nodeName">
				<t path="haxe.xml.Fast"/>
				<c path="String"/>
				<t path="haxe.xml.Fast"/>
			</f>
			<haxe_doc>* Case-insensitive node search to deal with historical case changes of pex
	 * element names.</haxe_doc>
		</findNode>
	</class>
	<enum path="format.png.Color" params="" file="format/png/Data.hx" module="format.png.Data">
		<ColGrey a="alpha"><x path="Bool"/></ColGrey>
		<ColTrue a="alpha"><x path="Bool"/></ColTrue>
		<ColIndexed/>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<typedef path="format.png.Header" params="" file="format/png/Data.hx" module="format.png.Data"><a>
	<width><x path="Int"/></width>
	<interlaced><x path="Bool"/></interlaced>
	<height><x path="Int"/></height>
	<color><e path="format.png.Color"/></color>
	<colbits><x path="Int"/></colbits>
</a></typedef>
	<enum path="format.png.Chunk" params="" file="format/png/Data.hx" module="format.png.Data">
		<CEnd/>
		<CHeader a="h"><t path="format.png.Header"/></CHeader>
		<CData a="b"><c path="haxe.io.Bytes"/></CData>
		<CPalette a="b"><c path="haxe.io.Bytes"/></CPalette>
		<CUnknown a="id:data">
			<c path="String"/>
			<c path="haxe.io.Bytes"/>
		</CUnknown>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<typedef path="format.png.Data" params="" file="format/png/Data.hx"><t path="List"><e path="format.png.Chunk"/></t></typedef>
	<class path="format.png.Reader" params="" file="format/png/Reader.hx">
		<i><c path="haxe.io.Input"/></i>
		<checkCRC public="1"><x path="Bool"/></checkCRC>
		<read public="1" set="method" line="41"><f a=""><t path="format.png.Data"/></f></read>
		<readHeader set="method" line="56"><f a="i">
	<c path="haxe.io.Input"/>
	<t path="format.png.Header"/>
</f></readHeader>
		<readChunk set="method" line="91"><f a=""><e path="format.png.Chunk"/></f></readChunk>
		<new public="1" set="method" line="35"><f a="i">
	<c path="haxe.io.Input"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="format.png.Tools" params="" file="format/png/Tools.hx">
		<getHeader public="1" set="method" line="35" static="1">
			<f a="d">
				<t path="format.png.Data"/>
				<t path="format.png.Header"/>
			</f>
			<haxe_doc>Returns the PNG header informations. Throws an exception if no header found.</haxe_doc>
		</getHeader>
		<getPalette public="1" set="method" line="47" static="1">
			<f a="d">
				<t path="format.png.Data"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>Return the PNG palette colors, or null if no palette chunk was found</haxe_doc>
		</getPalette>
		<filter get="inline" set="null" line="56" static="1">
			<f a="data:x:y:stride:prev:p:?numChannels" v="::::::4">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ numChannels : 4 }</e></m></meta>
		</filter>
		<reverseBytes public="1" set="method" line="69" static="1">
			<f a="b">
				<c path="haxe.io.Bytes"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Converts from BGRA to ARGB and the other way by reversing bytes.</haxe_doc>
		</reverseBytes>
		<extractGrey public="1" set="method" line="106" static="1">
			<f a="d">
				<t path="format.png.Data"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":noDebug"/></meta>
			<haxe_doc>Decode the greyscale PNG data and apply filters, extracting only the grey channel if alpha is present.</haxe_doc>
		</extractGrey>
		<extract32 public="1" set="method" line="205" static="1">
			<f a="d:?bytes:?flipY">
				<t path="format.png.Data"/>
				<c path="haxe.io.Bytes"/>
				<x path="Bool"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":noDebug"/></meta>
			<haxe_doc>Decode the PNG data and apply filters. By default this will output BGRA low-endian format. You can use the [reverseBytes] function to inverse the bytes to ARGB big-endian format.</haxe_doc>
		</extract32>
		<buildGrey public="1" set="method" line="653" static="1">
			<f a="width:height:data:?level" v=":::9">
				<x path="Int"/>
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<t path="format.png.Data"/>
			</f>
			<meta><m n=":value"><e>{ level : 9 }</e></m></meta>
			<haxe_doc>Creates PNG data from bytes that contains one bytes (grey values) for each pixel.</haxe_doc>
		</buildGrey>
		<buildIndexed public="1" set="method" line="672" static="1">
			<f a="width:height:data:palette:?level" v="::::9">
				<x path="Int"/>
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<t path="format.png.Data"/>
			</f>
			<meta><m n=":value"><e>{ level : 9 }</e></m></meta>
			<haxe_doc>Creates PNG data from bytes that contains a one byte palette index for each pixel and a separate palette with 3 RGB bytes per color.</haxe_doc>
		</buildIndexed>
		<buildRGB public="1" set="method" line="691" static="1">
			<f a="width:height:data:?level" v=":::9">
				<x path="Int"/>
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<t path="format.png.Data"/>
			</f>
			<meta><m n=":value"><e>{ level : 9 }</e></m></meta>
			<haxe_doc>Creates PNG data from bytes that contains three bytes (R,G and B values) for each pixel.</haxe_doc>
		</buildRGB>
		<build32ARGB public="1" set="method" line="714" static="1">
			<f a="width:height:data:?level" v=":::9">
				<x path="Int"/>
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<t path="format.png.Data"/>
			</f>
			<meta><m n=":value"><e>{ level : 9 }</e></m></meta>
			<haxe_doc>Creates PNG data from bytes that contains four bytes in ARGB format for each pixel.</haxe_doc>
		</build32ARGB>
		<build32BGRA public="1" set="method" line="738" static="1">
			<f a="width:height:data:?level" v=":::9">
				<x path="Int"/>
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<t path="format.png.Data"/>
			</f>
			<meta><m n=":value"><e>{ level : 9 }</e></m></meta>
			<haxe_doc>Creates PNG data from bytes that contains four bytes in BGRA format for each pixel.</haxe_doc>
		</build32BGRA>
	</class>
	<class path="format.png.Writer" params="" file="format/png/Writer.hx">
		<o><c path="haxe.io.Output"/></o>
		<write public="1" set="method" line="39"><f a="png">
	<t path="format.png.Data"/>
	<x path="Void"/>
</f></write>
		<writeChunk set="method" line="75"><f a="id:data">
	<c path="String"/>
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></writeChunk>
		<new public="1" set="method" line="34"><f a="o">
	<c path="haxe.io.Output"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="format.swf.TagId" params="" file="format/swf/Constants.hx" module="format.swf.Constants">
		<End public="1" get="inline" set="null" expr="0x00" line="37" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x00</e></m></meta>
		</End>
		<ShowFrame public="1" get="inline" set="null" expr="0x01" line="38" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x01</e></m></meta>
		</ShowFrame>
		<DefineShape public="1" get="inline" set="null" expr="0x02" line="39" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x02</e></m></meta>
		</DefineShape>
		<PlaceObject public="1" get="inline" set="null" expr="0x04" line="40" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x04</e></m></meta>
		</PlaceObject>
		<RemoveObject public="1" get="inline" set="null" expr="0x05" line="41" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x05</e></m></meta>
		</RemoveObject>
		<DefineBits public="1" get="inline" set="null" expr="0x06" line="42" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x06</e></m></meta>
		</DefineBits>
		<DefineButton public="1" get="inline" set="null" expr="0x07" line="43" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x07</e></m></meta>
		</DefineButton>
		<JPEGTables public="1" get="inline" set="null" expr="0x08" line="44" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x08</e></m></meta>
		</JPEGTables>
		<SetBackgroundColor public="1" get="inline" set="null" expr="0x09" line="45" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x09</e></m></meta>
		</SetBackgroundColor>
		<DefineFont public="1" get="inline" set="null" expr="0x0A" line="46" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0A</e></m></meta>
		</DefineFont>
		<DefineText public="1" get="inline" set="null" expr="0x0B" line="47" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0B</e></m></meta>
		</DefineText>
		<DoAction public="1" get="inline" set="null" expr="0x0C" line="48" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0C</e></m></meta>
		</DoAction>
		<DefineFontInfo public="1" get="inline" set="null" expr="0x0D" line="49" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0D</e></m></meta>
		</DefineFontInfo>
		<DefineSound public="1" get="inline" set="null" expr="0x0E" line="50" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0E</e></m></meta>
		</DefineSound>
		<StartSound public="1" get="inline" set="null" expr="0x0F" line="51" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x0F</e></m></meta>
		</StartSound>
		<DefineButtonSound public="1" get="inline" set="null" expr="0x11" line="52" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x11</e></m></meta>
		</DefineButtonSound>
		<SoundStreamHead public="1" get="inline" set="null" expr="0x12" line="53" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x12</e></m></meta>
		</SoundStreamHead>
		<SoundStreamBlock public="1" get="inline" set="null" expr="0x13" line="54" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x13</e></m></meta>
		</SoundStreamBlock>
		<DefineBitsLossless public="1" get="inline" set="null" expr="0x14" line="55" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x14</e></m></meta>
		</DefineBitsLossless>
		<DefineBitsJPEG2 public="1" get="inline" set="null" expr="0x15" line="56" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x15</e></m></meta>
		</DefineBitsJPEG2>
		<DefineShape2 public="1" get="inline" set="null" expr="0x16" line="57" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x16</e></m></meta>
		</DefineShape2>
		<DefineButtonCxform public="1" get="inline" set="null" expr="0x17" line="58" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x17</e></m></meta>
		</DefineButtonCxform>
		<Protect public="1" get="inline" set="null" expr="0x18" line="59" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x18</e></m></meta>
		</Protect>
		<PlaceObject2 public="1" get="inline" set="null" expr="0x1A" line="60" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1A</e></m></meta>
		</PlaceObject2>
		<RemoveObject2 public="1" get="inline" set="null" expr="0x1C" line="61" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x1C</e></m></meta>
		</RemoveObject2>
		<DefineShape3 public="1" get="inline" set="null" expr="0x20" line="62" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x20</e></m></meta>
		</DefineShape3>
		<DefineText2 public="1" get="inline" set="null" expr="0x21" line="63" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x21</e></m></meta>
		</DefineText2>
		<DefineButton2 public="1" get="inline" set="null" expr="0x22" line="64" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x22</e></m></meta>
		</DefineButton2>
		<DefineBitsJPEG3 public="1" get="inline" set="null" expr="0x23" line="65" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x23</e></m></meta>
		</DefineBitsJPEG3>
		<DefineBitsLossless2 public="1" get="inline" set="null" expr="0x24" line="66" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x24</e></m></meta>
		</DefineBitsLossless2>
		<DefineEditText public="1" get="inline" set="null" expr="0x25" line="67" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x25</e></m></meta>
		</DefineEditText>
		<DefineSprite public="1" get="inline" set="null" expr="0x27" line="68" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x27</e></m></meta>
		</DefineSprite>
		<FrameLabel public="1" get="inline" set="null" expr="0x2B" line="69" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x2B</e></m></meta>
		</FrameLabel>
		<SoundStreamHead2 public="1" get="inline" set="null" expr="0x2D" line="70" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x2D</e></m></meta>
		</SoundStreamHead2>
		<DefineMorphShape public="1" get="inline" set="null" expr="0x2E" line="71" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x2E</e></m></meta>
		</DefineMorphShape>
		<DefineFont2 public="1" get="inline" set="null" expr="0x30" line="72" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x30</e></m></meta>
		</DefineFont2>
		<ExportAssets public="1" get="inline" set="null" expr="0x38" line="73" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x38</e></m></meta>
		</ExportAssets>
		<ImportAssets public="1" get="inline" set="null" expr="0x39" line="74" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x39</e></m></meta>
		</ImportAssets>
		<EnableDebugger public="1" get="inline" set="null" expr="0x3A" line="75" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x3A</e></m></meta>
		</EnableDebugger>
		<DoInitAction public="1" get="inline" set="null" expr="0x3B" line="76" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x3B</e></m></meta>
		</DoInitAction>
		<DefineVideoStream public="1" get="inline" set="null" expr="0x3C" line="77" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x3C</e></m></meta>
		</DefineVideoStream>
		<VideoFrame public="1" get="inline" set="null" expr="0x3D" line="78" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x3D</e></m></meta>
		</VideoFrame>
		<DefineFontInfo2 public="1" get="inline" set="null" expr="0x3E" line="79" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x3E</e></m></meta>
		</DefineFontInfo2>
		<EnableDebugger2 public="1" get="inline" set="null" expr="0x40" line="80" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x40</e></m></meta>
		</EnableDebugger2>
		<ScriptLimits public="1" get="inline" set="null" expr="0x41" line="81" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x41</e></m></meta>
		</ScriptLimits>
		<SetTabIndex public="1" get="inline" set="null" expr="0x42" line="82" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x42</e></m></meta>
		</SetTabIndex>
		<FileAttributes public="1" get="inline" set="null" expr="0x45" line="83" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x45</e></m></meta>
		</FileAttributes>
		<PlaceObject3 public="1" get="inline" set="null" expr="0x46" line="84" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x46</e></m></meta>
		</PlaceObject3>
		<ImportAssets2 public="1" get="inline" set="null" expr="0x47" line="85" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x47</e></m></meta>
		</ImportAssets2>
		<RawABC public="1" get="inline" set="null" expr="0x48" line="86" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x48</e></m></meta>
		</RawABC>
		<DefineFontAlignZones public="1" get="inline" set="null" expr="0x49" line="87" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x49</e></m></meta>
		</DefineFontAlignZones>
		<CSMTextSettings public="1" get="inline" set="null" expr="0x4A" line="88" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x4A</e></m></meta>
		</CSMTextSettings>
		<DefineFont3 public="1" get="inline" set="null" expr="0x4B" line="89" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x4B</e></m></meta>
		</DefineFont3>
		<SymbolClass public="1" get="inline" set="null" expr="0x4C" line="90" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x4C</e></m></meta>
		</SymbolClass>
		<Metadata public="1" get="inline" set="null" expr="0x4D" line="91" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x4D</e></m></meta>
		</Metadata>
		<DefineScalingGrid public="1" get="inline" set="null" expr="0x4E" line="92" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x4E</e></m></meta>
		</DefineScalingGrid>
		<DoABC public="1" get="inline" set="null" expr="0x52" line="93" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x52</e></m></meta>
		</DoABC>
		<DefineShape4 public="1" get="inline" set="null" expr="0x53" line="94" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x53</e></m></meta>
		</DefineShape4>
		<DefineMorphShape2 public="1" get="inline" set="null" expr="0x54" line="95" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x54</e></m></meta>
		</DefineMorphShape2>
		<DefineSceneAndFrameLabelData public="1" get="inline" set="null" expr="0x56" line="96" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x56</e></m></meta>
		</DefineSceneAndFrameLabelData>
		<DefineBinaryData public="1" get="inline" set="null" expr="0x57" line="97" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x57</e></m></meta>
		</DefineBinaryData>
		<DefineFontName public="1" get="inline" set="null" expr="0x58" line="98" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x58</e></m></meta>
		</DefineFontName>
		<StartSound2 public="1" get="inline" set="null" expr="0x59" line="99" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x59</e></m></meta>
		</StartSound2>
		<DefineBitsJPEG4 public="1" get="inline" set="null" expr="0x5A" line="100" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x5A</e></m></meta>
		</DefineBitsJPEG4>
		<DefineFont4 public="1" get="inline" set="null" expr="0x5B" line="101" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x5B</e></m></meta>
		</DefineFont4>
		<haxe_doc>* Tag id constants
 * not for public usage</haxe_doc>
	</class>
	<class path="format.swf.FillStyleTypeId" params="" file="format/swf/Constants.hx" module="format.swf.Constants">
		<Solid public="1" get="inline" set="null" expr="0x00" line="105" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x00</e></m></meta>
		</Solid>
		<LinearGradient public="1" get="inline" set="null" expr="0x10" line="106" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x10</e></m></meta>
		</LinearGradient>
		<RadialGradient public="1" get="inline" set="null" expr="0x12" line="107" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x12</e></m></meta>
		</RadialGradient>
		<FocalRadialGradient public="1" get="inline" set="null" expr="0x13" line="108" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x13</e></m></meta>
		</FocalRadialGradient>
		<RepeatingBitmap public="1" get="inline" set="null" expr="0x40" line="109" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x40</e></m></meta>
		</RepeatingBitmap>
		<ClippedBitmap public="1" get="inline" set="null" expr="0x41" line="110" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x41</e></m></meta>
		</ClippedBitmap>
		<NonSmoothedRepeatingBitmap public="1" get="inline" set="null" expr="0x42" line="111" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x42</e></m></meta>
		</NonSmoothedRepeatingBitmap>
		<NonSmoothedClippedBitmap public="1" get="inline" set="null" expr="0x43" line="112" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0x43</e></m></meta>
		</NonSmoothedClippedBitmap>
	</class>
	<typedef path="format.swf.Fixed" params="" file="format/swf/Data.hx" module="format.swf.Data"><x path="Int"/></typedef>
	<typedef path="format.swf.Fixed8" params="" file="format/swf/Data.hx" module="format.swf.Data"><x path="Int"/></typedef>
	<typedef path="format.swf.SWF" params="" file="format/swf/Data.hx" module="format.swf.Data"><a>
	<tags><c path="Array"><e path="format.swf.SWFTag"/></c></tags>
	<header><t path="format.swf.SWFHeader"/></header>
</a></typedef>
	<enum path="format.swf.SWFTag" params="" file="format/swf/Data.hx" module="format.swf.Data">
		<TShowFrame/>
		<TShape a="id:data">
			<x path="Int"/>
			<e path="format.swf.ShapeData"/>
		</TShape>
		<TMorphShape a="id:data">
			<x path="Int"/>
			<e path="format.swf.MorphShapeData"/>
		</TMorphShape>
		<TFont a="id:data">
			<x path="Int"/>
			<e path="format.swf.FontData"/>
		</TFont>
		<TFontInfo a="id:data">
			<x path="Int"/>
			<e path="format.swf.FontInfoData"/>
		</TFontInfo>
		<TButton a="id:trackAsMenu:records">
			<x path="Int"/>
			<x path="Bool"/>
			<c path="Array"><c path="format.swf.ButtonRecord"/></c>
		</TButton>
		<TBackgroundColor a="color"><x path="Int"/></TBackgroundColor>
		<TDoActions a="data"><c path="haxe.io.Bytes"/></TDoActions>
		<TClip a="id:frames:tags">
			<x path="Int"/>
			<x path="Int"/>
			<c path="Array"><e path="format.swf.SWFTag"/></c>
		</TClip>
		<TPlaceObject2 a="po"><c path="format.swf.PlaceObject"/></TPlaceObject2>
		<TPlaceObject3 a="po"><c path="format.swf.PlaceObject"/></TPlaceObject3>
		<TRemoveObject2 a="depth"><x path="Int"/></TRemoveObject2>
		<TFrameLabel a="label:anchor">
			<c path="String"/>
			<x path="Bool"/>
		</TFrameLabel>
		<TExport a="el"><c path="Array"><a>
	<name><c path="String"/></name>
	<cid><x path="Int"/></cid>
</a></c></TExport>
		<TDoInitActions a="id:data">
			<x path="Int"/>
			<c path="haxe.io.Bytes"/>
		</TDoInitActions>
		<TActionScript3 a="data:?context">
			<c path="haxe.io.Bytes"/>
			<t path="format.swf.AS3Context"/>
		</TActionScript3>
		<TSymbolClass a="symbols"><c path="Array"><t path="format.swf.SymData"/></c></TSymbolClass>
		<TExportAssets a="symbols"><c path="Array"><t path="format.swf.SymData"/></c></TExportAssets>
		<TSandBox a="useDirectBlit:useGpu:hasMeta:useAs3:useNetwork">
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="Bool"/>
		</TSandBox>
		<TBitsLossless a="data"><t path="format.swf.Lossless"/></TBitsLossless>
		<TBitsLossless2 a="data"><t path="format.swf.Lossless"/></TBitsLossless2>
		<TBitsJPEG a="id:data">
			<x path="Int"/>
			<e path="format.swf.JPEGData"/>
		</TBitsJPEG>
		<TJPEGTables a="data"><c path="haxe.io.Bytes"/></TJPEGTables>
		<TBinaryData a="id:data">
			<x path="Int"/>
			<c path="haxe.io.Bytes"/>
		</TBinaryData>
		<TSound a="data"><t path="format.swf.Sound"/></TSound>
		<TScenes a="scenes:labels">
			<c path="Array"><a>
	<offset><x path="Int"/></offset>
	<name><c path="String"/></name>
</a></c>
			<c path="Array"><a>
	<offset><x path="Int"/></offset>
	<name><c path="String"/></name>
</a></c>
		</TScenes>
		<TUnknown a="id:data">
			<x path="Int"/>
			<c path="haxe.io.Bytes"/>
		</TUnknown>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<typedef path="format.swf.SWFHeader" params="" file="format/swf/Data.hx" module="format.swf.Data"><a>
	<width><x path="Int"/></width>
	<version><x path="Int"/></version>
	<nframes><x path="Int"/></nframes>
	<height><x path="Int"/></height>
	<fps><t path="format.swf.Fixed8"/></fps>
	<compressed><x path="Bool"/></compressed>
</a></typedef>
	<typedef path="format.swf.AS3Context" params="" file="format/swf/Data.hx" module="format.swf.Data"><a>
	<label><c path="String"/></label>
	<id><x path="Int"/></id>
</a></typedef>
	<typedef path="format.swf.SymData" params="" file="format/swf/Data.hx" module="format.swf.Data"><a>
	<className><c path="String"/></className>
	<cid><x path="Int"/></cid>
</a></typedef>
	<class path="format.swf.PlaceObject" params="" file="format/swf/Data.hx" module="format.swf.Data">
		<depth public="1"><x path="Int"/></depth>
		<move public="1"><x path="Bool"/></move>
		<cid public="1"><x path="Null"><x path="Int"/></x></cid>
		<matrix public="1"><x path="Null"><t path="format.swf.Matrix"/></x></matrix>
		<color public="1"><x path="Null"><t path="format.swf.CXA"/></x></color>
		<ratio public="1"><x path="Null"><x path="Int"/></x></ratio>
		<instanceName public="1"><x path="Null"><c path="String"/></x></instanceName>
		<clipDepth public="1"><x path="Null"><x path="Int"/></x></clipDepth>
		<events public="1"><x path="Null"><c path="Array"><t path="format.swf.ClipEvent"/></c></x></events>
		<filters public="1"><x path="Null"><c path="Array"><e path="format.swf.Filter"/></c></x></filters>
		<blendMode public="1"><x path="Null"><e path="format.swf.BlendMode"/></x></blendMode>
		<bitmapCache public="1"><x path="Null"><x path="Int"/></x></bitmapCache>
		<hasImage public="1"><x path="Bool"/></hasImage>
		<className public="1"><x path="Null"><c path="String"/></x></className>
		<new public="1" set="method" line="104"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<typedef path="format.swf.Rect" params="" file="format/swf/Data.hx" module="format.swf.Data"><a>
	<top><x path="Int"/></top>
	<right><x path="Int"/></right>
	<left><x path="Int"/></left>
	<bottom><x path="Int"/></bottom>
</a></typedef>
	<enum path="format.swf.ShapeData" params="" file="format/swf/Data.hx" module="format.swf.Data">
		<SHDShape1 a="bounds:shapes">
			<t path="format.swf.Rect"/>
			<t path="format.swf.ShapeWithStyleData"/>
		</SHDShape1>
		<SHDShape2 a="bounds:shapes">
			<t path="format.swf.Rect"/>
			<t path="format.swf.ShapeWithStyleData"/>
		</SHDShape2>
		<SHDShape3 a="bounds:shapes">
			<t path="format.swf.Rect"/>
			<t path="format.swf.ShapeWithStyleData"/>
		</SHDShape3>
		<SHDShape4 a="data"><t path="format.swf.Shape4Data"/></SHDShape4>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<enum path="format.swf.MorphShapeData" params="" file="format/swf/Data.hx" module="format.swf.Data">
		<MSDShape1 a="data"><t path="format.swf.MorphShapeData1"/></MSDShape1>
		<MSDShape2 a="data"><t path="format.swf.MorphShapeData2"/></MSDShape2>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<typedef path="format.swf.MorphShapeData1" params="" file="format/swf/Data.hx" module="format.swf.Data"><a>
	<startEdges><t path="format.swf.ShapeWithoutStyleData"/></startEdges>
	<startBounds><t path="format.swf.Rect"/></startBounds>
	<lineStyles><c path="Array"><t path="format.swf.Morph1LineStyle"/></c></lineStyles>
	<fillStyles><c path="Array"><e path="format.swf.MorphFillStyle"/></c></fillStyles>
	<endEdges><t path="format.swf.ShapeWithoutStyleData"/></endEdges>
	<endBounds><t path="format.swf.Rect"/></endBounds>
</a></typedef>
	<typedef path="format.swf.MorphShapeData2" params="" file="format/swf/Data.hx" module="format.swf.Data"><a>
	<useScalingStrokes><x path="Bool"/></useScalingStrokes>
	<useNonScalingStrokes><x path="Bool"/></useNonScalingStrokes>
	<startEdges><t path="format.swf.ShapeWithoutStyleData"/></startEdges>
	<startEdgeBounds><t path="format.swf.Rect"/></startEdgeBounds>
	<startBounds><t path="format.swf.Rect"/></startBounds>
	<lineStyles><c path="Array"><e path="format.swf.Morph2LineStyle"/></c></lineStyles>
	<fillStyles><c path="Array"><e path="format.swf.MorphFillStyle"/></c></fillStyles>
	<endEdges><t path="format.swf.ShapeWithoutStyleData"/></endEdges>
	<endEdgeBounds><t path="format.swf.Rect"/></endEdgeBounds>
	<endBounds><t path="format.swf.Rect"/></endBounds>
</a></typedef>
	<enum path="format.swf.MorphFillStyle" params="" file="format/swf/Data.hx" module="format.swf.Data">
		<MFSSolid a="startColor:endColor">
			<t path="format.swf.RGBA"/>
			<t path="format.swf.RGBA"/>
		</MFSSolid>
		<MFSLinearGradient a="startMatrix:endMatrix:gradients">
			<t path="format.swf.Matrix"/>
			<t path="format.swf.Matrix"/>
			<c path="Array"><t path="format.swf.MorphGradient"/></c>
		</MFSLinearGradient>
		<MFSRadialGradient a="startMatrix:endMatrix:gradients">
			<t path="format.swf.Matrix"/>
			<t path="format.swf.Matrix"/>
			<c path="Array"><t path="format.swf.MorphGradient"/></c>
		</MFSRadialGradient>
		<MFSBitmap a="cid:startMatrix:endMatrix:repeat:smooth">
			<x path="Int"/>
			<t path="format.swf.Matrix"/>
			<t path="format.swf.Matrix"/>
			<x path="Bool"/>
			<x path="Bool"/>
		</MFSBitmap>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<typedef path="format.swf.Morph1LineStyle" params="" file="format/swf/Data.hx" module="format.swf.Data"><a>
	<startWidth><x path="Int"/></startWidth>
	<startColor><t path="format.swf.RGBA"/></startColor>
	<endWidth><x path="Int"/></endWidth>
	<endColor><t path="format.swf.RGBA"/></endColor>
</a></typedef>
	<enum path="format.swf.Morph2LineStyle" params="" file="format/swf/Data.hx" module="format.swf.Data">
		<M2LSNoFill a="startColor:endColor:data">
			<t path="format.swf.RGBA"/>
			<t path="format.swf.RGBA"/>
			<t path="format.swf.Morph2LineStyleData"/>
		</M2LSNoFill>
		<M2LSFill a="fill:data">
			<e path="format.swf.MorphFillStyle"/>
			<t path="format.swf.Morph2LineStyleData"/>
		</M2LSFill>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<typedef path="format.swf.Morph2LineStyleData" params="" file="format/swf/Data.hx" module="format.swf.Data"><a>
	<startWidth><x path="Int"/></startWidth>
	<startCapStyle><e path="format.swf.LineCapStyle"/></startCapStyle>
	<pixelHinting><x path="Bool"/></pixelHinting>
	<noVScale><x path="Bool"/></noVScale>
	<noHScale><x path="Bool"/></noHScale>
	<noClose><x path="Bool"/></noClose>
	<joinStyle><e path="format.swf.LineJoinStyle"/></joinStyle>
	<endWidth><x path="Int"/></endWidth>
	<endCapStyle><e path="format.swf.LineCapStyle"/></endCapStyle>
</a></typedef>
	<typedef path="format.swf.MorphGradient" params="" file="format/swf/Data.hx" module="format.swf.Data"><a>
	<startRatio><x path="Int"/></startRatio>
	<startColor><t path="format.swf.RGBA"/></startColor>
	<endRatio><x path="Int"/></endRatio>
	<endColor><t path="format.swf.RGBA"/></endColor>
</a></typedef>
	<typedef path="format.swf.Shape4Data" params="" file="format/swf/Data.hx" module="format.swf.Data"><a>
	<useWinding><x path="Bool"/></useWinding>
	<useScalingStroke><x path="Bool"/></useScalingStroke>
	<useNonScalingStroke><x path="Bool"/></useNonScalingStroke>
	<shapes><t path="format.swf.ShapeWithStyleData"/></shapes>
	<shapeBounds><t path="format.swf.Rect"/></shapeBounds>
	<edgeBounds><t path="format.swf.Rect"/></edgeBounds>
</a></typedef>
	<typedef path="format.swf.ShapeWithoutStyleData" params="" file="format/swf/Data.hx" module="format.swf.Data"><a><shapeRecords><c path="Array"><e path="format.swf.ShapeRecord"/></c></shapeRecords></a></typedef>
	<typedef path="format.swf.ShapeWithStyleData" params="" file="format/swf/Data.hx" module="format.swf.Data"><a>
	<shapeRecords><c path="Array"><e path="format.swf.ShapeRecord"/></c></shapeRecords>
	<lineStyles><c path="Array"><t path="format.swf.LineStyle"/></c></lineStyles>
	<fillStyles><c path="Array"><e path="format.swf.FillStyle"/></c></fillStyles>
</a></typedef>
	<enum path="format.swf.ShapeRecord" params="" file="format/swf/Data.hx" module="format.swf.Data">
		<SHREnd/>
		<SHRChange a="data"><t path="format.swf.ShapeChangeRec"/></SHRChange>
		<SHREdge a="dx:dy">
			<x path="Int"/>
			<x path="Int"/>
		</SHREdge>
		<SHRCurvedEdge a="cdx:cdy:adx:ady">
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</SHRCurvedEdge>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<typedef path="format.swf.ShapeChangeRec" params="" file="format/swf/Data.hx" module="format.swf.Data"><a>
	<newStyles><x path="Null"><t path="format.swf.SCRNewStyles"/></x></newStyles>
	<moveTo><x path="Null"><t path="format.swf.SCRMoveTo"/></x></moveTo>
	<lineStyle><x path="Null"><t path="format.swf.SCRIndex"/></x></lineStyle>
	<fillStyle1><x path="Null"><t path="format.swf.SCRIndex"/></x></fillStyle1>
	<fillStyle0><x path="Null"><t path="format.swf.SCRIndex"/></x></fillStyle0>
</a></typedef>
	<typedef path="format.swf.SCRMoveTo" params="" file="format/swf/Data.hx" module="format.swf.Data"><a>
	<dy><x path="Int"/></dy>
	<dx><x path="Int"/></dx>
</a></typedef>
	<typedef path="format.swf.SCRIndex" params="" file="format/swf/Data.hx" module="format.swf.Data"><a><idx><x path="Int"/></idx></a></typedef>
	<typedef path="format.swf.SCRNewStyles" params="" file="format/swf/Data.hx" module="format.swf.Data"><a>
	<lineStyles><c path="Array"><t path="format.swf.LineStyle"/></c></lineStyles>
	<fillStyles><c path="Array"><e path="format.swf.FillStyle"/></c></fillStyles>
</a></typedef>
	<enum path="format.swf.FillStyle" params="" file="format/swf/Data.hx" module="format.swf.Data">
		<FSSolid a="rgb"><t path="format.swf.RGB"/></FSSolid>
		<FSSolidAlpha a="rgb"><t path="format.swf.RGBA"/></FSSolidAlpha>
		<FSLinearGradient a="mat:grad">
			<t path="format.swf.Matrix"/>
			<t path="format.swf.Gradient"/>
		</FSLinearGradient>
		<FSRadialGradient a="mat:grad">
			<t path="format.swf.Matrix"/>
			<t path="format.swf.Gradient"/>
		</FSRadialGradient>
		<FSFocalGradient a="mat:grad">
			<t path="format.swf.Matrix"/>
			<t path="format.swf.FocalGradient"/>
		</FSFocalGradient>
		<FSBitmap a="cid:mat:repeat:smooth">
			<x path="Int"/>
			<t path="format.swf.Matrix"/>
			<x path="Bool"/>
			<x path="Bool"/>
		</FSBitmap>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<typedef path="format.swf.LineStyle" params="" file="format/swf/Data.hx" module="format.swf.Data"><a>
	<width><x path="Int"/></width>
	<data><e path="format.swf.LineStyleData"/></data>
</a></typedef>
	<enum path="format.swf.LineStyleData" params="" file="format/swf/Data.hx" module="format.swf.Data">
		<LSRGB a="rgb"><t path="format.swf.RGB"/></LSRGB>
		<LSRGBA a="rgba"><t path="format.swf.RGBA"/></LSRGBA>
		<LS2 a="data"><t path="format.swf.LS2Data"/></LS2>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<typedef path="format.swf.LS2Data" params="" file="format/swf/Data.hx" module="format.swf.Data"><a>
	<startCap><e path="format.swf.LineCapStyle"/></startCap>
	<pixelHinting><x path="Bool"/></pixelHinting>
	<noVScale><x path="Bool"/></noVScale>
	<noHScale><x path="Bool"/></noHScale>
	<noClose><x path="Bool"/></noClose>
	<join><e path="format.swf.LineJoinStyle"/></join>
	<fill><x path="Null"><e path="format.swf.LS2Fill"/></x></fill>
	<endCap><e path="format.swf.LineCapStyle"/></endCap>
</a></typedef>
	<enum path="format.swf.LineCapStyle" params="" file="format/swf/Data.hx" module="format.swf.Data">
		<LCRound/>
		<LCNone/>
		<LCSquare/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<enum path="format.swf.LineJoinStyle" params="" file="format/swf/Data.hx" module="format.swf.Data">
		<LJRound/>
		<LJBevel/>
		<LJMiter a="limitFactor"><t path="format.swf.Fixed8"/></LJMiter>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<enum path="format.swf.LS2Fill" params="" file="format/swf/Data.hx" module="format.swf.Data">
		<LS2FColor a="color"><t path="format.swf.RGBA"/></LS2FColor>
		<LS2FStyle a="style"><e path="format.swf.FillStyle"/></LS2FStyle>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<enum path="format.swf.GradRecord" params="" file="format/swf/Data.hx" module="format.swf.Data">
		<GRRGB a="pos:col">
			<x path="Int"/>
			<t path="format.swf.RGB"/>
		</GRRGB>
		<GRRGBA a="pos:col">
			<x path="Int"/>
			<t path="format.swf.RGBA"/>
		</GRRGBA>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<typedef path="format.swf.Gradient" params="" file="format/swf/Data.hx" module="format.swf.Data"><a>
	<spread><e path="format.swf.SpreadMode"/></spread>
	<interpolate><e path="format.swf.InterpolationMode"/></interpolate>
	<data><c path="Array"><e path="format.swf.GradRecord"/></c></data>
</a></typedef>
	<typedef path="format.swf.FocalGradient" params="" file="format/swf/Data.hx" module="format.swf.Data"><a>
	<focalPoint><t path="format.swf.Fixed8"/></focalPoint>
	<data><t path="format.swf.Gradient"/></data>
</a></typedef>
	<class path="format.swf.ButtonRecord" params="" file="format/swf/Data.hx" module="format.swf.Data">
		<stateHitTest public="1"><x path="Bool"/></stateHitTest>
		<stateDown public="1"><x path="Bool"/></stateDown>
		<stateOver public="1"><x path="Bool"/></stateOver>
		<stateUp public="1"><x path="Bool"/></stateUp>
		<cid public="1"><x path="Int"/></cid>
		<depth public="1"><x path="Int"/></depth>
		<matrix public="1"><t path="format.swf.Matrix"/></matrix>
		<color public="1"><t path="format.swf.CXA"/></color>
		<filters public="1"><x path="Null"><c path="Array"><e path="format.swf.Filter"/></c></x></filters>
		<blendMode public="1"><x path="Null"><e path="format.swf.BlendMode"/></x></blendMode>
		<new public="1" set="method" line="313"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<enum path="format.swf.SpreadMode" params="" file="format/swf/Data.hx" module="format.swf.Data">
		<SMPad/>
		<SMReflect/>
		<SMRepeat/>
		<SMReserved/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<enum path="format.swf.InterpolationMode" params="" file="format/swf/Data.hx" module="format.swf.Data">
		<IMNormalRGB/>
		<IMLinearRGB/>
		<IMReserved1/>
		<IMReserved2/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<typedef path="format.swf.MatrixPart" params="" file="format/swf/Data.hx" module="format.swf.Data"><a>
	<y><x path="Int"/></y>
	<x><x path="Int"/></x>
	<nbits><x path="Int"/></nbits>
</a></typedef>
	<typedef path="format.swf.MatrixPartScale" params="" file="format/swf/Data.hx" module="format.swf.Data"><a>
	<y><x path="Float"/></y>
	<x><x path="Float"/></x>
</a></typedef>
	<typedef path="format.swf.MatrixPartRotateSkew" params="" file="format/swf/Data.hx" module="format.swf.Data"><a>
	<rs1><x path="Float"/></rs1>
	<rs0><x path="Float"/></rs0>
</a></typedef>
	<typedef path="format.swf.MatrixPartTranslate" params="" file="format/swf/Data.hx" module="format.swf.Data"><a>
	<y><x path="Int"/></y>
	<x><x path="Int"/></x>
</a></typedef>
	<typedef path="format.swf.Matrix" params="" file="format/swf/Data.hx" module="format.swf.Data"><a>
	<translate><t path="format.swf.MatrixPartTranslate"/></translate>
	<scale><x path="Null"><t path="format.swf.MatrixPartScale"/></x></scale>
	<rotate><x path="Null"><t path="format.swf.MatrixPartRotateSkew"/></x></rotate>
</a></typedef>
	<typedef path="format.swf.RGBA" params="" file="format/swf/Data.hx" module="format.swf.Data"><a>
	<r><x path="Int"/></r>
	<g><x path="Int"/></g>
	<b><x path="Int"/></b>
	<a><x path="Int"/></a>
</a></typedef>
	<typedef path="format.swf.RGB" params="" file="format/swf/Data.hx" module="format.swf.Data"><a>
	<r><x path="Int"/></r>
	<g><x path="Int"/></g>
	<b><x path="Int"/></b>
</a></typedef>
	<typedef path="format.swf.CXA" params="" file="format/swf/Data.hx" module="format.swf.Data"><a>
	<nbits><x path="Int"/></nbits>
	<mult><x path="Null"><t path="format.swf.RGBA"/></x></mult>
	<add><x path="Null"><t path="format.swf.RGBA"/></x></add>
</a></typedef>
	<typedef path="format.swf.ClipEvent" params="" file="format/swf/Data.hx" module="format.swf.Data"><a>
	<eventsFlags><x path="Int"/></eventsFlags>
	<data><c path="haxe.io.Bytes"/></data>
</a></typedef>
	<enum path="format.swf.BlendMode" params="" file="format/swf/Data.hx" module="format.swf.Data">
		<BNormal/>
		<BLayer/>
		<BMultiply/>
		<BScreen/>
		<BLighten/>
		<BDarken/>
		<BDifference/>
		<BAdd/>
		<BSubtract/>
		<BInvert/>
		<BAlpha/>
		<BErase/>
		<BOverlay/>
		<BHardLight/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<enum path="format.swf.Filter" params="" file="format/swf/Data.hx" module="format.swf.Data">
		<FDropShadow a="data"><t path="format.swf.FilterData"/></FDropShadow>
		<FBlur a="data"><t path="format.swf.BlurFilterData"/></FBlur>
		<FGlow a="data"><t path="format.swf.FilterData"/></FGlow>
		<FBevel a="data"><t path="format.swf.FilterData"/></FBevel>
		<FGradientGlow a="data"><t path="format.swf.GradientFilterData"/></FGradientGlow>
		<FColorMatrix a="data"><c path="Array"><x path="Float"/></c></FColorMatrix>
		<FGradientBevel a="data"><t path="format.swf.GradientFilterData"/></FGradientBevel>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<typedef path="format.swf.FilterFlags" params="" file="format/swf/Data.hx" module="format.swf.Data"><a>
	<passes><x path="Int"/></passes>
	<ontop><x path="Bool"/></ontop>
	<knockout><x path="Bool"/></knockout>
	<inner><x path="Bool"/></inner>
</a></typedef>
	<typedef path="format.swf.FilterData" params="" file="format/swf/Data.hx" module="format.swf.Data"><a>
	<strength><t path="format.swf.Fixed8"/></strength>
	<flags><t path="format.swf.FilterFlags"/></flags>
	<distance><t path="format.swf.Fixed"/></distance>
	<color2><t path="format.swf.RGBA"/></color2>
	<color><t path="format.swf.RGBA"/></color>
	<blurY><t path="format.swf.Fixed"/></blurY>
	<blurX><t path="format.swf.Fixed"/></blurX>
	<angle><t path="format.swf.Fixed"/></angle>
</a></typedef>
	<typedef path="format.swf.BlurFilterData" params="" file="format/swf/Data.hx" module="format.swf.Data"><a>
	<passes><x path="Int"/></passes>
	<blurY><t path="format.swf.Fixed"/></blurY>
	<blurX><t path="format.swf.Fixed"/></blurX>
</a></typedef>
	<typedef path="format.swf.GradientFilterData" params="" file="format/swf/Data.hx" module="format.swf.Data"><a>
	<data><t path="format.swf.FilterData"/></data>
	<colors><c path="Array"><a>
	<position><x path="Int"/></position>
	<color><t path="format.swf.RGBA"/></color>
</a></c></colors>
</a></typedef>
	<typedef path="format.swf.Lossless" params="" file="format/swf/Data.hx" module="format.swf.Data"><a>
	<width><x path="Int"/></width>
	<height><x path="Int"/></height>
	<data><c path="haxe.io.Bytes"/></data>
	<color><e path="format.swf.ColorModel"/></color>
	<cid><x path="Int"/></cid>
</a></typedef>
	<enum path="format.swf.JPEGData" params="" file="format/swf/Data.hx" module="format.swf.Data">
		<JDJPEG1 a="data"><c path="haxe.io.Bytes"/></JDJPEG1>
		<JDJPEG2 a="data"><c path="haxe.io.Bytes"/></JDJPEG2>
		<JDJPEG3 a="data:mask">
			<c path="haxe.io.Bytes"/>
			<c path="haxe.io.Bytes"/>
		</JDJPEG3>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<enum path="format.swf.ColorModel" params="" file="format/swf/Data.hx" module="format.swf.Data">
		<CM8Bits a="ncolors"><x path="Int"/></CM8Bits>
		<CM15Bits/>
		<CM24Bits/>
		<CM32Bits/>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<typedef path="format.swf.Sound" params="" file="format/swf/Data.hx" module="format.swf.Data"><a>
	<sid><x path="Int"/></sid>
	<samples><x path="Int"/></samples>
	<rate><e path="format.swf.SoundRate"/></rate>
	<isStereo><x path="Bool"/></isStereo>
	<is16bit><x path="Bool"/></is16bit>
	<format><e path="format.swf.SoundFormat"/></format>
	<data><e path="format.swf.SoundData"/></data>
</a></typedef>
	<enum path="format.swf.SoundData" params="" file="format/swf/Data.hx" module="format.swf.Data">
		<SDMp3 a="seek:data">
			<x path="Int"/>
			<c path="haxe.io.Bytes"/>
		</SDMp3>
		<SDRaw a="data"><c path="haxe.io.Bytes"/></SDRaw>
		<SDOther a="data"><c path="haxe.io.Bytes"/></SDOther>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<enum path="format.swf.SoundFormat" params="" file="format/swf/Data.hx" module="format.swf.Data">
		<SFNativeEndianUncompressed/>
		<SFADPCM/>
		<SFMP3/>
		<SFLittleEndianUncompressed/>
		<SFNellymoser16k/>
		<SFNellymoser8k/>
		<SFNellymoser/>
		<SFSpeex/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<enum path="format.swf.SoundRate" params="" file="format/swf/Data.hx" module="format.swf.Data">
		<SR5k/>
		<SR11k/>
		<SR22k/>
		<SR44k/>
		<haxe_doc>* Sound sampling rate.
 *
 * - 5k is not allowed for MP3
 * - Nellymoser and Speex ignore this option</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<enum path="format.swf.FontData" params="" file="format/swf/Data.hx" module="format.swf.Data">
		<FDFont1 a="data"><t path="format.swf.Font1Data"/></FDFont1>
		<FDFont2 a="hasWideChars:data">
			<x path="Bool"/>
			<t path="format.swf.Font2Data"/>
		</FDFont2>
		<FDFont3 a="data"><t path="format.swf.Font2Data"/></FDFont3>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<enum path="format.swf.FontInfoData" params="" file="format/swf/Data.hx" module="format.swf.Data">
		<FIDFont1 a="shiftJIS:isANSI:hasWideCodes:data">
			<x path="Bool"/>
			<x path="Bool"/>
			<x path="Bool"/>
			<t path="format.swf.FIData"/>
		</FIDFont1>
		<FIDFont2 a="language:data">
			<e path="format.swf.LangCode"/>
			<t path="format.swf.FIData"/>
		</FIDFont2>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<typedef path="format.swf.FIData" params="" file="format/swf/Data.hx" module="format.swf.Data"><a>
	<name><c path="String"/></name>
	<isSmall><x path="Bool"/></isSmall>
	<isItalic><x path="Bool"/></isItalic>
	<isBold><x path="Bool"/></isBold>
	<codeTable><c path="Array"><x path="Int"/></c></codeTable>
</a></typedef>
	<enum path="format.swf.LangCode" params="" file="format/swf/Data.hx" module="format.swf.Data">
		<LCNone/>
		<LCLatin/>
		<LCJapanese/>
		<LCKorean/>
		<LCSimplifiedChinese/>
		<LCTraditionalChinese/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<typedef path="format.swf.Font1Data" params="" file="format/swf/Data.hx" module="format.swf.Data"><a><glyphs><c path="Array"><t path="format.swf.ShapeWithoutStyleData"/></c></glyphs></a></typedef>
	<typedef path="format.swf.Font2GlyphData" params="" file="format/swf/Data.hx" module="format.swf.Data"><a>
	<shape><t path="format.swf.ShapeWithoutStyleData"/></shape>
	<charCode><x path="Int"/></charCode>
</a></typedef>
	<typedef path="format.swf.Font2Data" params="" file="format/swf/Data.hx" module="format.swf.Data"><a>
	<shiftJIS><x path="Bool"/></shiftJIS>
	<name><c path="String"/></name>
	<layout><x path="Null"><t path="format.swf.FontLayoutData"/></x></layout>
	<language><e path="format.swf.LangCode"/></language>
	<isSmall><x path="Bool"/></isSmall>
	<isItalic><x path="Bool"/></isItalic>
	<isBold><x path="Bool"/></isBold>
	<isANSI><x path="Bool"/></isANSI>
	<glyphs><c path="Array"><t path="format.swf.Font2GlyphData"/></c></glyphs>
</a></typedef>
	<typedef path="format.swf.FontKerningData" params="" file="format/swf/Data.hx" module="format.swf.Data"><a>
	<charCode2><x path="Int"/></charCode2>
	<charCode1><x path="Int"/></charCode1>
	<adjust><x path="Int"/></adjust>
</a></typedef>
	<typedef path="format.swf.FontLayoutGlyphData" params="" file="format/swf/Data.hx" module="format.swf.Data"><a>
	<bounds><t path="format.swf.Rect"/></bounds>
	<advance><x path="Int"/></advance>
</a></typedef>
	<typedef path="format.swf.FontLayoutData" params="" file="format/swf/Data.hx" module="format.swf.Data"><a>
	<leading><x path="Int"/></leading>
	<kerning><c path="Array"><t path="format.swf.FontKerningData"/></c></kerning>
	<glyphs><c path="Array"><t path="format.swf.FontLayoutGlyphData"/></c></glyphs>
	<descent><x path="Int"/></descent>
	<ascent><x path="Int"/></ascent>
</a></typedef>
	<class path="format.swf.Reader" params="" file="format/swf/Reader.hx">
		<i><c path="haxe.io.Input"/></i>
		<bits><c path="format.tools.BitsInput"/></bits>
		<version><x path="Int"/></version>
		<bitsRead><x path="Int"/></bitsRead>
		<readFixed8 get="inline" set="null" line="47"><f a="?i">
	<c path="haxe.io.Input"/>
	<x path="Int"/>
</f></readFixed8>
		<readFixed get="inline" set="null" line="52"><f a=""><x path="Int"/></f></readFixed>
		<readUTF8Bytes set="method" line="56"><f a=""><c path="haxe.io.Bytes"/></f></readUTF8Bytes>
		<readRect set="method" line="66"><f a=""><a>
	<top><x path="Int"/></top>
	<right><x path="Int"/></right>
	<left><x path="Int"/></left>
	<bottom><x path="Int"/></bottom>
</a></f></readRect>
		<readMatrixPart set="method" line="77"><f a=""><t path="format.swf.MatrixPart"/></f></readMatrixPart>
		<readMatrix set="method" line="86"><f a=""><t path="format.swf.Matrix"/></f></readMatrix>
		<readRGBA set="method" line="127"><f a="?i">
	<c path="haxe.io.Input"/>
	<t path="format.swf.RGBA"/>
</f></readRGBA>
		<readRGB set="method" line="137"><f a="?i">
	<c path="haxe.io.Input"/>
	<t path="format.swf.RGB"/>
</f></readRGB>
		<readCXAColor set="method" line="146"><f a="nbits">
	<x path="Int"/>
	<t path="format.swf.RGBA"/>
</f></readCXAColor>
		<readCXA set="method" line="155"><f a=""><t path="format.swf.CXA"/></f></readCXA>
		<readGradient set="method" line="167"><f a="ver">
	<x path="Int"/>
	<t path="format.swf.Gradient"/>
</f></readGradient>
		<getLineCap set="method" line="203"><f a="t">
	<x path="Int"/>
	<e path="format.swf.LineCapStyle"/>
</f></getLineCap>
		<readLineStyles set="method" line="212"><f a="ver">
	<x path="Int"/>
	<c path="Array"><t path="format.swf.LineStyle"/></c>
</f></readLineStyles>
		<readFillStyle set="method" line="279"><f a="ver">
	<x path="Int"/>
	<e path="format.swf.FillStyle"/>
</f></readFillStyle>
		<readFillStyles set="method" line="321"><f a="ver">
	<x path="Int"/>
	<c path="Array"><e path="format.swf.FillStyle"/></c>
</f></readFillStyles>
		<readShapeWithStyle set="method" line="335"><f a="ver">
	<x path="Int"/>
	<t path="format.swf.ShapeWithStyleData"/>
</f></readShapeWithStyle>
		<readShapeWithoutStyle set="method" line="345"><f a="ver">
	<x path="Int"/>
	<t path="format.swf.ShapeWithoutStyleData"/>
</f></readShapeWithoutStyle>
		<readShapeRecords set="method" line="355"><f a="ver">
	<x path="Int"/>
	<c path="Array"><e path="format.swf.ShapeRecord"/></c>
</f></readShapeRecords>
		<readInt get="inline" set="null" line="453"><f a=""><x path="Int"/></f></readInt>
		<readClipEvents set="method" line="461"><f a=""><c path="Array"><t path="format.swf.ClipEvent"/></c></f></readClipEvents>
		<readFilterFlags set="method" line="476"><f a="top">
	<x path="Bool"/>
	<a>
		<passes><x path="Int"/></passes>
		<ontop><x path="Bool"/></ontop>
		<knockout><x path="Bool"/></knockout>
		<inner><x path="Bool"/></inner>
	</a>
</f></readFilterFlags>
		<readFilterGradient set="method" line="487"><f a=""><t path="format.swf.GradientFilterData"/></f></readFilterGradient>
		<readFilter set="method" line="510"><f a=""><x path="Null"><e path="format.swf.Filter"/></x></f></readFilter>
		<readFilters set="method" line="564"><f a=""><c path="Array"><x path="Null"><e path="format.swf.Filter"/></x></c></f></readFilters>
		<error set="method" line="571">
			<f a="?msg" v="&quot;Invalid SWF&quot;">
				<c path="String"/>
				<x path="Null"><c path="String"/></x>
			</f>
			<meta><m n=":value"><e>{ msg : "Invalid SWF" }</e></m></meta>
		</error>
		<readHeader public="1" set="method" line="575"><f a=""><t path="format.swf.SWFHeader"/></f></readHeader>
		<readTagList public="1" set="method" line="605"><f a=""><c path="Array"><e path="format.swf.SWFTag"/></c></f></readTagList>
		<readShape set="method" line="616"><f a="len:ver">
	<x path="Int"/>
	<x path="Int"/>
	<e path="format.swf.SWFTag"/>
</f></readShape>
		<readMorphGradient set="method" line="649"><f a="ver">
	<x path="Int"/>
	<a>
		<startRatio><x path="Int"/></startRatio>
		<startColor><t path="format.swf.RGBA"/></startColor>
		<endRatio><x path="Int"/></endRatio>
		<endColor><t path="format.swf.RGBA"/></endColor>
	</a>
</f></readMorphGradient>
		<readMorphGradients set="method" line="663"><f a="ver">
	<x path="Int"/>
	<c path="Array"><t path="format.swf.MorphGradient"/></c>
</f></readMorphGradients>
		<readMorphFillStyle set="method" line="676"><f a="ver">
	<x path="Int"/>
	<e path="format.swf.MorphFillStyle"/>
</f></readMorphFillStyle>
		<readMorphFillStyles set="method" line="718"><f a="ver">
	<x path="Int"/>
	<c path="Array"><e path="format.swf.MorphFillStyle"/></c>
</f></readMorphFillStyles>
		<readMorph1LineStyle set="method" line="731"><f a=""><a>
	<startWidth><x path="Int"/></startWidth>
	<startColor><t path="format.swf.RGBA"/></startColor>
	<endWidth><x path="Int"/></endWidth>
	<endColor><t path="format.swf.RGBA"/></endColor>
</a></f></readMorph1LineStyle>
		<readMorph2LineStyle set="method" line="745"><f a=""><e path="format.swf.Morph2LineStyle"/></f></readMorph2LineStyle>
		<readMorph1LineStyles set="method" line="795"><f a=""><c path="Array"><t path="format.swf.Morph1LineStyle"/></c></f></readMorph1LineStyles>
		<readMorph2LineStyles set="method" line="809"><f a=""><c path="Array"><e path="format.swf.Morph2LineStyle"/></c></f></readMorph2LineStyles>
		<readMorphShape set="method" line="823"><f a="ver">
	<x path="Int"/>
	<e path="format.swf.SWFTag"/>
</f></readMorphShape>
		<readButton set="method" line="877"><f a="len:ver">
	<x path="Int"/>
	<x path="Int"/>
	<e path="format.swf.SWFTag"/>
</f></readButton>
		<readButtonRecord set="method" line="894"><f a="ver">
	<x path="Int"/>
	<c path="Array"><c path="format.swf.ButtonRecord"/></c>
</f></readButtonRecord>
		<readBUTTONCONDACTION set="method" line="921"><f a="length">
	<unknown/>
	<x path="Void"/>
</f></readBUTTONCONDACTION>
		<readBlendMode set="method" line="935"><f a=""><e path="format.swf.BlendMode"/></f></readBlendMode>
		<readPlaceObject set="method" line="955"><f a="v3">
	<x path="Bool"/>
	<c path="format.swf.PlaceObject"/>
</f></readPlaceObject>
		<readLossless set="method" line="977"><f a="len:v2">
	<x path="Int"/>
	<x path="Bool"/>
	<a>
		<width><x path="Int"/></width>
		<height><x path="Int"/></height>
		<data><c path="haxe.io.Bytes"/></data>
		<color><e path="format.swf.ColorModel"/></color>
		<cid><x path="Int"/></cid>
	</a>
</f></readLossless>
		<readSymbols set="method" line="994"><f a=""><c path="Array"><t path="format.swf.SymData"/></c></f></readSymbols>
		<readSound set="method" line="1004"><f a="len">
	<x path="Int"/>
	<e path="format.swf.SWFTag"/>
</f></readSound>
		<readLanguage set="method" line="1048"><f a=""><e path="format.swf.LangCode"/></f></readLanguage>
		<readGlyphs set="method" line="1060"><f a="len:offsets">
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
	<c path="Array"><t path="format.swf.ShapeWithoutStyleData"/></c>
</f></readGlyphs>
		<readKerningRecord set="method" line="1082"><f a="hasWideCodes">
	<x path="Bool"/>
	<a>
		<charCode2><x path="Int"/></charCode2>
		<charCode1><x path="Int"/></charCode1>
		<adjust><x path="Int"/></adjust>
	</a>
</f></readKerningRecord>
		<readFont1Data set="method" line="1090"><f a="len">
	<x path="Int"/>
	<e path="format.swf.FontData"/>
</f></readFont1Data>
		<readFont2Data set="method" line="1105"><f a="ver">
	<x path="Int"/>
	<e path="format.swf.FontData"/>
</f></readFont2Data>
		<readFont set="method" line="1217"><f a="len:ver">
	<x path="Int"/>
	<x path="Int"/>
	<e path="format.swf.SWFTag"/>
</f></readFont>
		<readFontInfo set="method" line="1235"><f a="len:ver">
	<x path="Int"/>
	<x path="Int"/>
	<e path="format.swf.SWFTag"/>
</f></readFontInfo>
		<readTag public="1" set="method" line="1277"><f a=""><e path="format.swf.SWFTag"/></f></readTag>
		<read public="1" set="method" line="1420"><f a=""><t path="format.swf.SWF"/></f></read>
		<new public="1" set="method" line="43"><f a="i">
	<c path="haxe.io.Input"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="format.swf.Tools" params="" file="format/swf/Tools.hx">
		<signExtend public="1" set="method" line="35" static="1"><f a="v:nbits">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></signExtend>
		<floatFixedBits public="1" get="inline" set="null" line="43" static="1"><f a="i:nbits">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
</f></floatFixedBits>
		<floatFixed public="1" get="inline" set="null" line="48" static="1"><f a="i">
	<x path="Int"/>
	<x path="Float"/>
</f></floatFixed>
		<floatFixed8 public="1" get="inline" set="null" line="56" static="1"><f a="i">
	<x path="Int"/>
	<x path="Float"/>
</f></floatFixed8>
		<toFixed8 public="1" get="inline" set="null" line="60" static="1"><f a="f">
	<x path="Float"/>
	<x path="Int"/>
</f></toFixed8>
		<toFixed16 public="1" get="inline" set="null" line="66" static="1"><f a="f">
	<x path="Float"/>
	<x path="Int"/>
</f></toFixed16>
		<minBits public="1" get="inline" set="null" line="73" static="1"><f a="values">
	<c path="Array"><x path="Int"/></c>
	<x path="Int"/>
</f></minBits>
		<hex public="1" set="method" line="100" static="1"><f a="b:?max">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<c path="String"/>
</f></hex>
		<bin public="1" set="method" line="114" static="1"><f a="b:?maxBytes">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<c path="String"/>
</f></bin>
		<intLength public="1" set="method" line="130" static="1"><f a="i">
	<x path="Int"/>
	<x path="Int"/>
</f></intLength>
		<dumpTag public="1" set="method" line="144" static="1"><f a="t:?max">
	<e path="format.swf.SWFTag"/>
	<x path="Int"/>
	<c path="String"/>
</f></dumpTag>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<typedef path="format.swf.ShapeStyleInfo" params="" file="format/swf/Writer.hx" module="format.swf.Writer"><a>
	<numLineStyles><x path="Int"/></numLineStyles>
	<numFillStyles><x path="Int"/></numFillStyles>
	<lineBits><x path="Int"/></lineBits>
	<fillBits><x path="Int"/></fillBits>
</a></typedef>
	<class path="format.swf.Writer" params="" file="format/swf/Writer.hx">
		<output><c path="haxe.io.Output"/></output>
		<o><c path="haxe.io.BytesOutput"/></o>
		<compressed><x path="Bool"/></compressed>
		<bits><c path="format.tools.BitsOutput"/></bits>
		<write public="1" set="method" line="56"><f a="s">
	<t path="format.swf.SWF"/>
	<x path="Void"/>
</f></write>
		<writeRect set="method" line="63"><f a="r">
	<a>
		<top set="null"><x path="Int"/></top>
		<right set="null"><x path="Int"/></right>
		<left set="null"><x path="Int"/></left>
		<bottom set="null"><x path="Int"/></bottom>
	</a>
	<x path="Void"/>
</f></writeRect>
		<writeFixed8 get="inline" set="null" line="74"><f a="v">
	<x path="Int"/>
	<x path="Void"/>
</f></writeFixed8>
		<writeFixed get="inline" set="null" line="78"><f a="v">
	<x path="Int"/>
	<x path="Void"/>
</f></writeFixed>
		<openTMP set="method" line="82"><f a=""><c path="haxe.io.BytesOutput"/></f></openTMP>
		<closeTMP set="method" line="89"><f a="old">
	<c path="haxe.io.BytesOutput"/>
	<c path="haxe.io.Bytes"/>
</f></closeTMP>
		<writeHeader public="1" set="method" line="96"><f a="h">
	<t path="format.swf.SWFHeader"/>
	<x path="Void"/>
</f></writeHeader>
		<writeRGB set="method" line="107"><f a="c">
	<t path="format.swf.RGB"/>
	<x path="Void"/>
</f></writeRGB>
		<writeRGBA set="method" line="113"><f a="c">
	<t path="format.swf.RGBA"/>
	<x path="Void"/>
</f></writeRGBA>
		<writeMatrixPart set="method" line="120"><f a="m">
	<t path="format.swf.MatrixPart"/>
	<x path="Void"/>
</f></writeMatrixPart>
		<writeMatrix set="method" line="126"><f a="m">
	<t path="format.swf.Matrix"/>
	<x path="Void"/>
</f></writeMatrix>
		<writeCXAColor set="method" line="165"><f a="c:nbits">
	<t path="format.swf.RGBA"/>
	<x path="Int"/>
	<x path="Void"/>
</f></writeCXAColor>
		<writeCXA set="method" line="172"><f a="c">
	<t path="format.swf.CXA"/>
	<x path="Void"/>
</f></writeCXA>
		<writeClipEvents set="method" line="181"><f a="events">
	<c path="Array"><t path="format.swf.ClipEvent"/></c>
	<x path="Void"/>
</f></writeClipEvents>
		<writeFilterFlags set="method" line="195"><f a="f:top">
	<t path="format.swf.FilterFlags"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></writeFilterFlags>
		<writeFilterGradient set="method" line="204"><f a="f">
	<t path="format.swf.GradientFilterData"/>
	<x path="Void"/>
</f></writeFilterGradient>
		<writeFilter set="method" line="219"><f a="f">
	<e path="format.swf.Filter"/>
	<x path="Void"/>
</f></writeFilter>
		<writeFilters set="method" line="265"><f a="filters">
	<c path="Array"><e path="format.swf.Filter"/></c>
	<x path="Void"/>
</f></writeFilters>
		<writeBlendMode set="method" line="271"><f a="b">
	<e path="format.swf.BlendMode"/>
	<x path="Void"/>
</f></writeBlendMode>
		<writePlaceObject set="method" line="275"><f a="po:v3">
	<c path="format.swf.PlaceObject"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></writePlaceObject>
		<writeInt get="inline" set="null" line="315"><f a="v">
	<x path="Int"/>
	<x path="Void"/>
</f></writeInt>
		<writeTID set="method" line="323"><f a="id:len">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></writeTID>
		<writeTIDExt set="method" line="333"><f a="id:len">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></writeTIDExt>
		<writeSymbols set="method" line="338"><f a="sl:tagid">
	<c path="Array"><t path="format.swf.SymData"/></c>
	<x path="Int"/>
	<x path="Void"/>
</f></writeSymbols>
		<writeSound set="method" line="351"><f a="s">
	<t path="format.swf.Sound"/>
	<x path="Void"/>
</f></writeSound>
		<writeGradRecord set="method" line="390"><f a="ver:grad_record">
	<x path="Int"/>
	<e path="format.swf.GradRecord"/>
	<x path="Void"/>
</f></writeGradRecord>
		<writeGradient set="method" line="406"><f a="ver:grad">
	<x path="Int"/>
	<t path="format.swf.Gradient"/>
	<x path="Void"/>
</f></writeGradient>
		<writeFocalGradient set="method" line="440"><f a="ver:grad">
	<x path="Int"/>
	<t path="format.swf.FocalGradient"/>
	<x path="Void"/>
</f></writeFocalGradient>
		<writeFillStyle set="method" line="448"><f a="ver:fill_style">
	<x path="Int"/>
	<e path="format.swf.FillStyle"/>
	<x path="Void"/>
</f></writeFillStyle>
		<writeFillStyles set="method" line="497"><f a="ver:fill_styles">
	<x path="Int"/>
	<c path="Array"><e path="format.swf.FillStyle"/></c>
	<x path="Void"/>
</f></writeFillStyles>
		<writeLineStyle set="method" line="518"><f a="ver:line_style">
	<x path="Int"/>
	<t path="format.swf.LineStyle"/>
	<x path="Void"/>
</f></writeLineStyle>
		<writeLineStyles set="method" line="579"><f a="ver:line_styles">
	<x path="Int"/>
	<c path="Array"><t path="format.swf.LineStyle"/></c>
	<x path="Void"/>
</f></writeLineStyles>
		<writeShapeRecord set="method" line="600"><f a="ver:style_info:shape_record">
	<x path="Int"/>
	<t path="format.swf.ShapeStyleInfo"/>
	<e path="format.swf.ShapeRecord"/>
	<x path="Void"/>
</f></writeShapeRecord>
		<writeShapeWithoutStyle set="method" line="693"><f a="ver:data">
	<x path="Int"/>
	<t path="format.swf.ShapeWithoutStyleData"/>
	<x path="Void"/>
</f></writeShapeWithoutStyle>
		<writeShapeWithStyle set="method" line="711"><f a="ver:data">
	<x path="Int"/>
	<t path="format.swf.ShapeWithStyleData"/>
	<x path="Void"/>
</f></writeShapeWithStyle>
		<writeShape public="1" set="method" line="732"><f a="id:data">
	<x path="Int"/>
	<e path="format.swf.ShapeData"/>
	<x path="Void"/>
</f></writeShape>
		<writeMorphGradient set="method" line="781"><f a="ver:g">
	<x path="Int"/>
	<t path="format.swf.MorphGradient"/>
	<x path="Void"/>
</f></writeMorphGradient>
		<writeMorphGradients set="method" line="788"><f a="ver:gradients">
	<x path="Int"/>
	<c path="Array"><t path="format.swf.MorphGradient"/></c>
	<x path="Void"/>
</f></writeMorphGradients>
		<writeMorphFillStyle set="method" line="798"><f a="ver:fill_style">
	<x path="Int"/>
	<e path="format.swf.MorphFillStyle"/>
	<x path="Void"/>
</f></writeMorphFillStyle>
		<writeMorphFillStyles set="method" line="833"><f a="ver:fill_styles">
	<x path="Int"/>
	<c path="Array"><e path="format.swf.MorphFillStyle"/></c>
	<x path="Void"/>
</f></writeMorphFillStyles>
		<writeMorph1LineStyle set="method" line="849"><f a="s">
	<t path="format.swf.Morph1LineStyle"/>
	<x path="Void"/>
</f></writeMorph1LineStyle>
		<writeMorph1LineStyles set="method" line="856"><f a="line_styles">
	<c path="Array"><t path="format.swf.Morph1LineStyle"/></c>
	<x path="Void"/>
</f></writeMorph1LineStyles>
		<writeMorph2LineStyle set="method" line="872"><f a="style">
	<e path="format.swf.Morph2LineStyle"/>
	<x path="Void"/>
</f></writeMorph2LineStyle>
		<writeMorph2LineStyles set="method" line="933"><f a="line_styles">
	<c path="Array"><e path="format.swf.Morph2LineStyle"/></c>
	<x path="Void"/>
</f></writeMorph2LineStyles>
		<writeMorphShape public="1" set="method" line="949"><f a="id:data">
	<x path="Int"/>
	<e path="format.swf.MorphShapeData"/>
	<x path="Void"/>
</f></writeMorphShape>
		<writeFontGlyphs set="method" line="1011"><f a="glyphs">
	<c path="Array"><t path="format.swf.ShapeWithoutStyleData"/></c>
	<c path="Array"><x path="Int"/></c>
</f></writeFontGlyphs>
		<writeFont1 set="method" line="1036"><f a="data">
	<t path="format.swf.Font1Data"/>
	<x path="Void"/>
</f></writeFont1>
		<writeFont2 set="method" line="1055"><f a="hasWideChars:data">
	<x path="Bool"/>
	<t path="format.swf.Font2Data"/>
	<x path="Void"/>
</f></writeFont2>
		<writeFont public="1" set="method" line="1151"><f a="id:data">
	<x path="Int"/>
	<e path="format.swf.FontData"/>
	<x path="Void"/>
</f></writeFont>
		<writeFontInfo public="1" set="method" line="1184"><f a="id:data">
	<x path="Int"/>
	<e path="format.swf.FontInfoData"/>
	<x path="Void"/>
</f></writeFontInfo>
		<writeTag public="1" set="method" line="1240"><f a="t">
	<e path="format.swf.SWFTag"/>
	<x path="Void"/>
</f></writeTag>
		<writeEnd public="1" set="method" line="1448"><f a=""><x path="Void"/></f></writeEnd>
		<writeAs3Int set="method" line="1461"><f a="i">
	<x path="Int"/>
	<x path="Void"/>
</f></writeAs3Int>
		<new public="1" set="method" line="52"><f a="o">
	<c path="haxe.io.Output"/>
	<x path="Void"/>
</f></new>
	</class>
	<typedef path="format.tar.Entry" params="" file="format/tar/Data.hx" module="format.tar.Data"><a>
	<uname><c path="String"/></uname>
	<uid><x path="Int"/></uid>
	<gname><c path="String"/></gname>
	<gid><x path="Int"/></gid>
	<fmod><x path="Int"/></fmod>
	<fileTime><c path="Date"/></fileTime>
	<fileSize><x path="Int"/></fileSize>
	<fileName><c path="String"/></fileName>
	<data><x path="Null"><c path="haxe.io.Bytes"/></x></data>
</a></typedef>
	<typedef path="format.tar.Data" params="" file="format/tar/Data.hx"><t path="List"><t path="format.tar.Entry"/></t></typedef>
	<class path="format.tar.Reader" params="" file="format/tar/Reader.hx">
		<i><c path="haxe.io.Input"/></i>
		<read public="1" set="method" line="38"><f a=""><t path="List"><t path="format.tar.Entry"/></t></f></read>
		<readEntryHeader public="1" set="method" line="53"><f a=""><a>
	<uname><c path="String"/></uname>
	<uid><x path="Int"/></uid>
	<gname><c path="String"/></gname>
	<gid><x path="Int"/></gid>
	<fmod><x path="Int"/></fmod>
	<fileTime><c path="Date"/></fileTime>
	<fileSize><x path="Int"/></fileSize>
	<fileName><c path="String"/></fileName>
	<data><c path="haxe.io.Bytes"/></data>
</a></f></readEntryHeader>
		<readEntryData public="1" set="method" line="96"><f a="e:buf:out">
	<t path="format.tar.Entry"/>
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Output"/>
	<x path="Void"/>
</f></readEntryData>
		<readPad set="method" line="101"><f a="size">
	<x path="Int"/>
	<x path="Void"/>
</f></readPad>
		<parseOctal set="method" line="107"><f a="n">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
</f></parseOctal>
		<new public="1" set="method" line="34"><f a="i">
	<c path="haxe.io.Input"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="format.tar.Writer" params="" file="format/tar/Writer.hx">
		<o><c path="haxe.io.Output"/></o>
		<files><t path="List"><a><name><c path="String"/></name></a></t></files>
		<sumStr set="method" line="40"><f a="s">
	<c path="String"/>
	<x path="Int"/>
</f></sumStr>
		<createStrNum set="method" line="47">
			<f a="num:?len:?fill" v=":7:&quot;0&quot;">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ fill : "0", len : 7 }</e></m></meta>
		</createStrNum>
		<writeTarDate set="method" line="56"><f a="date">
	<c path="Date"/>
	<c path="String"/>
</f></writeTarDate>
		<writeEntryHeader public="1" set="method" line="63"><f a="f">
	<t path="format.tar.Entry"/>
	<x path="Void"/>
</f></writeEntryHeader>
		<writeEntryData public="1" set="method" line="97"><f a="e:buf:data">
	<t path="format.tar.Entry"/>
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Input"/>
	<x path="Void"/>
</f></writeEntryData>
		<write public="1" set="method" line="101"><f a="files">
	<t path="format.tar.Data"/>
	<x path="Void"/>
</f></write>
		<dec2oct set="method" line="115"><f a="d">
	<x path="Int"/>
	<x path="Int"/>
</f></dec2oct>
		<new public="1" set="method" line="35"><f a="o">
	<c path="haxe.io.Output"/>
	<x path="Void"/>
</f></new>
	</class>
	<typedef path="format.tga.Header" params="" file="format/tga/Data.hx" module="format.tga.Data"><a>
	<yOrigin>
		<x path="Int"/>
		<haxe_doc>* These bytes specify the absolute vertical coordinate for the lower left
   * corner of the image as it is positioned on a display device having an
   * origin at the lower left of the screen (e.g., the TARGA series).</haxe_doc>
	</yOrigin>
	<xOrigin>
		<x path="Int"/>
		<haxe_doc>* These bytes specify the absolute horizontal coordinate for the lower left
   * corner of the image as it is positioned on a display device having an
   * origin at the lower left of the screen (e.g., the TARGA series).</haxe_doc>
	</xOrigin>
	<width>
		<x path="Int"/>
		<haxe_doc>This field specifies the width of the image in pixels.</haxe_doc>
	</width>
	<imageType>
		<e path="format.tga.ImageType"/>
		<haxe_doc>Image data type.</haxe_doc>
	</imageType>
	<imageOrigin><e path="format.tga.ImageOrigin"/></imageOrigin>
	<height>
		<x path="Int"/>
		<haxe_doc>This field specifies the height of the image in pixels.</haxe_doc>
	</height>
	<colorMapType>
		<x path="Int"/>
		<haxe_doc>* Indicated type of color map.
   * 0 = no color map present.
   * 1 = color map included.
   * 2-127 is reserved by Truevision
   * 128-255 may be used by app developers.</haxe_doc>
	</colorMapType>
	<colorMapLength>
		<x path="Int"/>
		<haxe_doc>Total number of color map entries included.</haxe_doc>
	</colorMapLength>
	<colorMapFirstIndex>
		<x path="Int"/>
		<haxe_doc>* Index of the first color map entry. Index refers to the starting entry in
   * loading the color map.</haxe_doc>
	</colorMapFirstIndex>
	<colorMapEntrySize>
		<x path="Int"/>
		<haxe_doc>* Establishes the number of bits per entry. Typically 15, 16, 24 or 32-bit
   * values are used.</haxe_doc>
	</colorMapEntrySize>
	<bitsPerPixel>
		<x path="Int"/>
		<haxe_doc>* This field indicates the number of bits per pixel. This number includes
   * the Attribute or Alpha channel bits. Common values are 8, 16, 24 and
   * 32 but other pixel depths could be used.</haxe_doc>
	</bitsPerPixel>
	<alphaChannelBits>
		<x path="Int"/>
		<haxe_doc>* the number of attribute bits per
   * pixel. In the case of the TrueVista, these bits
   * indicate the number of bits per pixel which are
   * designated as Alpha Channel bits. For the ICB
   * and TARGA products, these bits indicate the
   * number of overlay bits available per pixel.</haxe_doc>
	</alphaChannelBits>
</a></typedef>
	<enum path="format.tga.ImageOrigin" params="" file="format/tga/Data.hx" module="format.tga.Data">
		<BottomLeft/>
		<BottomRight/>
		<TopLeft/>
		<TopRight/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<enum path="format.tga.ImageType" params="" file="format/tga/Data.hx" module="format.tga.Data">
		<NoImage><haxe_doc>There is no image data present</haxe_doc></NoImage>
		<UncompressedColorMapped><haxe_doc>Uncompressed image with color-map usage</haxe_doc></UncompressedColorMapped>
		<UncompressedTrueColor><haxe_doc>True-color uncompressed image</haxe_doc></UncompressedTrueColor>
		<UncompressedBlackAndWhite><haxe_doc>Black-and-White uncompresed image</haxe_doc></UncompressedBlackAndWhite>
		<RunLengthColorMapped><haxe_doc>Run-length encoded image with color-map usage</haxe_doc></RunLengthColorMapped>
		<RunLengthTrueColor><haxe_doc>Run-length encoded true-color image</haxe_doc></RunLengthTrueColor>
		<RunLengthBlackAndWhite><haxe_doc>Run-length encoded black-and-white image</haxe_doc></RunLengthBlackAndWhite>
		<Unknown a="type">
			<x path="Int"/>
			<haxe_doc>Unknown type</haxe_doc>
		</Unknown>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<typedef path="format.tga.Data" params="" file="format/tga/Data.hx"><a>
	<imageId><c path="String"/></imageId>
	<imageData><x path="haxe.ds.Vector"><x path="Int"/></x></imageData>
	<header><t path="format.tga.Header"/></header>
	<developerData><d/></developerData>
	<colorMapData><x path="haxe.ds.Vector"><x path="Int"/></x></colorMapData>
</a></typedef>
	<class path="format.tga.Reader" params="" file="format/tga/Reader.hx">
		<i><c path="haxe.io.Input"/></i>
		<read public="1" set="method" line="21"><f a=""><t path="format.tga.Data"/></f></read>
		<readHeader set="method" line="37"><f a=""><t path="format.tga.Header"/></f></readHeader>
		<readColorMapData set="method" line="103"><f a="header">
	<t path="format.tga.Header"/>
	<x path="haxe.ds.Vector"><x path="Int"/></x>
</f></readColorMapData>
		<readImageData set="method" line="109"><f a="header:colorMap">
	<t path="format.tga.Header"/>
	<x path="haxe.ds.Vector"><x path="Int"/></x>
	<x path="haxe.ds.Vector"><x path="Int"/></x>
</f></readImageData>
		<readPixels set="method" line="136"><f a="bitsPerPixel:amount:alphaChannelBits:rle">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="haxe.ds.Vector"><x path="Int"/></x>
</f></readPixels>
		<readMono set="method" line="206"><f a="bitsPerPixel:amount:alphaChannelBits:rle">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="haxe.ds.Vector"><x path="Int"/></x>
</f></readMono>
		<readIndexes set="method" line="266"><f a="bitsPerPixel:amount:colorMap:offset:rle">
	<x path="Int"/>
	<x path="Int"/>
	<x path="haxe.ds.Vector"><x path="Int"/></x>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="haxe.ds.Vector"><x path="Int"/></x>
</f></readIndexes>
		<parsePixel1 set="method" line="324"><f a="value:alpha">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Int"/>
</f></parsePixel1>
		<parsePixelGreyAlpha set="method" line="329"><f a="value:alpha">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Int"/>
</f></parsePixelGreyAlpha>
		<parsePixel2 set="method" line="334"><f a="value:alpha">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Int"/>
</f></parsePixel2>
		<parsePixel3 set="method" line="342"><f a="value:alpha">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Int"/>
</f></parsePixel3>
		<parsePixel4 set="method" line="347"><f a="value:alpha">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Int"/>
</f></parsePixel4>
		<new public="1" set="method" line="15"><f a="i">
	<c path="haxe.io.Input"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>* ...
 * @author Yanrishatum</haxe_doc>
	</class>
	<class path="format.tga.Tools" params="" file="format/tga/Tools.hx">
		<extract32 public="1" set="method" line="18" static="1">
			<f a="data:extractAlpha">
				<t path="format.tga.Data"/>
				<x path="Bool"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>* Extracts BGRA pixel data from TGA file.  
   * If `extractAlpha` is true, alpha channel will be applied to image, mostly resulting in completely transparent image.  
   * Otherwise alpha will be forced to 0xFF.  
   * If image does not contain image data, 0-filled array returned.</haxe_doc>
		</extract32>
		<extractAlpha public="1" set="method" line="62" static="1">
			<f a="data">
				<t path="format.tga.Data"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>* Extracts alpha channel from TGA file.  
   * If image does not contain image data, 0-filled array returned.</haxe_doc>
		</extractAlpha>
		<extractGrey public="1" set="method" line="72" static="1">
			<f a="data">
				<t path="format.tga.Data"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>* Extracts grey channel from TGA file.  
   * If image does not contains image data 0-filled array returned.  
   * If image is not black-and-white, error thrown.</haxe_doc>
		</extractGrey>
		<extractChannel set="method" line="81" static="1"><f a="data:offset">
	<t path="format.tga.Data"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></extractChannel>
		<haxe_doc>* ...
 * @author Yanrishatum</haxe_doc>
	</class>
	<class path="format.tga.Writer" params="" file="format/tga/Writer.hx">
		<o><c path="haxe.io.Output"/></o>
		<write public="1" set="method" line="20"><f a="data">
	<t path="format.tga.Data"/>
	<x path="Void"/>
</f></write>
		<writeTrueColor set="method" line="50"><f a="data:rle">
	<t path="format.tga.Data"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></writeTrueColor>
		<writeColorMap set="method" line="55"><f a="data">
	<t path="format.tga.Data"/>
	<x path="Void"/>
</f></writeColorMap>
		<writeIndexes set="method" line="60"><f a="data:rle">
	<t path="format.tga.Data"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></writeIndexes>
		<writeMono set="method" line="103"><f a="data:rle">
	<t path="format.tga.Data"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></writeMono>
		<writePixels set="method" line="124"><f a="pixels:bitsPerPixel:alpha:rle">
	<x path="haxe.ds.Vector"><x path="Int"/></x>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></writePixels>
		<encode16 set="method" line="154"><f a="color:alpha">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Int"/>
</f></encode16>
		<encode24 set="method" line="162"><f a="color:alpha">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Int"/>
</f></encode24>
		<encode32 set="method" line="167"><f a="color:alpha">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Int"/>
</f></encode32>
		<writeHeader set="method" line="172"><f a="data">
	<t path="format.tga.Data"/>
	<x path="Void"/>
</f></writeHeader>
		<new public="1" set="method" line="15"><f a="o">
	<c path="haxe.io.Output"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>* ...
 * @author Yanrishatum</haxe_doc>
	</class>
	<typedef path="format.tgz.Data" params="" file="format/tgz/Data.hx"><t path="format.tar.Data"/></typedef>
	<class path="format.tgz.Reader" params="" file="format/tgz/Reader.hx">
		<i><c path="haxe.io.Input"/></i>
		<read public="1" set="method" line="11"><f a=""><t path="format.tgz.Data"/></f></read>
		<new public="1" set="method" line="7"><f a="i">
	<c path="haxe.io.Input"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="format.tools.Adler32" params="" file="format/tools/Adler32.hx">
		<read public="1" set="method" line="54" static="1"><f a="i">
	<c path="haxe.io.Input"/>
	<c path="format.tools.Adler32"/>
</f></read>
		<a1><x path="Int"/></a1>
		<a2><x path="Int"/></a2>
		<update public="1" set="method" line="39"><f a="b:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></update>
		<equals public="1" set="method" line="50"><f a="a">
	<c path="format.tools.Adler32"/>
	<x path="Bool"/>
</f></equals>
		<new public="1" set="method" line="34"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="format.tools.ArcFour" params="" file="format/tools/ArcFour.hx">
		<s><c path="haxe.io.Bytes"/></s>
		<sbase><c path="haxe.io.Bytes"/></sbase>
		<i><x path="Int"/></i>
		<j><x path="Int"/></j>
		<reset public="1" set="method" line="54"><f a=""><x path="Void"/></f></reset>
		<run public="1" set="method" line="60"><f a="input:ipos:length:output:opos">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Void"/>
</f></run>
		<new public="1" set="method" line="36"><f a="key">
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="format.tools.BitsInput" params="" file="format/tools/BitsInput.hx">
		<i><c path="haxe.io.Input"/></i>
		<nbits><x path="Int"/></nbits>
		<bits><x path="Int"/></bits>
		<readBits public="1" set="method" line="41"><f a="n">
	<x path="Int"/>
	<x path="Int"/>
</f></readBits>
		<readBit public="1" set="method" line="63"><f a=""><x path="Bool"/></f></readBit>
		<reset public="1" get="inline" set="null" line="72"><f a=""><x path="Void"/></f></reset>
		<new public="1" set="method" line="35"><f a="i">
	<c path="haxe.io.Input"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="format.tools.BitsOutput" params="" file="format/tools/BitsOutput.hx">
		<o public="1"><c path="haxe.io.Output"/></o>
		<nbits><x path="Int"/></nbits>
		<bits><x path="Int"/></bits>
		<writeBits public="1" set="method" line="41"><f a="n:v">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></writeBits>
		<writeBit public="1" set="method" line="63"><f a="flag">
	<x path="Bool"/>
	<x path="Void"/>
</f></writeBit>
		<flush public="1" get="inline" set="null" line="73"><f a=""><x path="Void"/></f></flush>
		<new public="1" set="method" line="35"><f a="o">
	<c path="haxe.io.Output"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="haxe.io.Input" params="" file="D:\Projects\haxe\std/haxe/io/Input.hx">
		<bigEndian public="1" set="accessor">
			<x path="Bool"/>
			<haxe_doc>Endianness (word byte order) used when reading numbers.

		If `true`, big-endian is used, otherwise `little-endian` is used.</haxe_doc>
		</bigEndian>
		<readByte public="1" set="method" line="49">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read and return one byte.</haxe_doc>
		</readByte>
		<readBytes public="1" set="method" line="64">
			<f a="s:pos:len">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Read `len` bytes and write them into `s` to the position specified by `pos`.

		Returns the actual length of read data that can be smaller than `len`.

		See `readFullBytes` that tries to read the exact amount of specified bytes.</haxe_doc>
		</readBytes>
		<close public="1" set="method" line="92">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Close the input source.

		Behaviour while reading after calling this method is unspecified.</haxe_doc>
		</close>
		<set_bigEndian set="method" line="94"><f a="b">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_bigEndian>
		<readAll public="1" set="method" line="106">
			<f a="?bufsize">
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>Read and return all available data.

		The `bufsize` optional argument specifies the size of chunks by
		which data is read. Its default value is target-specific.</haxe_doc>
		</readAll>
		<readFullBytes public="1" set="method" line="132">
			<f a="s:pos:len">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Read `len` bytes and write them into `s` to the position specified by `pos`.

		Unlike `readBytes`, this method tries to read the exact `len` amount of bytes.</haxe_doc>
		</readFullBytes>
		<read public="1" set="method" line="145">
			<f a="nbytes">
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>Read and return `nbytes` bytes.</haxe_doc>
		</read>
		<readUntil public="1" set="method" line="163">
			<f a="end">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Read a string until a character code specified by `end` is occurred.

		The final character is not included in the resulting string.</haxe_doc>
		</readUntil>
		<readLine public="1" set="method" line="176">
			<f a=""><c path="String"/></f>
			<haxe_doc>Read a line of text separated by CR and/or LF bytes.

		The CR/LF characters are not included in the resulting string.</haxe_doc>
		</readLine>
		<readFloat public="1" set="method" line="199">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Read a 32-bit floating point number.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readFloat>
		<readDouble public="1" set="method" line="208">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Read a 64-bit double-precision floating point number.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readDouble>
		<readInt8 public="1" set="method" line="217">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read a 8-bit signed integer.</haxe_doc>
		</readInt8>
		<readInt16 public="1" set="method" line="229">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read a 16-bit signed integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readInt16>
		<readUInt16 public="1" set="method" line="243">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read a 16-bit unsigned integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readUInt16>
		<readInt24 public="1" set="method" line="254">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read a 24-bit signed integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readInt24>
		<readUInt24 public="1" set="method" line="269">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read a 24-bit unsigned integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readUInt24>
		<readInt32 public="1" set="method" line="281">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read a 32-bit signed integer.

		Endianness is specified by the `bigEndian` property.</haxe_doc>
		</readInt32>
		<readString public="1" set="method" line="304">
			<f a="len:?encoding">
				<x path="Int"/>
				<e path="haxe.io.Encoding"/>
				<c path="String"/>
			</f>
			<haxe_doc>Read and `len` bytes as a string.</haxe_doc>
		</readString>
		<haxe_doc>An Input is an abstract reader. See other classes in the `haxe.io` package
	for several possible implementations.

	All functions which read data throw `Eof` when the end of the stream
	is reached.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="format.tools.BufferInput" params="" file="format/tools/BufferInput.hx">
		<extends path="haxe.io.Input"/>
		<i public="1"><c path="haxe.io.Input"/></i>
		<buf public="1"><c path="haxe.io.Bytes"/></buf>
		<available public="1"><x path="Int"/></available>
		<pos public="1"><x path="Int"/></pos>
		<refill public="1" set="method" line="47"><f a=""><x path="Void"/></f></refill>
		<readByte public="1" set="method" line="55" override="1"><f a=""><x path="Int"/></f></readByte>
		<readBytes public="1" set="method" line="63" override="1"><f a="buf:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></readBytes>
		<new public="1" set="method" line="40">
			<f a="i:buf:?pos:?available" v="::0:0">
				<c path="haxe.io.Input"/>
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ available : 0, pos : 0 }</e></m></meta>
		</new>
	</class>
	<class path="format.tools.Deflate" params="" file="format/tools/Deflate.hx">
		<run public="1" set="method" line="31" static="1">
			<f a="b:?level" v=":9">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":value"><e>{ level : 9 }</e></m></meta>
		</run>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<enum path="format.tools.Huffman" params="" file="format/tools/Huffman.hx">
		<Found a="i"><x path="Int"/></Found>
		<NeedBit a="left:right">
			<e path="format.tools.Huffman"/>
			<e path="format.tools.Huffman"/>
		</NeedBit>
		<NeedBits a="n:table">
			<x path="Int"/>
			<c path="Array"><e path="format.tools.Huffman"/></c>
		</NeedBits>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<class path="format.tools.HuffTools" params="" file="format/tools/Huffman.hx" module="format.tools.Huffman">
		<treeDepth set="method" line="44"><f a="t">
	<e path="format.tools.Huffman"/>
	<x path="Int"/>
</f></treeDepth>
		<treeCompress set="method" line="55"><f a="t">
	<e path="format.tools.Huffman"/>
	<e path="format.tools.Huffman"/>
</f></treeCompress>
		<treeWalk set="method" line="72"><f a="table:p:cd:d:t">
	<c path="Array"><e path="format.tools.Huffman"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<e path="format.tools.Huffman"/>
	<x path="Void"/>
</f></treeWalk>
		<treeMake set="method" line="85"><f a="bits:maxbits:v:len">
	<t path="Map">
		<x path="Int"/>
		<x path="Int"/>
	</t>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<e path="format.tools.Huffman"/>
</f></treeMake>
		<make public="1" set="method" line="95"><f a="lengths:pos:nlengths:maxbits">
	<c path="Array"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<e path="format.tools.Huffman"/>
</f></make>
		<new public="1" set="method" line="41"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="format.tools.IO" params="" file="format/tools/IO.hx">
		<copy public="1" set="method" line="31" static="1"><f a="i:o:buf:size">
	<c path="haxe.io.Input"/>
	<c path="haxe.io.Output"/>
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Void"/>
</f></copy>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="format.tools.Image" params="" file="format/tools/Image.hx"/>
	<class path="format.tools.Inflate" params="" file="format/tools/Inflate.hx">
		<run public="1" set="method" line="31" static="1"><f a="bytes">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></run>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<typedef path="format.tools.InflateImpl" params="" file="format/tools/InflateImpl.hx"><c path="haxe.zip.InflateImpl"/></typedef>
	<class path="format.tools.MD5" params="" file="format/tools/MD5.hx">
		<make public="1" set="method" line="31" static="1"><f a="s">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></make>
		<inst expr="new MD5()" line="45" static="1">
			<c path="format.tools.MD5"/>
			<meta><m n=":value"><e>new MD5()</e></m></meta>
		</inst>
		<bitOR set="method" line="50"><f a="a:b">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></bitOR>
		<bitXOR set="method" line="56"><f a="a:b">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></bitXOR>
		<bitAND set="method" line="62"><f a="a:b">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></bitAND>
		<addme set="method" line="68"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></addme>
		<str2blks set="method" line="74"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="Array"><x path="Int"/></c>
</f></str2blks>
		<rol set="method" line="91"><f a="num:cnt">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></rol>
		<cmn set="method" line="95"><f a="q:a:b:x:s:t">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></cmn>
		<ff set="method" line="99"><f a="a:b:c:d:x:s:t">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></ff>
		<gg set="method" line="103"><f a="a:b:c:d:x:s:t">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></gg>
		<hh set="method" line="107"><f a="a:b:c:d:x:s:t">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></hh>
		<ii set="method" line="111"><f a="a:b:c:d:x:s:t">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></ii>
		<encode set="method" line="115"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></encode>
		<new set="method" line="47"><f a=""><x path="Void"/></f></new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<typedef path="format.wav.WAVE" params="" file="format/wav/Data.hx" module="format.wav.Data"><a>
	<header><t path="format.wav.WAVEHeader"/></header>
	<data><c path="haxe.io.Bytes"/></data>
	<cuePoints><c path="Array"><t path="format.wav.CuePoint"/></c></cuePoints>
</a></typedef>
	<typedef path="format.wav.WAVEHeader" params="" file="format/wav/Data.hx" module="format.wav.Data"><a>
	<samplingRate><x path="Int"/></samplingRate>
	<format><e path="format.wav.WAVEFormat"/></format>
	<channels><x path="Int"/></channels>
	<byteRate><x path="Int"/></byteRate>
	<blockAlign><x path="Int"/></blockAlign>
	<bitsPerSample><x path="Int"/></bitsPerSample>
</a></typedef>
	<typedef path="format.wav.CuePoint" params="" file="format/wav/Data.hx" module="format.wav.Data"><a>
	<sampleOffset><x path="Int"/></sampleOffset>
	<id><x path="Int"/></id>
</a></typedef>
	<enum path="format.wav.WAVEFormat" params="" file="format/wav/Data.hx" module="format.wav.Data">
		<WF_PCM/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<class path="format.wav.Reader" params="" file="format/wav/Reader.hx">
		<i><c path="haxe.io.Input"/></i>
		<version><x path="Int"/></version>
		<readInt get="inline" set="null" line="43"><f a=""><x path="Int"/></f></readInt>
		<read public="1" set="method" line="51"><f a=""><t path="format.wav.WAVE"/></f></read>
		<new public="1" set="method" line="38"><f a="i">
	<c path="haxe.io.Input"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="format.wav.Writer" params="" file="format/wav/Writer.hx">
		<o><c path="haxe.io.Output"/></o>
		<write public="1" set="method" line="43"><f a="wav">
	<t path="format.wav.WAVE"/>
	<x path="Void"/>
</f></write>
		<writeInt get="inline" set="null" line="64"><f a="v">
	<x path="Int"/>
	<x path="Void"/>
</f></writeInt>
		<new public="1" set="method" line="38"><f a="output">
	<c path="haxe.io.Output"/>
	<x path="Void"/>
</f></new>
	</class>
	<typedef path="format.zip.ExtraField" params="" file="format/zip/Data.hx" module="format.zip.Data"><e path="haxe.zip.ExtraField"/></typedef>
	<typedef path="format.zip.Entry" params="" file="format/zip/Data.hx" module="format.zip.Data"><t path="haxe.zip.Entry"/></typedef>
	<typedef path="format.zip.Data" params="" file="format/zip/Data.hx"><t path="List"><t path="format.zip.Entry"/></t></typedef>
	<typedef path="format.zip.Reader" params="" file="format/zip/Reader.hx"><c path="haxe.zip.Reader"/></typedef>
	<class path="format.zip.Tools" params="" file="format/zip/Tools.hx">
		<uncompress public="1" set="method" line="32" static="1"><f a="f">
	<t path="format.zip.Entry"/>
	<x path="Void"/>
</f></uncompress>
		<compress public="1" set="method" line="50" static="1"><f a="f:level">
	<t path="format.zip.Entry"/>
	<x path="Int"/>
	<x path="Void"/>
</f></compress>
	</class>
	<typedef path="format.zip.Writer" params="" file="format/zip/Writer.hx"><c path="haxe.zip.Writer"/></typedef>
	<abstract path="haxe.Function" params="" file="D:\Projects\haxe\std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with any function type.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<meta><m n=":callable"/></meta>
		<impl><class path="haxe._Constraints.Function_Impl_" params="" file="D:\Projects\haxe\std/haxe/Constraints.hx" private="1" module="haxe.Constraints"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.FlatEnum" params="" file="D:\Projects\haxe\std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with an enum instance if all constructors of the enum
	require no arguments.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<impl><class path="haxe._Constraints.FlatEnum_Impl_" params="" file="D:\Projects\haxe\std/haxe/Constraints.hx" private="1" module="haxe.Constraints"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.Constructible" params="T" file="D:\Projects\haxe\std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc><![CDATA[This type unifies with any instance of classes that have a constructor
	which

	  * is `public` and
	  * unifies with the type used for type parameter `T`.

	If a type parameter `A` is assigned to a type parameter `B` which is constrained
	to `Constructible<T>`, A must be explicitly constrained to
	`Constructible<T>` as well.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.]]></haxe_doc>
		<impl><class path="haxe._Constraints.Constructible_Impl_" params="" file="D:\Projects\haxe\std/haxe/Constraints.hx" private="1" module="haxe.Constraints"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="haxe.IMap" params="K:V" file="D:\Projects\haxe\std/haxe/Constraints.hx" module="haxe.Constraints" interface="1">
		<get public="1" set="method"><f a="k">
	<c path="haxe.IMap.K"/>
	<x path="Null"><c path="haxe.IMap.V"/></x>
</f></get>
		<keys public="1" set="method"><f a=""><t path="Iterator"><c path="haxe.IMap.K"/></t></f></keys>
		<meta><m n=":keep"/></meta>
	</class>
	<abstract path="haxe.EnumFlags" params="T" file="D:\Projects\haxe\std/haxe/EnumFlags.hx">
		<this><x path="Int"/></this>
		<haxe_doc>A typed interface for bit flags. This is not a real object, only a typed
	interface for an actual Int. Each flag can be tested/set with the
	corresponding enum instance. Up to 32 flags can be stored that way.

	Enum constructor indices are preserved from Haxe syntax, so the first
	declared is index 0, the next index 1 etc. The methods are optimized if the
	enum instance is passed directly, e.g. as `has(EnumCtor)`. Otherwise
	`Type.enumIndex()` reflection is used.</haxe_doc>
		<impl><class path="haxe._EnumFlags.EnumFlags_Impl_" params="" file="D:\Projects\haxe\std/haxe/EnumFlags.hx" private="1" module="haxe.EnumFlags"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="haxe.EnumTools" params="" file="D:\Projects\haxe\std/haxe/EnumTools.hx" extern="1">
		<getName public="1" params="T" get="inline" set="null" line="52" static="1">
			<f a="e">
				<x path="Enum"><c path="getName.T"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of enum `e`, including its path.

		If `e` is inside a package, the package structure is returned dot-
		separated, with another dot separating the enum name:
		
			pack1.pack2.(...).packN.EnumName

		If `e` is a sub-type of a Haxe module, that module is not part of the
		package structure.

		If `e` has no package, the enum name is returned.

		If `e` is `null`, the result is unspecified.

		The enum name does not include any type parameters.</haxe_doc>
		</getName>
		<createByName public="1" params="T" get="inline" set="null" line="65" static="1">
			<f a="e:constr:?params">
				<x path="Enum"><c path="createByName.T"/></x>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createByName.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor `constr` with
		arguments `params`.

		If `e` or `constr` is `null`, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createByName>
		<createByIndex public="1" params="T" get="inline" set="null" line="81" static="1">
			<f a="e:index:?params">
				<x path="Enum"><c path="createByIndex.T"/></x>
				<x path="Int"/>
				<c path="Array"><d/></c>
				<c path="createByIndex.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor number
		`index` with arguments `params`.

		The constructor indices are preserved from Haxe syntax, so the first
		declared is index 0, the next index 1 etc.

		If `e` or `index` is `null`, or if enum `e` has no constructor
		corresponding to index `index`, or if the number of elements in `params`
		does not match the expected number of constructor arguments, or if any
		argument has an invalid type, the result is unspecified.</haxe_doc>
		</createByIndex>
		<createAll public="1" params="T" get="inline" set="null" line="98" static="1">
			<f a="e">
				<x path="Enum"><c path="createAll.T"/></x>
				<c path="Array"><c path="createAll.T"/></c>
			</f>
			<haxe_doc>Returns a list of all constructors of enum `e` that require no
		arguments.

		This may return the empty Array `[]` if all constructors of `e` require
		arguments.

		Otherwise an instance of `e` constructed through each of its non-
		argument constructors is returned, in the order of the constructor
		declaration.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</createAll>
		<getConstructors public="1" params="T" get="inline" set="null" line="110" static="1">
			<f a="e">
				<x path="Enum"><c path="getConstructors.T"/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the names of all constructors of enum `e`.

		The order of the constructor names in the returned Array is preserved
		from the original syntax.

		If `c` is `null`, the result is unspecified.</haxe_doc>
		</getConstructors>
		<haxe_doc>This class provides advanced methods on enums. It is ideally used with
	`using EnumTools` and then acts as an
	  [extension](https://haxe.org/manual/lf-static-extension.html) to the
	  `enum` types.

	If the first argument to any of the methods is `null`, the result is
	unspecified.</haxe_doc>
	</class>
	<class path="haxe.EnumValueTools" params="" file="D:\Projects\haxe\std/haxe/EnumTools.hx" module="haxe.EnumTools" extern="1">
		<equals public="1" params="T" get="inline" set="null" line="133" static="1">
			<f a="a:b">
				<c path="equals.T"/>
				<c path="equals.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Recursively compares two enum instances `a` and `b` by value.

		Unlike `a == b`, this function performs a deep equality check on the
		arguments of the constructors (if there are any).

		If `a` or `b` are `null`, the result is unspecified.</haxe_doc>
		</equals>
		<getName public="1" get="inline" set="null" line="144" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the constructor name of enum instance `e`.

		The result String does not contain any constructor arguments.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getName>
		<getParameters public="1" get="inline" set="null" line="158" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>Returns a list of the constructor arguments of enum instance `e`.

		If `e` has no arguments, the result is `[]`.

		Otherwise the result are the values that were used as arguments to `e`,
		in the order of their declaration.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getParameters>
		<getIndex public="1" get="inline" set="null" line="170" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index of enum instance `e`.

		This corresponds to the original syntactic position of `e`. The index of
		the first declared constructor is 0, the next one is 1 etc.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getIndex>
		<haxe_doc>This class provides advanced methods on enum values. It is ideally used with
	`using EnumValueTools` and then acts as an
	  [extension](https://haxe.org/manual/lf-static-extension.html) to the
	  `EnumValue` types.

	If the first argument to any of the methods is `null`, the result is
	unspecified.</haxe_doc>
	</class>
	<abstract path="haxe.Int32" params="" file="D:\Projects\haxe\std/haxe/Int32.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to>
			<icast><x path="Int"/></icast>
			<icast field="toFloat"><x path="Float"/></icast>
		</to>
		<haxe_doc>Int32 provides a 32-bit integer with consistent overflow behavior across
	all platforms.</haxe_doc>
		<impl><class path="haxe._Int32.Int32_Impl_" params="" file="D:\Projects\haxe\std/haxe/Int32.hx" private="1" module="haxe.Int32"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.Int64" params="" file="D:\Projects\haxe\std/haxe/Int64.hx">
		<from>
			<icast><t path="haxe._Int64.__Int64"/></icast>
			<icast field="ofInt"><x path="Int"/></icast>
		</from>
		<this><t path="haxe._Int64.__Int64"/></this>
		<to><icast><t path="haxe._Int64.__Int64"/></icast></to>
		<haxe_doc>A cross-platform signed 64-bit integer.
	Int64 instances can be created from two 32-bit words using `Int64.make()`.</haxe_doc>
		<impl><class path="haxe._Int64.Int64_Impl_" params="" file="D:\Projects\haxe\std/haxe/Int64.hx" private="1" module="haxe.Int64">
	<high public="1" get="accessor" set="null" static="1">
		<x path="haxe.Int32"/>
		<meta><m n=":impl"/></meta>
	</high>
	<low public="1" get="accessor" set="null" static="1">
		<x path="haxe.Int32"/>
		<meta><m n=":impl"/></meta>
	</low>
	<meta><m n=":keep"/></meta>
</class></impl>
	</abstract>
	<typedef path="haxe._Int64.__Int64" params="" file="D:\Projects\haxe\std/haxe/Int64.hx" private="1" module="haxe.Int64">
		<c path="haxe._Int64.___Int64"/>
		<haxe_doc>This typedef will fool `@:coreApi` into thinking that we are using
	the same underlying type, even though it might be different on
	specific platforms.</haxe_doc>
	</typedef>
	<class path="haxe._Int64.___Int64" params="" file="D:\Projects\haxe\std/haxe/Int64.hx" private="1" module="haxe.Int64">
		<high public="1"><x path="haxe.Int32"/></high>
		<low public="1"><x path="haxe.Int32"/></low>
		<new public="1" get="inline" set="null" line="467"><f a="high:low">
	<x path="haxe.Int32"/>
	<x path="haxe.Int32"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="haxe.Log" params="" file="D:\Projects\haxe\std/haxe/Log.hx">
		<formatOutput public="1" set="method" line="33" static="1">
			<f a="v:infos">
				<d/>
				<t path="haxe.PosInfos"/>
				<c path="String"/>
			</f>
			<haxe_doc>Format the output of `trace` before printing it.</haxe_doc>
		</formatOutput>
		<trace public="1" set="dynamic" line="62" static="1">
			<f a="v:?infos">
				<d/>
				<t path="haxe.PosInfos"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Outputs `v` in a platform-dependent way.

		The second parameter `infos` is injected by the compiler and contains
		information about the position where the `trace()` call was made.

		This method can be rebound to a custom function:

			var oldTrace = haxe.Log.trace; // store old function
			haxe.Log.trace = function(v, ?infos) {
			  // handle trace
			}
			...
			haxe.Log.trace = oldTrace;

		If it is bound to null, subsequent calls to `trace()` will cause an
		exception.</haxe_doc>
		</trace>
		<haxe_doc>Log primarily provides the `trace()` method, which is invoked upon a call to
	`trace()` in Haxe code.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<typedef path="haxe.PosInfos" params="" file="D:\Projects\haxe\std/haxe/PosInfos.hx">
		<a>
			<methodName><c path="String"/></methodName>
			<lineNumber><x path="Int"/></lineNumber>
			<fileName><c path="String"/></fileName>
			<customParams>
				<x path="Null"><c path="Array"><d/></c></x>
				<meta><m n=":optional"/></meta>
			</customParams>
			<className><c path="String"/></className>
		</a>
		<haxe_doc>`PosInfos` is a magic type which can be used to generate position information
	into the output for debugging use.

	If a function has a final optional argument of this type, i.e.
	`(..., ?pos:haxe.PosInfos)`, each call to that function which does not assign
	a value to that argument has its position added as call argument.

	This can be used to track positions of calls in e.g. a unit testing
	framework.</haxe_doc>
	</typedef>
	<class path="haxe._Unserializer.DefaultResolver" params="" file="D:\Projects\haxe\std/haxe/Unserializer.hx" private="1" module="haxe.Unserializer">
		<resolveClass public="1" get="inline" set="null" line="476"><f a="name">
	<c path="String"/>
	<x path="Class"><d/></x>
</f></resolveClass>
		<resolveEnum public="1" get="inline" set="null" line="479"><f a="name">
	<c path="String"/>
	<x path="Enum"><d/></x>
</f></resolveEnum>
		<new public="1" set="method" line="474"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="haxe.Unserializer" params="" file="D:\Projects\haxe\std/haxe/Unserializer.hx">
		<DEFAULT_RESOLVER public="1" expr="new DefaultResolver()" line="65" static="1">
			<t path="haxe.TypeResolver"/>
			<meta><m n=":value"><e>new DefaultResolver()</e></m></meta>
			<haxe_doc><![CDATA[This value can be set to use custom type resolvers.

		A type resolver finds a `Class` or `Enum` instance from a given `String`.
		By default, the Haxe `Type` Api is used.

		A type resolver must provide two methods:

		1. `resolveClass(name:String):Class<Dynamic>` is called to determine a
				`Class` from a class name
		2. `resolveEnum(name:String):Enum<Dynamic>` is called to determine an
				`Enum` from an enum name

		This value is applied when a new `Unserializer` instance is created.
		Changing it afterwards has no effect on previously created instances.]]></haxe_doc>
		</DEFAULT_RESOLVER>
		<BASE64 expr="&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:&quot;" line="67" static="1">
			<c path="String"/>
			<meta><m n=":value"><e>"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:"</e></m></meta>
		</BASE64>
		<CODES expr="null" line="70" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>null</e></m></meta>
		</CODES>
		<initCodes set="method" line="72" static="1"><f a=""><c path="Array"><x path="Int"/></c></f></initCodes>
		<run public="1" set="method" line="464" static="1">
			<f a="v">
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>Unserializes `v` and returns the according value.

		This is a convenience function for creating a new instance of
		Unserializer with `v` as buffer and calling its `unserialize()` method
		once.</haxe_doc>
		</run>
		<buf><c path="String"/></buf>
		<pos><x path="Int"/></pos>
		<length><x path="Int"/></length>
		<cache><c path="Array"><d/></c></cache>
		<scache><c path="Array"><c path="String"/></c></scache>
		<resolver><t path="haxe.TypeResolver"/></resolver>
		<readDigits set="method" line="144"><f a=""><x path="Int"/></f></readDigits>
		<readFloat set="method" line="169"><f a=""><x path="Float"/></f></readFloat>
		<unserializeObject set="method" line="184"><f a="o">
	<a/>
	<x path="Void"/>
</f></unserializeObject>
		<unserializeEnum params="T" set="method" line="199"><f a="edecl:tag">
	<x path="Enum"><c path="unserializeEnum.T"/></x>
	<c path="String"/>
	<c path="unserializeEnum.T"/>
</f></unserializeEnum>
		<unserialize public="1" set="method" line="231">
			<f a=""><d/></f>
			<haxe_doc>Unserializes the next part of `this` Unserializer instance and returns
		the according value.

		This function may call `this.resolver.resolveClass` to determine a
		Class from a String, and `this.resolver.resolveEnum` to determine an
		Enum from a String.

		If `this` Unserializer instance contains no more or invalid data, an
		exception is thrown.

		This operation may fail on structurally valid data if a type cannot be
		resolved or if a field cannot be set. This can happen when unserializing
		Strings that were serialized on a different Haxe target, in which the
		serialization side has to make sure not to include platform-specific
		data.

		Classes are created from `Type.createEmptyInstance`, which means their
		constructors are not called.</haxe_doc>
		</unserialize>
		<new public="1" set="method" line="99">
			<f a="buf">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new Unserializer instance, with its internal buffer
		initialized to `buf`.

		This does not parse `buf` immediately. It is parsed only when calls to
		`this.unserialize` are made.

		Each Unserializer instance maintains its own cache.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The `Unserializer` class is the complement to the `Serializer` class. It parses
	a serialization `String` and creates objects from the contained data.

	This class can be used in two ways:

	- create a `new Unserializer()` instance with a given serialization
		String, then call its `unserialize()` method until all values are
		extracted
	- call `Unserializer.run()`  to unserialize a single value from a given
		String

	The specification of the serialization format can be found here:
	<https://haxe.org/manual/serialization/format>]]></haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="haxe.crypto.Adler32" params="" file="D:\Projects\haxe\std/haxe/crypto/Adler32.hx">
		<read public="1" set="method" line="60" static="1"><f a="i">
	<c path="haxe.io.Input"/>
	<c path="haxe.crypto.Adler32"/>
</f></read>
		<a1><x path="Int"/></a1>
		<a2><x path="Int"/></a2>
		<update public="1" set="method" line="41"><f a="b:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></update>
		<equals public="1" set="method" line="52"><f a="a">
	<c path="haxe.crypto.Adler32"/>
	<x path="Bool"/>
</f></equals>
		<new public="1" set="method" line="32"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Calculates the Adler32 of the given Bytes.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="haxe.ds.BalancedTree" params="K:V" file="D:\Projects\haxe\std/haxe/ds/BalancedTree.hx">
		<implements path="haxe.IMap">
			<c path="haxe.ds.BalancedTree.K"/>
			<c path="haxe.ds.BalancedTree.V"/>
		</implements>
		<root><c path="haxe.ds.TreeNode">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.V"/>
</c></root>
		<set public="1" set="method" line="50">
			<f a="key:value">
				<c path="haxe.ds.BalancedTree.K"/>
				<c path="haxe.ds.BalancedTree.V"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Binds `key` to `value`.

		If `key` is already bound to a value, that binding disappears.

		If `key` is null, the result is unspecified.</haxe_doc>
		</set>
		<get public="1" set="method" line="61">
			<f a="key">
				<c path="haxe.ds.BalancedTree.K"/>
				<x path="Null"><c path="haxe.ds.BalancedTree.V"/></x>
			</f>
			<haxe_doc>Returns the value `key` is bound to.

		If `key` is not bound to any value, `null` is returned.

		If `key` is null, the result is unspecified.</haxe_doc>
		</get>
		<iterator public="1" set="method" line="120">
			<f a=""><t path="Iterator"><c path="haxe.ds.BalancedTree.V"/></t></f>
			<haxe_doc>Iterates over the bound values of `this` BalancedTree.

		This operation is performed in-order.</haxe_doc>
		</iterator>
		<keys public="1" set="method" line="138">
			<f a=""><t path="Iterator"><c path="haxe.ds.BalancedTree.K"/></t></f>
			<haxe_doc>Iterates over the keys of `this` BalancedTree.

		This operation is performed in-order.</haxe_doc>
		</keys>
		<setLoop set="method" line="150"><f a="k:v:node">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.V"/>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></setLoop>
		<iteratorLoop set="method" line="172"><f a="node:acc">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="Array"><c path="haxe.ds.BalancedTree.V"/></c>
	<x path="Void"/>
</f></iteratorLoop>
		<keysLoop set="method" line="180"><f a="node:acc">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="Array"><c path="haxe.ds.BalancedTree.K"/></c>
	<x path="Void"/>
</f></keysLoop>
		<balance set="method" line="205"><f a="l:k:v:r">
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.V"/>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
	<c path="haxe.ds.TreeNode">
		<c path="haxe.ds.BalancedTree.K"/>
		<c path="haxe.ds.BalancedTree.V"/>
	</c>
</f></balance>
		<compare set="method" line="225"><f a="k1:k2">
	<c path="haxe.ds.BalancedTree.K"/>
	<c path="haxe.ds.BalancedTree.K"/>
	<x path="Int"/>
</f></compare>
		<new public="1" set="method" line="41">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new BalancedTree, which is initially empty.</haxe_doc>
		</new>
		<haxe_doc>BalancedTree allows key-value mapping with arbitrary keys, as long as they
	can be ordered. By default, `Reflect.compare` is used in the `compare`
	method, which can be overridden in subclasses.

	Operations have a logarithmic average and worst-case cost.

	Iteration over keys and values, using `keys` and `iterator` respectively,
	are in-order.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="haxe.ds.TreeNode" params="K:V" file="D:\Projects\haxe\std/haxe/ds/BalancedTree.hx" module="haxe.ds.BalancedTree">
		<left public="1"><c path="haxe.ds.TreeNode">
	<c path="haxe.ds.TreeNode.K"/>
	<c path="haxe.ds.TreeNode.V"/>
</c></left>
		<right public="1"><c path="haxe.ds.TreeNode">
	<c path="haxe.ds.TreeNode.K"/>
	<c path="haxe.ds.TreeNode.V"/>
</c></right>
		<key public="1"><c path="haxe.ds.TreeNode.K"/></key>
		<value public="1"><c path="haxe.ds.TreeNode.V"/></value>
		<_height><x path="Int"/></_height>
		<new public="1" set="method" line="252">
			<f a="l:k:v:r:?h" v="::::-1">
				<c path="haxe.ds.TreeNode">
					<c path="haxe.ds.TreeNode.K"/>
					<c path="haxe.ds.TreeNode.V"/>
				</c>
				<c path="haxe.ds.TreeNode.K"/>
				<c path="haxe.ds.TreeNode.V"/>
				<c path="haxe.ds.TreeNode">
					<c path="haxe.ds.TreeNode.K"/>
					<c path="haxe.ds.TreeNode.V"/>
				</c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ h : -1 }</e></m></meta>
		</new>
		<haxe_doc>A tree node of `haxe.ds.BalancedTree`.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="haxe.ds.EnumValueMap" params="K:V" file="D:\Projects\haxe\std/haxe/ds/EnumValueMap.hx">
		<extends path="haxe.ds.BalancedTree">
			<c path="haxe.ds.EnumValueMap.K"/>
			<c path="haxe.ds.EnumValueMap.V"/>
		</extends>
		<implements path="haxe.IMap">
			<c path="haxe.ds.EnumValueMap.K"/>
			<c path="haxe.ds.EnumValueMap.V"/>
		</implements>
		<compare set="method" line="32" override="1"><f a="k1:k2">
	<x path="EnumValue"/>
	<x path="EnumValue"/>
	<x path="Int"/>
</f></compare>
		<compareArgs set="method" line="43"><f a="a1:a2">
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
	<x path="Int"/>
</f></compareArgs>
		<compareArg set="method" line="55"><f a="v1:v2">
	<d/>
	<d/>
	<x path="Int"/>
</f></compareArg>
		<new public="1" set="method" line="31"><f a=""><x path="Void"/></f></new>
		<haxe_doc>EnumValueMap allows mapping of enum value keys to arbitrary values.

	Keys are compared by value and recursively over their parameters. If any
	parameter is not an enum value, `Reflect.compare` is used to compare them.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="haxe.ds.GenericCell" params="T" file="D:\Projects\haxe\std/haxe/ds/GenericStack.hx" module="haxe.ds.GenericStack">
		<elt public="1"><c path="haxe.ds.GenericCell.T"/></elt>
		<next public="1"><c path="haxe.ds.GenericCell"><c path="haxe.ds.GenericCell.T"/></c></next>
		<new public="1" set="method" line="37"><f a="elt:next">
	<c path="haxe.ds.GenericCell.T"/>
	<c path="haxe.ds.GenericCell"><c path="haxe.ds.GenericCell.T"/></c>
	<x path="Void"/>
</f></new>
		<haxe_doc>A cell of `haxe.ds.GenericStack`.

	@see https://haxe.org/manual/std-GenericStack.html</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="haxe.ds.GenericStack" params="T" file="D:\Projects\haxe\std/haxe/ds/GenericStack.hx">
		<head public="1"><c path="haxe.ds.GenericCell"><c path="haxe.ds.GenericStack.T"/></c></head>
		<new public="1" set="method" line="107">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new empty GenericStack.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[A stack of elements.

	This class is generic, which means one type is generated for each type
	parameter T on static targets. For example:

	- `new GenericStack<Int>()` generates `GenericStack_Int`
	- `new GenericStack<String>()` generates `GenericStack_String`

	The generated name is an implementation detail and should not be relied
	upon.

	@see https://haxe.org/manual/std-GenericStack.html]]></haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<abstract path="haxe.ds.HashMap" params="K:V" file="D:\Projects\haxe\std/haxe/ds/HashMap.hx">
		<this><c path="haxe.ds._HashMap.HashMapData">
	<c path="haxe.ds.HashMap.K"/>
	<c path="haxe.ds.HashMap.V"/>
</c></this>
		<haxe_doc>HashMap allows mapping of hashable objects to arbitrary values.

	See `Map` for documentation details.

	@see https://haxe.org/manual/std-Map.html</haxe_doc>
		<impl><class path="haxe.ds._HashMap.HashMap_Impl_" params="" file="D:\Projects\haxe\std/haxe/ds/HashMap.hx" private="1" module="haxe.ds.HashMap"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="haxe.ds.IntMap" params="T" file="D:\Projects\haxe\std/haxe/ds/IntMap.hx" extern="1">
		<implements path="haxe.IMap">
			<x path="Int"/>
			<c path="haxe.ds.IntMap.T"/>
		</implements>
		<set public="1" set="method">
			<f a="key:value">
				<x path="Int"/>
				<c path="haxe.ds.IntMap.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<get public="1" set="method">
			<f a="key">
				<x path="Int"/>
				<x path="Null"><c path="haxe.ds.IntMap.T"/></x>
			</f>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<exists public="1" set="method">
			<f a="key">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<remove public="1" set="method">
			<f a="key">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<keys public="1" set="method">
			<f a=""><t path="Iterator"><x path="Int"/></t></f>
			<haxe_doc>See `Map.keys`

		(cs, java) Implementation detail: Do not `set()` any new value while
		iterating, as it may cause a resize, which will break iteration.</haxe_doc>
		</keys>
		<iterator public="1" set="method">
			<f a=""><t path="Iterator"><c path="haxe.ds.IntMap.T"/></t></f>
			<haxe_doc>See `Map.iterator`

		(cs, java) Implementation detail: Do not `set()` any new value while
		iterating, as it may cause a resize, which will break iteration.</haxe_doc>
		</iterator>
		<keyValueIterator public="1" set="method">
			<f a=""><t path="KeyValueIterator">
	<x path="Int"/>
	<c path="haxe.ds.IntMap.T"/>
</t></f>
			<haxe_doc>See `Map.keyValueIterator`</haxe_doc>
		</keyValueIterator>
		<copy public="1" set="method">
			<f a=""><c path="haxe.ds.IntMap"><c path="haxe.ds.IntMap.T"/></c></f>
			<haxe_doc>See `Map.copy`</haxe_doc>
		</copy>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>See `Map.toString`</haxe_doc>
		</toString>
		<clear public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>See `Map.clear`</haxe_doc>
		</clear>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new IntMap.</haxe_doc>
		</new>
		<haxe_doc>IntMap allows mapping of Int keys to arbitrary values.

	See `Map` for documentation details.

	@see https://haxe.org/manual/std-Map.html</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="haxe.ds.List" params="T" file="D:\Projects\haxe\std/haxe/ds/List.hx">
		<h><c path="haxe.ds._List.ListNode"><c path="haxe.ds.List.T"/></c></h>
		<q><c path="haxe.ds._List.ListNode"><c path="haxe.ds.List.T"/></c></q>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` List.</haxe_doc>
		</length>
		<add public="1" set="method" line="53">
			<f a="item">
				<c path="haxe.ds.List.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds element `item` at the end of `this` List.

		`this.length` increases by 1.</haxe_doc>
		</add>
		<new public="1" set="method" line="44">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new empty list.</haxe_doc>
		</new>
		<haxe_doc>A linked-list of elements. The list is composed of element container objects
	that are chained together. It is optimized so that adding or removing an
	element does not imply copying the whole list content every time.

	@see https://haxe.org/manual/std-List.html</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="haxe.ds._List.ListNode" params="T" file="D:\Projects\haxe\std/haxe/ds/List.hx" private="1" module="haxe.ds.List">
		<item public="1"><c path="haxe.ds._List.ListNode.T"/></item>
		<next public="1"><c path="haxe.ds._List.ListNode"><c path="haxe.ds._List.ListNode.T"/></c></next>
		<new public="1" set="method" line="266"><f a="item:next">
	<c path="haxe.ds._List.ListNode.T"/>
	<c path="haxe.ds._List.ListNode"><c path="haxe.ds._List.ListNode.T"/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<abstract path="haxe.ds.Map" params="K:V" file="D:\Projects\haxe\std/haxe/ds/Map.hx">
		<from>
			<icast field="fromStringMap"><c path="haxe.ds.StringMap"><c path="fromStringMap.V"/></c></icast>
			<icast field="fromIntMap"><c path="haxe.ds.IntMap"><c path="fromIntMap.V"/></c></icast>
			<icast field="fromObjectMap"><c path="haxe.ds.ObjectMap">
	<c path="fromObjectMap.K"/>
	<c path="fromObjectMap.V"/>
</c></icast>
		</from>
		<this><c path="haxe.IMap">
	<c path="haxe.ds.Map.K"/>
	<c path="haxe.ds.Map.V"/>
</c></this>
		<to>
			<icast field="toStringMap"><c path="haxe.ds.StringMap"><c path="toStringMap.V"/></c></icast>
			<icast field="toIntMap"><c path="haxe.ds.IntMap"><c path="toIntMap.V"/></c></icast>
			<icast field="toEnumValueMapMap"><c path="haxe.ds.EnumValueMap">
	<c path="toEnumValueMapMap.K"/>
	<c path="toEnumValueMapMap.V"/>
</c></icast>
			<icast field="toObjectMap"><c path="haxe.ds.ObjectMap">
	<c path="toObjectMap.K"/>
	<c path="toObjectMap.V"/>
</c></icast>
		</to>
		<haxe_doc><![CDATA[Map allows key to value mapping for arbitrary value types, and many key
	types.

	This is a multi-type abstract, it is instantiated as one of its
	specialization types depending on its type parameters.

	A Map can be instantiated without explicit type parameters. Type inference
	will then determine the type parameters from the usage.

	Maps can also be created with `[key1 => value1, key2 => value2]` syntax.

	Map is an abstract type, it is not available at runtime.

	@see https://haxe.org/manual/std-Map.html]]></haxe_doc>
		<meta><m n=":multiType"><e>@:followWithAbstracts K</e></m></meta>
		<impl><class path="haxe.ds._Map.Map_Impl_" params="" file="D:\Projects\haxe\std/haxe/ds/Map.hx" private="1" module="haxe.ds.Map"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="haxe.ds.ObjectMap" params="K:V" file="D:\Projects\haxe\std/haxe/ds/ObjectMap.hx" extern="1">
		<implements path="haxe.IMap">
			<c path="haxe.ds.ObjectMap.K"/>
			<c path="haxe.ds.ObjectMap.V"/>
		</implements>
		<set public="1" set="method">
			<f a="key:value">
				<c path="haxe.ds.ObjectMap.K"/>
				<c path="haxe.ds.ObjectMap.V"/>
				<x path="Void"/>
			</f>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<get public="1" set="method">
			<f a="key">
				<c path="haxe.ds.ObjectMap.K"/>
				<x path="Null"><c path="haxe.ds.ObjectMap.V"/></x>
			</f>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<exists public="1" set="method">
			<f a="key">
				<c path="haxe.ds.ObjectMap.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<remove public="1" set="method">
			<f a="key">
				<c path="haxe.ds.ObjectMap.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<keys public="1" set="method">
			<f a=""><t path="Iterator"><c path="haxe.ds.ObjectMap.K"/></t></f>
			<haxe_doc>See `Map.keys`

		(cs, java) Implementation detail: Do not `set()` any new value while
		iterating, as it may cause a resize, which will break iteration.</haxe_doc>
		</keys>
		<iterator public="1" set="method">
			<f a=""><t path="Iterator"><c path="haxe.ds.ObjectMap.V"/></t></f>
			<haxe_doc>See `Map.iterator`

		(cs, java) Implementation detail: Do not `set()` any new value while
		iterating, as it may cause a resize, which will break iteration.</haxe_doc>
		</iterator>
		<keyValueIterator public="1" set="method">
			<f a=""><t path="KeyValueIterator">
	<c path="haxe.ds.ObjectMap.K"/>
	<c path="haxe.ds.ObjectMap.V"/>
</t></f>
			<haxe_doc>See `Map.keyValueIterator`</haxe_doc>
		</keyValueIterator>
		<copy public="1" set="method">
			<f a=""><c path="haxe.ds.ObjectMap">
	<c path="haxe.ds.ObjectMap.K"/>
	<c path="haxe.ds.ObjectMap.V"/>
</c></f>
			<haxe_doc>See `Map.copy`</haxe_doc>
		</copy>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>See `Map.toString`</haxe_doc>
		</toString>
		<clear public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>See `Map.clear`</haxe_doc>
		</clear>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new ObjectMap.</haxe_doc>
		</new>
		<haxe_doc>ObjectMap allows mapping of object keys to arbitrary values.

	On static targets, the keys are considered to be strong references. Refer
	to `haxe.ds.WeakMap` for a weak reference version.

	See `Map` for documentation details.

	@see https://haxe.org/manual/std-Map.html</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="haxe.ds.ReadOnlyArray" params="T" file="D:\Projects\haxe\std/haxe/ds/ReadOnlyArray.hx">
		<from><icast><c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c></icast></from>
		<this><c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c></this>
		<haxe_doc>`ReadOnlyArray` is an abstract over an ordinary `Array` which only exposes
	APIs that don't modify the instance, hence "read-only".

	Note that this doesn't necessarily mean that the instance is *immutable*.
	Other code holding a reference to the underlying `Array` can still modify it,
	and the reference can be obtained with a `cast`.</haxe_doc>
		<meta><m n=":forward">
	<e>concat</e>
	<e>copy</e>
	<e>filter</e>
	<e>indexOf</e>
	<e>iterator</e>
	<e>join</e>
	<e>lastIndexOf</e>
	<e>map</e>
	<e>slice</e>
	<e>toString</e>
</m></meta>
		<impl><class path="haxe.ds._ReadOnlyArray.ReadOnlyArray_Impl_" params="" file="D:\Projects\haxe\std/haxe/ds/ReadOnlyArray.hx" private="1" module="haxe.ds.ReadOnlyArray">
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
		<haxe_doc>The length of `this` Array.</haxe_doc>
	</length>
	<meta><m n=":keep"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.ds.StringMap" params="T" file="D:\Projects\haxe\std/haxe/ds/StringMap.hx" extern="1">
		<implements path="haxe.IMap">
			<c path="String"/>
			<c path="haxe.ds.StringMap.T"/>
		</implements>
		<set public="1" set="method">
			<f a="key:value">
				<c path="String"/>
				<c path="haxe.ds.StringMap.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<get public="1" set="method">
			<f a="key">
				<c path="String"/>
				<x path="Null"><c path="haxe.ds.StringMap.T"/></x>
			</f>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<exists public="1" set="method">
			<f a="key">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<remove public="1" set="method">
			<f a="key">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<keys public="1" set="method">
			<f a=""><t path="Iterator"><c path="String"/></t></f>
			<haxe_doc>See `Map.keys`

		(cs, java) Implementation detail: Do not `set()` any new value while
		iterating, as it may cause a resize, which will break iteration.</haxe_doc>
		</keys>
		<iterator public="1" set="method">
			<f a=""><t path="Iterator"><c path="haxe.ds.StringMap.T"/></t></f>
			<haxe_doc>See `Map.iterator`

		(cs, java) Implementation detail: Do not `set()` any new value while
		iterating, as it may cause a resize, which will break iteration.</haxe_doc>
		</iterator>
		<keyValueIterator public="1" set="method">
			<f a=""><t path="KeyValueIterator">
	<c path="String"/>
	<c path="haxe.ds.StringMap.T"/>
</t></f>
			<haxe_doc>See `Map.keyValueIterator`</haxe_doc>
		</keyValueIterator>
		<copy public="1" set="method">
			<f a=""><c path="haxe.ds.StringMap"><c path="haxe.ds.StringMap.T"/></c></f>
			<haxe_doc>See `Map.copy`</haxe_doc>
		</copy>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>See `Map.toString`</haxe_doc>
		</toString>
		<clear public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>See `Map.clear`</haxe_doc>
		</clear>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new StringMap.</haxe_doc>
		</new>
		<haxe_doc>StringMap allows mapping of String keys to arbitrary values.

	See `Map` for documentation details.

	@see https://haxe.org/manual/std-Map.html</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<typedef path="haxe.ds._Vector.VectorData" params="T" file="D:\Projects\haxe\std/haxe/ds/Vector.hx" private="1" module="haxe.ds.Vector"><c path="Array"><c path="haxe.ds._Vector.VectorData.T"/></c></typedef>
	<abstract path="haxe.ds.Vector" params="T" file="D:\Projects\haxe\std/haxe/ds/Vector.hx">
		<this><t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t></this>
		<haxe_doc>A Vector is a storage of fixed size. It can be faster than Array on some
	targets, and is never slower.

	@see https://haxe.org/manual/std-vector.html</haxe_doc>
		<impl><class path="haxe.ds._Vector.Vector_Impl_" params="" file="D:\Projects\haxe\std/haxe/ds/Vector.hx" private="1" module="haxe.ds.Vector">
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns the length of `this` Vector.</haxe_doc>
	</length>
	<meta><m n=":keep"/></meta>
</class></impl>
	</abstract>
	<abstract path="haxe.extern.EitherType" params="T1:T2" file="D:\Projects\haxe\std/haxe/extern/EitherType.hx">
		<from>
			<icast><c path="haxe.extern.EitherType.T2"/></icast>
			<icast><c path="haxe.extern.EitherType.T1"/></icast>
		</from>
		<this><d/></this>
		<to>
			<icast><c path="haxe.extern.EitherType.T2"/></icast>
			<icast><c path="haxe.extern.EitherType.T1"/></icast>
		</to>
		<haxe_doc><![CDATA[An abstract type allowing values to be either of `T1` or `T2` type.
	Supports implicit casts from/to either types.

	It is useful for interfacing with external code on dynamic platforms
	such as JavaScript or Python.

	Otherwise, use of this type is discouraged.

	@see <https://haxe.org/manual/lf-externs.html>]]></haxe_doc>
		<impl><class path="haxe.extern._EitherType.EitherType_Impl_" params="" file="D:\Projects\haxe\std/haxe/extern/EitherType.hx" private="1" module="haxe.extern.EitherType"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<typedef path="haxe.io.ArrayBufferViewData" params="" file="D:\Projects\haxe\std/haxe/io/ArrayBufferView.hx" module="haxe.io.ArrayBufferView"><c path="haxe.io.ArrayBufferViewImpl"/></typedef>
	<class path="haxe.io.ArrayBufferViewImpl" params="" file="D:\Projects\haxe\std/haxe/io/ArrayBufferView.hx" module="haxe.io.ArrayBufferView"><meta><m n=":keep"/></meta></class>
	<abstract path="haxe.io.ArrayBufferView" params="" file="D:\Projects\haxe\std/haxe/io/ArrayBufferView.hx">
		<this><t path="haxe.io.ArrayBufferViewData"/></this>
		<impl><class path="haxe.io._ArrayBufferView.ArrayBufferView_Impl_" params="" file="D:\Projects\haxe\std/haxe/io/ArrayBufferView.hx" private="1" module="haxe.io.ArrayBufferView">
	<buffer public="1" get="accessor" set="null" static="1">
		<c path="haxe.io.Bytes"/>
		<meta><m n=":impl"/></meta>
	</buffer>
	<byteOffset public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</byteOffset>
	<byteLength public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</byteLength>
	<meta><m n=":keep"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.io.BytesBuffer" params="" file="D:\Projects\haxe\std/haxe/io/BytesBuffer.hx">
		<b><c path="Array"><x path="Int"/></c></b>
		<length public="1" get="null" set="null">
			<x path="Int"/>
			<haxe_doc>The length of the buffer in bytes.</haxe_doc>
		</length>
		<getBytes public="1" set="method" line="201">
			<f a=""><c path="haxe.io.Bytes"/></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns either a copy or a reference of the current bytes.
		Once called, the buffer should no longer be used.</haxe_doc>
		</getBytes>
		<new public="1" set="method" line="45"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<typedef path="haxe.io.BytesData" params="" file="D:\Projects\haxe\std/haxe/io/BytesData.hx"><c path="Array"><x path="Int"/></c></typedef>
	<class path="haxe.io.BytesInput" params="" file="D:\Projects\haxe\std/haxe/io/BytesInput.hx">
		<extends path="haxe.io.Input"/>
		<b><t path="haxe.io.BytesData"/></b>
		<pos><x path="Int"/></pos>
		<len><x path="Int"/></len>
		<totlen><x path="Int"/></totlen>
		<position public="1" get="null" set="null">
			<x path="Int"/>
			<haxe_doc>The current position in the stream in bytes.</haxe_doc>
		</position>
		<length public="1" get="null" set="null">
			<x path="Int"/>
			<haxe_doc>The length of the stream in bytes.</haxe_doc>
		</length>
		<readByte public="1" set="method" line="96" override="1"><f a=""><x path="Int"/></f></readByte>
		<readBytes public="1" set="method" line="119" override="1"><f a="buf:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></readBytes>
		<new public="1" set="method" line="39"><f a="b:?pos:?len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="haxe.io.BytesOutput" params="" file="D:\Projects\haxe\std/haxe/io/BytesOutput.hx">
		<extends path="haxe.io.Output"/>
		<b><c path="haxe.io.BytesBuffer"/></b>
		<length public="1" get="null" set="null">
			<x path="Int"/>
			<haxe_doc>The length of the stream in bytes.</haxe_doc>
		</length>
		<writeByte public="1" set="method" line="51" override="1"><f a="c">
	<x path="Int"/>
	<x path="Void"/>
</f></writeByte>
		<writeBytes public="1" set="method" line="59" override="1"><f a="buf:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></writeBytes>
		<getBytes public="1" set="method" line="137">
			<f a=""><c path="haxe.io.Bytes"/></f>
			<haxe_doc>Returns the `Bytes` of this output.

		This function should not be called more than once on a given
		`BytesOutput` instance.</haxe_doc>
		</getBytes>
		<new public="1" set="method" line="35"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<enum path="haxe.io.Encoding" params="" file="D:\Projects\haxe\std/haxe/io/Encoding.hx">
		<UTF8/>
		<RawNative><haxe_doc>Output the string the way the platform represent it in memory. This is the most efficient but is platform-specific</haxe_doc></RawNative>
		<haxe_doc>String binary encoding supported by Haxe I/O</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<class path="haxe.io.Eof" params="" file="D:\Projects\haxe\std/haxe/io/Eof.hx">
		<toString set="method" line="32">
			<f a=""><c path="String"/></f>
			<meta><m n=":ifFeature"><e>"haxe.io.Eof.*"</e></m></meta>
		</toString>
		<new public="1" set="method" line="29"><f a=""><x path="Void"/></f></new>
		<haxe_doc>This exception is raised when reading while data is no longer available in the `haxe.io.Input`.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<enum path="haxe.io.Error" params="" file="D:\Projects\haxe\std/haxe/io/Error.hx">
		<Blocked><haxe_doc>The IO is set into nonblocking mode and some data cannot be read or written</haxe_doc></Blocked>
		<Overflow><haxe_doc>An integer value is outside its allowed range</haxe_doc></Overflow>
		<OutsideBounds><haxe_doc>An operation on Bytes is outside of its valid range</haxe_doc></OutsideBounds>
		<Custom a="e">
			<d/>
			<haxe_doc>Other errors</haxe_doc>
		</Custom>
		<haxe_doc>The possible IO errors that can occur</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<class path="haxe.io.FPHelper" params="" file="D:\Projects\haxe\std/haxe/io/FPHelper.hx">
		<i64tmp expr="Int64.ofInt(0)" line="35" static="1">
			<x path="haxe.Int64"/>
			<meta><m n=":value"><e>Int64.ofInt(0)</e></m></meta>
		</i64tmp>
		<i32ToFloat public="1" set="method" line="133" static="1"><f a="i">
	<x path="Int"/>
	<x path="Float"/>
</f></i32ToFloat>
		<floatToI32 public="1" set="method" line="177" static="1"><f a="f">
	<x path="Float"/>
	<x path="Int"/>
</f></floatToI32>
		<i64ToDouble public="1" set="method" line="214" static="1"><f a="low:high">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
</f></i64ToDouble>
		<doubleToI64 public="1" set="method" line="268" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="haxe.Int64"/>
			</f>
			<haxe_doc>Returns an Int64 representing the bytes representation of the double precision IEEE float value.
		WARNING : for performance reason, the same Int64 value might be reused every time. Copy its low/high values before calling again.
		We still ensure that this is safe to use in a multithread environment</haxe_doc>
		</doubleToI64>
		<haxe_doc>Helper that converts between floating point and binary representation.
	Always works in low-endian encoding.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<typedef path="haxe.io.UInt8ArrayData" params="" file="D:\Projects\haxe\std/haxe/io/UInt8Array.hx" module="haxe.io.UInt8Array"><t path="haxe.io.ArrayBufferViewData"/></typedef>
	<abstract path="haxe.io.UInt8Array" params="" file="D:\Projects\haxe\std/haxe/io/UInt8Array.hx">
		<this><t path="haxe.io.UInt8ArrayData"/></this>
		<impl><class path="haxe.io._UInt8Array.UInt8Array_Impl_" params="" file="D:\Projects\haxe\std/haxe/io/UInt8Array.hx" private="1" module="haxe.io.UInt8Array">
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</length>
	<view public="1" get="accessor" set="null" static="1">
		<x path="haxe.io.ArrayBufferView"/>
		<meta><m n=":impl"/></meta>
	</view>
	<meta><m n=":keep"/></meta>
</class></impl>
	</abstract>
	<abstract path="haxe.xml._Access.NodeAccess" params="" file="D:\Projects\haxe\std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access">
		<from><icast><c path="Xml"/></icast></from>
		<this><c path="Xml"/></this>
		<impl><class path="haxe.xml._Access.NodeAccess_Impl_" params="" file="D:\Projects\haxe\std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access">
	<resolve public="1" set="method" line="27" static="1">
		<f a="this:name">
			<c path="Xml"/>
			<c path="String"/>
			<x path="haxe.xml.Access"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>a.b</e></m>
		</meta>
	</resolve>
	<meta>
		<m n=":keep"/>
		<m n=":directlyUsed"/>
	</meta>
</class></impl>
	</abstract>
	<class path="haxe.xml._Access.NodeAccess_Impl_" params="" file="D:\Projects\haxe\std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access">
		<resolve public="1" set="method" line="27" static="1">
			<f a="this:name">
				<c path="Xml"/>
				<c path="String"/>
				<x path="haxe.xml.Access"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>a.b</e></m>
			</meta>
		</resolve>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<abstract path="haxe.xml._Access.AttribAccess" params="" file="D:\Projects\haxe\std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access">
		<from><icast><c path="Xml"/></icast></from>
		<this><c path="Xml"/></this>
		<impl><class path="haxe.xml._Access.AttribAccess_Impl_" params="" file="D:\Projects\haxe\std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access">
	<resolve public="1" set="method" line="39" static="1">
		<f a="this:name">
			<c path="Xml"/>
			<c path="String"/>
			<c path="String"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>a.b</e></m>
		</meta>
	</resolve>
	<meta>
		<m n=":keep"/>
		<m n=":directlyUsed"/>
	</meta>
</class></impl>
	</abstract>
	<class path="haxe.xml._Access.AttribAccess_Impl_" params="" file="D:\Projects\haxe\std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access">
		<resolve public="1" set="method" line="39" static="1">
			<f a="this:name">
				<c path="Xml"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>a.b</e></m>
			</meta>
		</resolve>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<abstract path="haxe.xml._Access.HasAttribAccess" params="" file="D:\Projects\haxe\std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access">
		<from><icast><c path="Xml"/></icast></from>
		<this><c path="Xml"/></this>
		<impl><class path="haxe.xml._Access.HasAttribAccess_Impl_" params="" file="D:\Projects\haxe\std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.xml._Access.HasNodeAccess" params="" file="D:\Projects\haxe\std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access">
		<from><icast><c path="Xml"/></icast></from>
		<this><c path="Xml"/></this>
		<impl><class path="haxe.xml._Access.HasNodeAccess_Impl_" params="" file="D:\Projects\haxe\std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.xml._Access.NodeListAccess" params="" file="D:\Projects\haxe\std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access">
		<from><icast><c path="Xml"/></icast></from>
		<this><c path="Xml"/></this>
		<impl><class path="haxe.xml._Access.NodeListAccess_Impl_" params="" file="D:\Projects\haxe\std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.xml.Access" params="" file="D:\Projects\haxe\std/haxe/xml/Access.hx">
		<this><c path="Xml"/></this>
		<haxe_doc>The `haxe.xml.Access` API helps providing a fast dot-syntax access to the
	most common `Xml` methods.</haxe_doc>
		<impl><class path="haxe.xml._Access.Access_Impl_" params="" file="D:\Projects\haxe\std/haxe/xml/Access.hx" private="1" module="haxe.xml.Access">
	<x public="1" get="accessor" set="null" static="1">
		<c path="Xml"/>
		<meta><m n=":impl"/></meta>
	</x>
	<name public="1" get="accessor" set="null" static="1">
		<c path="String"/>
		<meta><m n=":impl"/></meta>
		<haxe_doc>The name of the current element. This is the same as `Xml.nodeName`.</haxe_doc>
	</name>
	<innerData public="1" get="accessor" set="null" static="1">
		<c path="String"/>
		<meta><m n=":impl"/></meta>
		<haxe_doc>The inner PCDATA or CDATA of the node.

		An exception is thrown if there is no data or if there not only data
		but also other nodes.</haxe_doc>
	</innerData>
	<innerHTML public="1" get="accessor" set="null" static="1">
		<c path="String"/>
		<meta><m n=":impl"/></meta>
		<haxe_doc>The XML string built with all the sub nodes, excluding the current one.</haxe_doc>
	</innerHTML>
	<node public="1" get="accessor" set="null" static="1">
		<x path="haxe.xml._Access.NodeAccess"/>
		<meta><m n=":impl"/></meta>
		<haxe_doc><![CDATA[Access to the first sub element with the given name.

		An exception is thrown if the element doesn't exists.
		Use `hasNode` to check the existence of a node.

		```haxe
		var access = new haxe.xml.Access(Xml.parse("<user><name>John</name></user>"));
		var user = access.node.user;
		var name = user.node.name;
		trace(name.innerData); // John

		// Uncaught Error: Document is missing element password
		var password = user.node.password;
		```]]></haxe_doc>
	</node>
	<nodes public="1" get="accessor" set="null" static="1">
		<x path="haxe.xml._Access.NodeListAccess"/>
		<meta><m n=":impl"/></meta>
		<haxe_doc><![CDATA[Access to the List of elements with the given name.
		```haxe
		var fast = new haxe.xml.Access(Xml.parse("
			<users>
				<user name='John'/>
				<user name='Andy'/>
				<user name='Dan'/>
			</users>"
		));

		var users = fast.node.users;
		for (user in users.nodes.user) {
			trace(user.att.name);
		}
		```]]></haxe_doc>
	</nodes>
	<att public="1" get="accessor" set="null" static="1">
		<x path="haxe.xml._Access.AttribAccess"/>
		<meta><m n=":impl"/></meta>
		<haxe_doc><![CDATA[Access to a given attribute.

		An exception is thrown if the attribute doesn't exists.
		Use `has` to check the existence of an attribute.

		```haxe
		var f = new haxe.xml.Access(Xml.parse("<user name='Mark'></user>"));
		var user = f.node.user;
		if (user.has.name) {
			trace(user.att.name); // Mark
		}
		```]]></haxe_doc>
	</att>
	<has public="1" get="accessor" set="null" static="1">
		<x path="haxe.xml._Access.HasAttribAccess"/>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Check the existence of an attribute with the given name.</haxe_doc>
	</has>
	<hasNode public="1" get="accessor" set="null" static="1">
		<x path="haxe.xml._Access.HasNodeAccess"/>
		<meta><m n=":impl"/></meta>
		<haxe_doc><![CDATA[Check the existence of a sub node with the given name.

		```haxe
		var f = new haxe.xml.Access(Xml.parse("<user><age>31</age></user>"));
		var user = f.node.user;
		if (user.hasNode.age) {
			trace(user.node.age.innerData); // 31
		}
		```]]></haxe_doc>
	</hasNode>
	<elements public="1" get="accessor" set="null" static="1">
		<t path="Iterator"><x path="haxe.xml.Access"/></t>
		<meta><m n=":impl"/></meta>
		<haxe_doc>The list of all sub-elements which are the nodes with type `Xml.Element`.</haxe_doc>
	</elements>
	<meta><m n=":keep"/></meta>
</class></impl>
	</abstract>
	<typedef path="haxe.xml.Fast" params="" file="D:\Projects\haxe\std/haxe/xml/Fast.hx">
		<x path="haxe.xml.Access"/>
		<meta><m n=":deprecated"/></meta>
	</typedef>
	<abstract path="haxe.xml._Parser.S" params="" file="D:\Projects\haxe\std/haxe/xml/Parser.hx" private="1" module="haxe.xml.Parser">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="haxe.xml._Parser.S_Impl_" params="" file="D:\Projects\haxe\std/haxe/xml/Parser.hx" private="1" module="haxe.xml.Parser"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="haxe.xml.XmlParserException" params="" file="D:\Projects\haxe\std/haxe/xml/Parser.hx" module="haxe.xml.Parser">
		<message public="1">
			<c path="String"/>
			<haxe_doc>the XML parsing error message</haxe_doc>
		</message>
		<lineNumber public="1">
			<x path="Int"/>
			<haxe_doc>the line number at which the XML parsing error occurred</haxe_doc>
		</lineNumber>
		<positionAtLine public="1">
			<x path="Int"/>
			<haxe_doc>the character position in the reported line at which the parsing error occurred</haxe_doc>
		</positionAtLine>
		<position public="1">
			<x path="Int"/>
			<haxe_doc>the character position in the XML string at which the parsing error occurred</haxe_doc>
		</position>
		<xml public="1">
			<c path="String"/>
			<haxe_doc>the invalid XML string</haxe_doc>
		</xml>
		<toString public="1" set="method" line="94"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="75"><f a="message:xml:position">
	<c path="String"/>
	<c path="String"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="haxe.xml.Parser" params="" file="D:\Projects\haxe\std/haxe/xml/Parser.hx">
		<escapes expr="{
	var h = new haxe.ds.StringMap();
	h.set(&quot;lt&quot;, &quot;&lt;&quot;);
	h.set(&quot;gt&quot;, &quot;&gt;&quot;);
	h.set(&quot;amp&quot;, &quot;&amp;&quot;);
	h.set(&quot;quot&quot;, &quot;\&quot;&quot;);
	h.set(&quot;apos&quot;, &quot;&apos;&quot;);
	h;
}" line="100" static="1">
			<c path="haxe.ds.StringMap"><c path="String"/></c>
			<meta><m n=":value"><e><![CDATA[{
	var h = new haxe.ds.StringMap();
	h.set("lt", "<");
	h.set("gt", ">");
	h.set("amp", "&");
	h.set("quot", "\"");
	h.set("apos", "'");
	h;
}]]></e></m></meta>
		</escapes>
		<parse public="1" set="method" line="115" static="1">
			<f a="str:?strict" v=":false">
				<c path="String"/>
				<x path="Bool"/>
				<c path="Xml"/>
			</f>
			<meta><m n=":value"><e>{ strict : false }</e></m></meta>
			<haxe_doc>Parses the String into an XML Document. Set strict parsing to true in order to enable a strict check of XML attributes and entities.

		@throws haxe.xml.XmlParserException</haxe_doc>
		</parse>
		<doParse set="method" line="121" static="1">
			<f a="str:strict:?p:?parent" v="::0:">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Int"/>
				<c path="Xml"/>
				<x path="Int"/>
			</f>
			<meta><m n=":value"><e>{ p : 0 }</e></m></meta>
		</doParse>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="haxe.xml.Printer" params="" file="D:\Projects\haxe\std/haxe/xml/Printer.hx">
		<print public="1" set="method" line="35" static="1">
			<f a="xml:?pretty" v=":false">
				<c path="Xml"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":value"><e>{ pretty : false }</e></m></meta>
			<haxe_doc>Convert `Xml` to string representation.

		Set `pretty` to `true` to prettify the result.</haxe_doc>
		</print>
		<output><c path="StringBuf"/></output>
		<pretty><x path="Bool"/></pretty>
		<writeNode set="method" line="49"><f a="value:tabs">
	<c path="Xml"/>
	<c path="String"/>
	<x path="Void"/>
</f></writeNode>
		<hasChildren set="method" line="114"><f a="value">
	<c path="Xml"/>
	<x path="Bool"/>
</f></hasChildren>
		<new set="method" line="44"><f a="pretty">
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>This class provides utility methods to convert Xml instances to
	String representation.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="haxe.zip.Compress" params="" file="D:\Projects\haxe\std/haxe/zip/Compress.hx">
		<run public="1" set="method" line="38" static="1"><f a="s:level">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></run>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<typedef path="haxe.zip.Entry" params="" file="D:\Projects\haxe\std/haxe/zip/Entry.hx"><a>
	<fileTime><c path="Date"/></fileTime>
	<fileSize><x path="Int"/></fileSize>
	<fileName><c path="String"/></fileName>
	<extraFields>
		<x path="Null"><c path="haxe.ds.List"><e path="haxe.zip.ExtraField"/></c></x>
		<meta><m n=":optional"/></meta>
	</extraFields>
	<dataSize><x path="Int"/></dataSize>
	<data><x path="Null"><c path="haxe.io.Bytes"/></x></data>
	<crc32><x path="Null"><x path="Int"/></x></crc32>
	<compressed><x path="Bool"/></compressed>
</a></typedef>
	<enum path="haxe.zip.Huffman" params="" file="D:\Projects\haxe\std/haxe/zip/Huffman.hx">
		<Found a="i"><x path="Int"/></Found>
		<NeedBit a="left:right">
			<e path="haxe.zip.Huffman"/>
			<e path="haxe.zip.Huffman"/>
		</NeedBit>
		<NeedBits a="n:table">
			<x path="Int"/>
			<c path="Array"><e path="haxe.zip.Huffman"/></c>
		</NeedBits>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<class path="haxe.zip.HuffTools" params="" file="D:\Projects\haxe\std/haxe/zip/Huffman.hx" module="haxe.zip.Huffman">
		<treeDepth set="method" line="34"><f a="t">
	<e path="haxe.zip.Huffman"/>
	<x path="Int"/>
</f></treeDepth>
		<treeCompress set="method" line="45"><f a="t">
	<e path="haxe.zip.Huffman"/>
	<e path="haxe.zip.Huffman"/>
</f></treeCompress>
		<treeWalk set="method" line="62"><f a="table:p:cd:d:t">
	<c path="Array"><e path="haxe.zip.Huffman"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<e path="haxe.zip.Huffman"/>
	<x path="Void"/>
</f></treeWalk>
		<treeMake set="method" line="75"><f a="bits:maxbits:v:len">
	<c path="haxe.ds.IntMap"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<e path="haxe.zip.Huffman"/>
</f></treeMake>
		<make public="1" set="method" line="86"><f a="lengths:pos:nlengths:maxbits">
	<c path="Array"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<e path="haxe.zip.Huffman"/>
</f></make>
		<new public="1" set="method" line="32"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="haxe.zip._InflateImpl.Window" params="" file="D:\Projects\haxe\std/haxe/zip/InflateImpl.hx" private="1" module="haxe.zip.InflateImpl">
		<buffer public="1"><c path="haxe.io.Bytes"/></buffer>
		<pos public="1"><x path="Int"/></pos>
		<crc><c path="haxe.crypto.Adler32"/></crc>
		<slide public="1" set="method" line="44"><f a=""><x path="Void"/></f></slide>
		<addBytes public="1" set="method" line="53"><f a="b:p:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></addBytes>
		<addByte public="1" set="method" line="60"><f a="c">
	<x path="Int"/>
	<x path="Void"/>
</f></addByte>
		<getLastChar public="1" set="method" line="67"><f a=""><x path="Int"/></f></getLastChar>
		<available public="1" set="method" line="71"><f a=""><x path="Int"/></f></available>
		<checksum public="1" set="method" line="75"><f a=""><c path="haxe.crypto.Adler32"/></f></checksum>
		<new public="1" set="method" line="37"><f a="hasCrc">
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<enum path="haxe.zip._InflateImpl.State" params="" file="D:\Projects\haxe\std/haxe/zip/InflateImpl.hx" private="1" module="haxe.zip.InflateImpl">
		<Head/>
		<Block/>
		<CData/>
		<Flat/>
		<Crc/>
		<Dist/>
		<DistOne/>
		<Done/>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<class path="haxe.zip.InflateImpl" params="" file="D:\Projects\haxe\std/haxe/zip/InflateImpl.hx">
		<LEN_EXTRA_BITS_TBL expr="[0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, -1, -1]" line="97" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>[0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, -1, -1]</e></m></meta>
		</LEN_EXTRA_BITS_TBL>
		<LEN_BASE_VAL_TBL expr="[3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258]" line="100" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>[3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258]</e></m></meta>
		</LEN_BASE_VAL_TBL>
		<DIST_EXTRA_BITS_TBL expr="[0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, -1, -1]" line="103" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>[0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, -1, -1]</e></m></meta>
		</DIST_EXTRA_BITS_TBL>
		<DIST_BASE_VAL_TBL expr="[1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577]" line="106" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>[1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577]</e></m></meta>
		</DIST_BASE_VAL_TBL>
		<CODE_LENGTHS_POS expr="[16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]" line="109" static="1">
			<c path="Array"><x path="Int"/></c>
			<meta><m n=":value"><e>[16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]</e></m></meta>
		</CODE_LENGTHS_POS>
		<FIXED_HUFFMAN expr="null" line="127" static="1">
			<e path="haxe.zip.Huffman"/>
			<meta><m n=":value"><e>null</e></m></meta>
		</FIXED_HUFFMAN>
		<run public="1" set="method" line="388" static="1">
			<f a="i:?bufsize" v=":65536">
				<c path="haxe.io.Input"/>
				<x path="Int"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<meta><m n=":value"><e>{ bufsize : 65536 }</e></m></meta>
		</run>
		<nbits><x path="Int"/></nbits>
		<bits><x path="Int"/></bits>
		<state><e path="haxe.zip._InflateImpl.State"/></state>
		<isFinal><x path="Bool"/></isFinal>
		<huffman><e path="haxe.zip.Huffman"/></huffman>
		<huffdist><x path="Null"><e path="haxe.zip.Huffman"/></x></huffdist>
		<htools><c path="haxe.zip.HuffTools"/></htools>
		<len><x path="Int"/></len>
		<dist><x path="Int"/></dist>
		<needed><x path="Int"/></needed>
		<output><c path="haxe.io.Bytes"/></output>
		<outpos><x path="Int"/></outpos>
		<input><c path="haxe.io.Input"/></input>
		<lengths><c path="Array"><x path="Int"/></c></lengths>
		<window><c path="haxe.zip._InflateImpl.Window"/></window>
		<buildFixedHuffman set="method" line="149"><f a=""><e path="haxe.zip.Huffman"/></f></buildFixedHuffman>
		<readBytes public="1" set="method" line="159"><f a="b:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></readBytes>
		<getBits set="method" line="168"><f a="n">
	<x path="Int"/>
	<x path="Int"/>
</f></getBits>
		<getBit set="method" line="179"><f a=""><x path="Bool"/></f></getBit>
		<getRevBits set="method" line="190"><f a="n">
	<x path="Int"/>
	<x path="Int"/>
</f></getRevBits>
		<resetBits set="method" line="199"><f a=""><x path="Void"/></f></resetBits>
		<addBytes set="method" line="204"><f a="b:p:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></addBytes>
		<addByte set="method" line="211"><f a="b">
	<x path="Int"/>
	<x path="Void"/>
</f></addByte>
		<addDistOne set="method" line="218"><f a="n">
	<x path="Int"/>
	<x path="Void"/>
</f></addDistOne>
		<addDist set="method" line="224"><f a="d:len">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></addDist>
		<applyHuffman set="method" line="228"><f a="h">
	<e path="haxe.zip.Huffman"/>
	<x path="Int"/>
</f></applyHuffman>
		<inflateLengths set="method" line="236"><f a="a:max">
	<c path="Array"><x path="Int"/></c>
	<x path="Int"/>
	<x path="Void"/>
</f></inflateLengths>
		<inflateLoop set="method" line="268"><f a=""><x path="Bool"/></f></inflateLoop>
		<new public="1" set="method" line="129">
			<f a="i:?header:?crc" v=":true:true">
				<c path="haxe.io.Input"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ crc : true, header : true }</e></m></meta>
		</new>
		<haxe_doc>A pure Haxe implementation of the ZLIB Inflate algorithm which allows reading compressed data without any platform-specific support.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="haxe.zip.Uncompress" params="" file="D:\Projects\haxe\std/haxe/zip/Uncompress.hx">
		<run public="1" set="method" line="38" static="1"><f a="src:?bufsize">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></run>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
</haxe>